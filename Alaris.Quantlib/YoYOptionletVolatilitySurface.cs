//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class YoYOptionletVolatilitySurface : VolatilityTermStructure {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal YoYOptionletVolatilitySurface(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.YoYOptionletVolatilitySurface_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(YoYOptionletVolatilitySurface obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_YoYOptionletVolatilitySurface(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Period observationLag() {
    Period ret = new Period(NQuantLibcPINVOKE.YoYOptionletVolatilitySurface_observationLag(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double frequency() {
    double ret = NQuantLibcPINVOKE.YoYOptionletVolatilitySurface_frequency(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool indexIsInterpolated() {
    bool ret = NQuantLibcPINVOKE.YoYOptionletVolatilitySurface_indexIsInterpolated(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Date baseDate() {
    Date ret = new Date(NQuantLibcPINVOKE.YoYOptionletVolatilitySurface_baseDate(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double timeFromBase(Date date, Period obsLag) {
    double ret = NQuantLibcPINVOKE.YoYOptionletVolatilitySurface_timeFromBase__SWIG_0(swigCPtr, Date.getCPtr(date), Period.getCPtr(obsLag));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double timeFromBase(Date date) {
    double ret = NQuantLibcPINVOKE.YoYOptionletVolatilitySurface_timeFromBase__SWIG_1(swigCPtr, Date.getCPtr(date));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new double minStrike() {
    double ret = NQuantLibcPINVOKE.YoYOptionletVolatilitySurface_minStrike(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new double maxStrike() {
    double ret = NQuantLibcPINVOKE.YoYOptionletVolatilitySurface_maxStrike(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double baseLevel() {
    double ret = NQuantLibcPINVOKE.YoYOptionletVolatilitySurface_baseLevel(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double volatility(Date maturityDate, double strike, Period obsLag, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.YoYOptionletVolatilitySurface_volatility__SWIG_0(swigCPtr, Date.getCPtr(maturityDate), strike, Period.getCPtr(obsLag), extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double volatility(Date maturityDate, double strike, Period obsLag) {
    double ret = NQuantLibcPINVOKE.YoYOptionletVolatilitySurface_volatility__SWIG_1(swigCPtr, Date.getCPtr(maturityDate), strike, Period.getCPtr(obsLag));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double volatility(Date maturityDate, double strike) {
    double ret = NQuantLibcPINVOKE.YoYOptionletVolatilitySurface_volatility__SWIG_2(swigCPtr, Date.getCPtr(maturityDate), strike);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double volatility(Period optionTenor, double strike, Period obsLag, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.YoYOptionletVolatilitySurface_volatility__SWIG_3(swigCPtr, Period.getCPtr(optionTenor), strike, Period.getCPtr(obsLag), extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double volatility(Period optionTenor, double strike, Period obsLag) {
    double ret = NQuantLibcPINVOKE.YoYOptionletVolatilitySurface_volatility__SWIG_4(swigCPtr, Period.getCPtr(optionTenor), strike, Period.getCPtr(obsLag));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double volatility(Period optionTenor, double strike) {
    double ret = NQuantLibcPINVOKE.YoYOptionletVolatilitySurface_volatility__SWIG_5(swigCPtr, Period.getCPtr(optionTenor), strike);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double totalVariance(Date exerciseDate, double strike, Period obsLag, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.YoYOptionletVolatilitySurface_totalVariance__SWIG_0(swigCPtr, Date.getCPtr(exerciseDate), strike, Period.getCPtr(obsLag), extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double totalVariance(Date exerciseDate, double strike, Period obsLag) {
    double ret = NQuantLibcPINVOKE.YoYOptionletVolatilitySurface_totalVariance__SWIG_1(swigCPtr, Date.getCPtr(exerciseDate), strike, Period.getCPtr(obsLag));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double totalVariance(Date exerciseDate, double strike) {
    double ret = NQuantLibcPINVOKE.YoYOptionletVolatilitySurface_totalVariance__SWIG_2(swigCPtr, Date.getCPtr(exerciseDate), strike);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double totalVariance(Period optionTenor, double strike, Period obsLag, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.YoYOptionletVolatilitySurface_totalVariance__SWIG_3(swigCPtr, Period.getCPtr(optionTenor), strike, Period.getCPtr(obsLag), extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double totalVariance(Period optionTenor, double strike, Period obsLag) {
    double ret = NQuantLibcPINVOKE.YoYOptionletVolatilitySurface_totalVariance__SWIG_4(swigCPtr, Period.getCPtr(optionTenor), strike, Period.getCPtr(obsLag));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double totalVariance(Period optionTenor, double strike) {
    double ret = NQuantLibcPINVOKE.YoYOptionletVolatilitySurface_totalVariance__SWIG_5(swigCPtr, Period.getCPtr(optionTenor), strike);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
