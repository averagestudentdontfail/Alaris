//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class RangeAccrualFloatersCoupon : FloatingRateCoupon {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal RangeAccrualFloatersCoupon(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.RangeAccrualFloatersCoupon_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RangeAccrualFloatersCoupon obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_RangeAccrualFloatersCoupon(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public RangeAccrualFloatersCoupon(Date paymentDate, double nominal, IborIndex index, Date startDate, Date endDate, uint fixingDays, DayCounter dayCounter, double gearing, double spread, Date refPeriodStart, Date refPeriodEnd, SWIGTYPE_p_ext__shared_ptrT_Schedule_t observationsSchedule, double lowerTrigger, double upperTrigger) : this(NQuantLibcPINVOKE.new_RangeAccrualFloatersCoupon(Date.getCPtr(paymentDate), nominal, IborIndex.getCPtr(index), Date.getCPtr(startDate), Date.getCPtr(endDate), fixingDays, DayCounter.getCPtr(dayCounter), gearing, spread, Date.getCPtr(refPeriodStart), Date.getCPtr(refPeriodEnd), SWIGTYPE_p_ext__shared_ptrT_Schedule_t.getCPtr(observationsSchedule), lowerTrigger, upperTrigger), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

}
