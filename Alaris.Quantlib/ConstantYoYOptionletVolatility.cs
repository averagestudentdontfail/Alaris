//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ConstantYoYOptionletVolatility : YoYOptionletVolatilitySurface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ConstantYoYOptionletVolatility(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.ConstantYoYOptionletVolatility_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ConstantYoYOptionletVolatility obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_ConstantYoYOptionletVolatility(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ConstantYoYOptionletVolatility(double volatility, uint settlementDays, Calendar cal, BusinessDayConvention bdc, DayCounter dc, Period observationLag, Frequency frequency, bool indexIsInterpolated, double minStrike, double maxStrike) : this(NQuantLibcPINVOKE.new_ConstantYoYOptionletVolatility__SWIG_0(volatility, settlementDays, Calendar.getCPtr(cal), (int)bdc, DayCounter.getCPtr(dc), Period.getCPtr(observationLag), (int)frequency, indexIsInterpolated, minStrike, maxStrike), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public ConstantYoYOptionletVolatility(double volatility, uint settlementDays, Calendar cal, BusinessDayConvention bdc, DayCounter dc, Period observationLag, Frequency frequency, bool indexIsInterpolated, double minStrike) : this(NQuantLibcPINVOKE.new_ConstantYoYOptionletVolatility__SWIG_1(volatility, settlementDays, Calendar.getCPtr(cal), (int)bdc, DayCounter.getCPtr(dc), Period.getCPtr(observationLag), (int)frequency, indexIsInterpolated, minStrike), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public ConstantYoYOptionletVolatility(double volatility, uint settlementDays, Calendar cal, BusinessDayConvention bdc, DayCounter dc, Period observationLag, Frequency frequency, bool indexIsInterpolated) : this(NQuantLibcPINVOKE.new_ConstantYoYOptionletVolatility__SWIG_2(volatility, settlementDays, Calendar.getCPtr(cal), (int)bdc, DayCounter.getCPtr(dc), Period.getCPtr(observationLag), (int)frequency, indexIsInterpolated), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

}
