//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class SwaptionVolatilityStructureHandle : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SwaptionVolatilityStructureHandle(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SwaptionVolatilityStructureHandle obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SwaptionVolatilityStructureHandle obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~SwaptionVolatilityStructureHandle() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_SwaptionVolatilityStructureHandle(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SwaptionVolatilityStructureHandle() : this(NQuantLibcPINVOKE.new_SwaptionVolatilityStructureHandle__SWIG_0(), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public SwaptionVolatilityStructureHandle(SwaptionVolatilityStructure p, bool registerAsObserver) : this(NQuantLibcPINVOKE.new_SwaptionVolatilityStructureHandle__SWIG_1(SwaptionVolatilityStructure.getCPtr(p), registerAsObserver), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public SwaptionVolatilityStructureHandle(SwaptionVolatilityStructure p) : this(NQuantLibcPINVOKE.new_SwaptionVolatilityStructureHandle__SWIG_2(SwaptionVolatilityStructure.getCPtr(p)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public SwaptionVolatilityStructure __deref__() {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle___deref__(swigCPtr);
    SwaptionVolatilityStructure ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwaptionVolatilityStructure(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SwaptionVolatilityStructure currentLink() {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_currentLink(swigCPtr);
    SwaptionVolatilityStructure ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwaptionVolatilityStructure(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool empty() {
    bool ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_empty(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Observable asObservable() {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_asObservable(swigCPtr);
    Observable ret = (cPtr == global::System.IntPtr.Zero) ? null : new Observable(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double volatility(Date start, Period length, double strike, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_volatility__SWIG_0(swigCPtr, Date.getCPtr(start), Period.getCPtr(length), strike, extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double volatility(Date start, Period length, double strike) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_volatility__SWIG_1(swigCPtr, Date.getCPtr(start), Period.getCPtr(length), strike);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double volatility(double start, double length, double strike, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_volatility__SWIG_2(swigCPtr, start, length, strike, extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double volatility(double start, double length, double strike) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_volatility__SWIG_3(swigCPtr, start, length, strike);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double blackVariance(Date start, Period length, double strike, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_blackVariance__SWIG_0(swigCPtr, Date.getCPtr(start), Period.getCPtr(length), strike, extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double blackVariance(Date start, Period length, double strike) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_blackVariance__SWIG_1(swigCPtr, Date.getCPtr(start), Period.getCPtr(length), strike);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double blackVariance(double start, double length, double strike, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_blackVariance__SWIG_2(swigCPtr, start, length, strike, extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double blackVariance(double start, double length, double strike) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_blackVariance__SWIG_3(swigCPtr, start, length, strike);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Date optionDateFromTenor(Period p) {
    Date ret = new Date(NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_optionDateFromTenor(swigCPtr, Period.getCPtr(p)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(Period optionTenor, Period swapTenor, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_shift__SWIG_0(swigCPtr, Period.getCPtr(optionTenor), Period.getCPtr(swapTenor), extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(Period optionTenor, Period swapTenor) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_shift__SWIG_1(swigCPtr, Period.getCPtr(optionTenor), Period.getCPtr(swapTenor));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(Date optionDate, Period swapTenor, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_shift__SWIG_2(swigCPtr, Date.getCPtr(optionDate), Period.getCPtr(swapTenor), extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(Date optionDate, Period swapTenor) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_shift__SWIG_3(swigCPtr, Date.getCPtr(optionDate), Period.getCPtr(swapTenor));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(double optionTime, Period swapTenor, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_shift__SWIG_4(swigCPtr, optionTime, Period.getCPtr(swapTenor), extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(double optionTime, Period swapTenor) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_shift__SWIG_5(swigCPtr, optionTime, Period.getCPtr(swapTenor));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(Period optionTenor, double swapLength, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_shift__SWIG_6(swigCPtr, Period.getCPtr(optionTenor), swapLength, extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(Period optionTenor, double swapLength) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_shift__SWIG_7(swigCPtr, Period.getCPtr(optionTenor), swapLength);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(Date optionDate, double swapLength, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_shift__SWIG_8(swigCPtr, Date.getCPtr(optionDate), swapLength, extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(Date optionDate, double swapLength) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_shift__SWIG_9(swigCPtr, Date.getCPtr(optionDate), swapLength);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(double optionTime, double swapLength, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_shift__SWIG_10(swigCPtr, optionTime, swapLength, extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(double optionTime, double swapLength) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_shift__SWIG_11(swigCPtr, optionTime, swapLength);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(Period optionTenor, Period swapTenor, bool extr) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_smileSection__SWIG_0(swigCPtr, Period.getCPtr(optionTenor), Period.getCPtr(swapTenor), extr);
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(Period optionTenor, Period swapTenor) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_smileSection__SWIG_1(swigCPtr, Period.getCPtr(optionTenor), Period.getCPtr(swapTenor));
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(Date optionDate, Period swapTenor, bool extr) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_smileSection__SWIG_2(swigCPtr, Date.getCPtr(optionDate), Period.getCPtr(swapTenor), extr);
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(Date optionDate, Period swapTenor) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_smileSection__SWIG_3(swigCPtr, Date.getCPtr(optionDate), Period.getCPtr(swapTenor));
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(double optionTime, Period swapTenor, bool extr) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_smileSection__SWIG_4(swigCPtr, optionTime, Period.getCPtr(swapTenor), extr);
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(double optionTime, Period swapTenor) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_smileSection__SWIG_5(swigCPtr, optionTime, Period.getCPtr(swapTenor));
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(Period optionTenor, double swapLength, bool extr) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_smileSection__SWIG_6(swigCPtr, Period.getCPtr(optionTenor), swapLength, extr);
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(Period optionTenor, double swapLength) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_smileSection__SWIG_7(swigCPtr, Period.getCPtr(optionTenor), swapLength);
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(Date optionDate, double swapLength, bool extr) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_smileSection__SWIG_8(swigCPtr, Date.getCPtr(optionDate), swapLength, extr);
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(Date optionDate, double swapLength) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_smileSection__SWIG_9(swigCPtr, Date.getCPtr(optionDate), swapLength);
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(double optionTime, double swapLength, bool extr) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_smileSection__SWIG_10(swigCPtr, optionTime, swapLength, extr);
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(double optionTime, double swapLength) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_smileSection__SWIG_11(swigCPtr, optionTime, swapLength);
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double minStrike() {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_minStrike(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double maxStrike() {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_maxStrike(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DayCounter dayCounter() {
    DayCounter ret = new DayCounter(NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_dayCounter(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double timeFromReference(Date date) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_timeFromReference(swigCPtr, Date.getCPtr(date));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Calendar calendar() {
    Calendar ret = new Calendar(NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_calendar(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Date referenceDate() {
    Date ret = new Date(NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_referenceDate(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Date maxDate() {
    Date ret = new Date(NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_maxDate(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double maxTime() {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_maxTime(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void enableExtrapolation() {
    NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_enableExtrapolation(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public void disableExtrapolation() {
    NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_disableExtrapolation(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool allowsExtrapolation() {
    bool ret = NQuantLibcPINVOKE.SwaptionVolatilityStructureHandle_allowsExtrapolation(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
