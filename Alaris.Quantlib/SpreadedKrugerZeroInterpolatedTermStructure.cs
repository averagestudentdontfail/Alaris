//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class SpreadedKrugerZeroInterpolatedTermStructure : YieldTermStructure {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal SpreadedKrugerZeroInterpolatedTermStructure(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.SpreadedKrugerZeroInterpolatedTermStructure_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SpreadedKrugerZeroInterpolatedTermStructure obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_SpreadedKrugerZeroInterpolatedTermStructure(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public SpreadedKrugerZeroInterpolatedTermStructure(YieldTermStructureHandle baseCurve, QuoteHandleVector spreads, DateVector dates, Compounding comp, Frequency freq, DayCounter dc, Kruger factory) : this(NQuantLibcPINVOKE.new_SpreadedKrugerZeroInterpolatedTermStructure__SWIG_0(YieldTermStructureHandle.getCPtr(baseCurve), QuoteHandleVector.getCPtr(spreads), DateVector.getCPtr(dates), (int)comp, (int)freq, DayCounter.getCPtr(dc), Kruger.getCPtr(factory)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public SpreadedKrugerZeroInterpolatedTermStructure(YieldTermStructureHandle baseCurve, QuoteHandleVector spreads, DateVector dates, Compounding comp, Frequency freq, DayCounter dc) : this(NQuantLibcPINVOKE.new_SpreadedKrugerZeroInterpolatedTermStructure__SWIG_1(YieldTermStructureHandle.getCPtr(baseCurve), QuoteHandleVector.getCPtr(spreads), DateVector.getCPtr(dates), (int)comp, (int)freq, DayCounter.getCPtr(dc)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public SpreadedKrugerZeroInterpolatedTermStructure(YieldTermStructureHandle baseCurve, QuoteHandleVector spreads, DateVector dates, Compounding comp, Frequency freq) : this(NQuantLibcPINVOKE.new_SpreadedKrugerZeroInterpolatedTermStructure__SWIG_2(YieldTermStructureHandle.getCPtr(baseCurve), QuoteHandleVector.getCPtr(spreads), DateVector.getCPtr(dates), (int)comp, (int)freq), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public SpreadedKrugerZeroInterpolatedTermStructure(YieldTermStructureHandle baseCurve, QuoteHandleVector spreads, DateVector dates, Compounding comp) : this(NQuantLibcPINVOKE.new_SpreadedKrugerZeroInterpolatedTermStructure__SWIG_3(YieldTermStructureHandle.getCPtr(baseCurve), QuoteHandleVector.getCPtr(spreads), DateVector.getCPtr(dates), (int)comp), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public SpreadedKrugerZeroInterpolatedTermStructure(YieldTermStructureHandle baseCurve, QuoteHandleVector spreads, DateVector dates) : this(NQuantLibcPINVOKE.new_SpreadedKrugerZeroInterpolatedTermStructure__SWIG_4(YieldTermStructureHandle.getCPtr(baseCurve), QuoteHandleVector.getCPtr(spreads), DateVector.getCPtr(dates)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

}
