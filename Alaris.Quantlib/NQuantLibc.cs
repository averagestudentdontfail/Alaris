//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class NQuantLibc {
  public static double daysBetween(Date arg0, Date arg1) {
    double ret = NQuantLibcPINVOKE.daysBetween(Date.getCPtr(arg0), Date.getCPtr(arg1));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int nullInt() {
    int ret = NQuantLibcPINVOKE.nullInt();
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double nullDouble() {
    double ret = NQuantLibcPINVOKE.nullDouble();
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Date yearFractionToDate(DayCounter dayCounter, Date referenceDate, double t) {
    Date ret = new Date(NQuantLibcPINVOKE.yearFractionToDate(DayCounter.getCPtr(dayCounter), Date.getCPtr(referenceDate), t), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Matrix inverse(Matrix m) {
    Matrix ret = new Matrix(NQuantLibcPINVOKE.inverse(Matrix.getCPtr(m)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Matrix transpose(Matrix m) {
    Matrix ret = new Matrix(NQuantLibcPINVOKE.transpose(Matrix.getCPtr(m)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Matrix outerProduct(QlArray v1, QlArray v2) {
    Matrix ret = new Matrix(NQuantLibcPINVOKE.outerProduct(QlArray.getCPtr(v1), QlArray.getCPtr(v2)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Matrix pseudoSqrt(Matrix m, SalvagingAlgorithm.Type a) {
    Matrix ret = new Matrix(NQuantLibcPINVOKE.pseudoSqrt(Matrix.getCPtr(m), (int)a), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Matrix CholeskyDecomposition(Matrix m, bool flexible) {
    Matrix ret = new Matrix(NQuantLibcPINVOKE.CholeskyDecomposition__SWIG_0(Matrix.getCPtr(m), flexible), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Matrix CholeskyDecomposition(Matrix m) {
    Matrix ret = new Matrix(NQuantLibcPINVOKE.CholeskyDecomposition__SWIG_1(Matrix.getCPtr(m)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static QlArray CholeskySolveFor(Matrix L, QlArray b) {
    QlArray ret = new QlArray(NQuantLibcPINVOKE.CholeskySolveFor(Matrix.getCPtr(L), QlArray.getCPtr(b)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool close(double x, double y) {
    bool ret = NQuantLibcPINVOKE.close__SWIG_0(x, y);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool close(double x, double y, uint n) {
    bool ret = NQuantLibcPINVOKE.close__SWIG_1(x, y, n);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool close_enough(double x, double y) {
    bool ret = NQuantLibcPINVOKE.close_enough__SWIG_0(x, y);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool close_enough(double x, double y, uint n) {
    bool ret = NQuantLibcPINVOKE.close_enough__SWIG_1(x, y, n);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RelinkableQuoteHandle makeQuoteHandle(double value) {
    RelinkableQuoteHandle ret = new RelinkableQuoteHandle(NQuantLibcPINVOKE.makeQuoteHandle(value), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IborIndex as_iborindex(InterestRateIndex index) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_iborindex(InterestRateIndex.getCPtr(index));
    IborIndex ret = (cPtr == global::System.IntPtr.Zero) ? null : new IborIndex(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SwapIndex as_swap_index(InterestRateIndex index) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_swap_index(InterestRateIndex.getCPtr(index));
    SwapIndex ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwapIndex(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double sabrVolatility(double strike, double forward, double expiryTime, double alpha, double beta, double nu, double rho, VolatilityType volatilityType) {
    double ret = NQuantLibcPINVOKE.sabrVolatility__SWIG_0(strike, forward, expiryTime, alpha, beta, nu, rho, (int)volatilityType);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double sabrVolatility(double strike, double forward, double expiryTime, double alpha, double beta, double nu, double rho) {
    double ret = NQuantLibcPINVOKE.sabrVolatility__SWIG_1(strike, forward, expiryTime, alpha, beta, nu, rho);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double shiftedSabrVolatility(double strike, double forward, double expiryTime, double alpha, double beta, double nu, double rho, double shift, VolatilityType volatilityType) {
    double ret = NQuantLibcPINVOKE.shiftedSabrVolatility__SWIG_0(strike, forward, expiryTime, alpha, beta, nu, rho, shift, (int)volatilityType);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double shiftedSabrVolatility(double strike, double forward, double expiryTime, double alpha, double beta, double nu, double rho, double shift) {
    double ret = NQuantLibcPINVOKE.shiftedSabrVolatility__SWIG_1(strike, forward, expiryTime, alpha, beta, nu, rho, shift);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double sabrFlochKennedyVolatility(double strike, double forward, double expiryTime, double alpha, double beta, double nu, double rho) {
    double ret = NQuantLibcPINVOKE.sabrFlochKennedyVolatility(strike, forward, expiryTime, alpha, beta, nu, rho);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DoubleVector sabrGuess(double k_m, double vol_m, double k_0, double vol_0, double k_p, double vol_p, double forward, double expiryTime, double beta, double shift, VolatilityType volatilityType) {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.sabrGuess(k_m, vol_m, k_0, vol_0, k_p, vol_p, forward, expiryTime, beta, shift, (int)volatilityType), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IndexedCashFlow as_indexed_cashflow(CashFlow cf) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_indexed_cashflow(CashFlow.getCPtr(cf));
    IndexedCashFlow ret = (cPtr == global::System.IntPtr.Zero) ? null : new IndexedCashFlow(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Coupon as_coupon(CashFlow cf) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_coupon(CashFlow.getCPtr(cf));
    Coupon ret = (cPtr == global::System.IntPtr.Zero) ? null : new Coupon(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FixedRateCoupon as_fixed_rate_coupon(CashFlow cf) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_fixed_rate_coupon(CashFlow.getCPtr(cf));
    FixedRateCoupon ret = (cPtr == global::System.IntPtr.Zero) ? null : new FixedRateCoupon(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setCouponPricer(Leg arg0, FloatingRateCouponPricer arg1) {
    NQuantLibcPINVOKE.setCouponPricer__SWIG_0(Leg.getCPtr(arg0), FloatingRateCouponPricer.getCPtr(arg1));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public static FloatingRateCoupon as_floating_rate_coupon(CashFlow cf) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_floating_rate_coupon(CashFlow.getCPtr(cf));
    FloatingRateCoupon ret = (cPtr == global::System.IntPtr.Zero) ? null : new FloatingRateCoupon(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OvernightIndexedCoupon as_overnight_indexed_coupon(CashFlow cf) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_overnight_indexed_coupon(CashFlow.getCPtr(cf));
    OvernightIndexedCoupon ret = (cPtr == global::System.IntPtr.Zero) ? null : new OvernightIndexedCoupon(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SubPeriodsCoupon as_multiple_resets_coupon(CashFlow cf) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_multiple_resets_coupon(CashFlow.getCPtr(cf));
    SubPeriodsCoupon ret = (cPtr == global::System.IntPtr.Zero) ? null : new SubPeriodsCoupon(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SubPeriodsCoupon as_sub_periods_coupon(CashFlow cf) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_sub_periods_coupon(CashFlow.getCPtr(cf));
    SubPeriodsCoupon ret = (cPtr == global::System.IntPtr.Zero) ? null : new SubPeriodsCoupon(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setCouponPricer(Leg arg0, EquityCashFlowPricer arg1) {
    NQuantLibcPINVOKE.setCouponPricer__SWIG_1(Leg.getCPtr(arg0), EquityCashFlowPricer.getCPtr(arg1));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public static Leg FixedRateLeg(Schedule schedule, DayCounter dayCount, DoubleVector nominals, DoubleVector couponRates, BusinessDayConvention paymentAdjustment, DayCounter firstPeriodDayCount, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention, bool exCouponEndOfMonth, Calendar paymentCalendar, int paymentLag, Compounding compounding, Frequency compoundingFrequency, InterestRateVector interestRates) {
    Leg ret = new Leg(NQuantLibcPINVOKE.FixedRateLeg__SWIG_0(Schedule.getCPtr(schedule), DayCounter.getCPtr(dayCount), DoubleVector.getCPtr(nominals), DoubleVector.getCPtr(couponRates), (int)paymentAdjustment, DayCounter.getCPtr(firstPeriodDayCount), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention, exCouponEndOfMonth, Calendar.getCPtr(paymentCalendar), paymentLag, (int)compounding, (int)compoundingFrequency, InterestRateVector.getCPtr(interestRates)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg FixedRateLeg(Schedule schedule, DayCounter dayCount, DoubleVector nominals, DoubleVector couponRates, BusinessDayConvention paymentAdjustment, DayCounter firstPeriodDayCount, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention, bool exCouponEndOfMonth, Calendar paymentCalendar, int paymentLag, Compounding compounding, Frequency compoundingFrequency) {
    Leg ret = new Leg(NQuantLibcPINVOKE.FixedRateLeg__SWIG_1(Schedule.getCPtr(schedule), DayCounter.getCPtr(dayCount), DoubleVector.getCPtr(nominals), DoubleVector.getCPtr(couponRates), (int)paymentAdjustment, DayCounter.getCPtr(firstPeriodDayCount), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention, exCouponEndOfMonth, Calendar.getCPtr(paymentCalendar), paymentLag, (int)compounding, (int)compoundingFrequency), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg FixedRateLeg(Schedule schedule, DayCounter dayCount, DoubleVector nominals, DoubleVector couponRates, BusinessDayConvention paymentAdjustment, DayCounter firstPeriodDayCount, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention, bool exCouponEndOfMonth, Calendar paymentCalendar, int paymentLag, Compounding compounding) {
    Leg ret = new Leg(NQuantLibcPINVOKE.FixedRateLeg__SWIG_2(Schedule.getCPtr(schedule), DayCounter.getCPtr(dayCount), DoubleVector.getCPtr(nominals), DoubleVector.getCPtr(couponRates), (int)paymentAdjustment, DayCounter.getCPtr(firstPeriodDayCount), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention, exCouponEndOfMonth, Calendar.getCPtr(paymentCalendar), paymentLag, (int)compounding), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg FixedRateLeg(Schedule schedule, DayCounter dayCount, DoubleVector nominals, DoubleVector couponRates, BusinessDayConvention paymentAdjustment, DayCounter firstPeriodDayCount, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention, bool exCouponEndOfMonth, Calendar paymentCalendar, int paymentLag) {
    Leg ret = new Leg(NQuantLibcPINVOKE.FixedRateLeg__SWIG_3(Schedule.getCPtr(schedule), DayCounter.getCPtr(dayCount), DoubleVector.getCPtr(nominals), DoubleVector.getCPtr(couponRates), (int)paymentAdjustment, DayCounter.getCPtr(firstPeriodDayCount), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention, exCouponEndOfMonth, Calendar.getCPtr(paymentCalendar), paymentLag), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg FixedRateLeg(Schedule schedule, DayCounter dayCount, DoubleVector nominals, DoubleVector couponRates, BusinessDayConvention paymentAdjustment, DayCounter firstPeriodDayCount, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention, bool exCouponEndOfMonth, Calendar paymentCalendar) {
    Leg ret = new Leg(NQuantLibcPINVOKE.FixedRateLeg__SWIG_4(Schedule.getCPtr(schedule), DayCounter.getCPtr(dayCount), DoubleVector.getCPtr(nominals), DoubleVector.getCPtr(couponRates), (int)paymentAdjustment, DayCounter.getCPtr(firstPeriodDayCount), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention, exCouponEndOfMonth, Calendar.getCPtr(paymentCalendar)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg FixedRateLeg(Schedule schedule, DayCounter dayCount, DoubleVector nominals, DoubleVector couponRates, BusinessDayConvention paymentAdjustment, DayCounter firstPeriodDayCount, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention, bool exCouponEndOfMonth) {
    Leg ret = new Leg(NQuantLibcPINVOKE.FixedRateLeg__SWIG_5(Schedule.getCPtr(schedule), DayCounter.getCPtr(dayCount), DoubleVector.getCPtr(nominals), DoubleVector.getCPtr(couponRates), (int)paymentAdjustment, DayCounter.getCPtr(firstPeriodDayCount), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention, exCouponEndOfMonth), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg FixedRateLeg(Schedule schedule, DayCounter dayCount, DoubleVector nominals, DoubleVector couponRates, BusinessDayConvention paymentAdjustment, DayCounter firstPeriodDayCount, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention) {
    Leg ret = new Leg(NQuantLibcPINVOKE.FixedRateLeg__SWIG_6(Schedule.getCPtr(schedule), DayCounter.getCPtr(dayCount), DoubleVector.getCPtr(nominals), DoubleVector.getCPtr(couponRates), (int)paymentAdjustment, DayCounter.getCPtr(firstPeriodDayCount), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg FixedRateLeg(Schedule schedule, DayCounter dayCount, DoubleVector nominals, DoubleVector couponRates, BusinessDayConvention paymentAdjustment, DayCounter firstPeriodDayCount, Period exCouponPeriod, Calendar exCouponCalendar) {
    Leg ret = new Leg(NQuantLibcPINVOKE.FixedRateLeg__SWIG_7(Schedule.getCPtr(schedule), DayCounter.getCPtr(dayCount), DoubleVector.getCPtr(nominals), DoubleVector.getCPtr(couponRates), (int)paymentAdjustment, DayCounter.getCPtr(firstPeriodDayCount), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg FixedRateLeg(Schedule schedule, DayCounter dayCount, DoubleVector nominals, DoubleVector couponRates, BusinessDayConvention paymentAdjustment, DayCounter firstPeriodDayCount, Period exCouponPeriod) {
    Leg ret = new Leg(NQuantLibcPINVOKE.FixedRateLeg__SWIG_8(Schedule.getCPtr(schedule), DayCounter.getCPtr(dayCount), DoubleVector.getCPtr(nominals), DoubleVector.getCPtr(couponRates), (int)paymentAdjustment, DayCounter.getCPtr(firstPeriodDayCount), Period.getCPtr(exCouponPeriod)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg FixedRateLeg(Schedule schedule, DayCounter dayCount, DoubleVector nominals, DoubleVector couponRates, BusinessDayConvention paymentAdjustment, DayCounter firstPeriodDayCount) {
    Leg ret = new Leg(NQuantLibcPINVOKE.FixedRateLeg__SWIG_9(Schedule.getCPtr(schedule), DayCounter.getCPtr(dayCount), DoubleVector.getCPtr(nominals), DoubleVector.getCPtr(couponRates), (int)paymentAdjustment, DayCounter.getCPtr(firstPeriodDayCount)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg FixedRateLeg(Schedule schedule, DayCounter dayCount, DoubleVector nominals, DoubleVector couponRates, BusinessDayConvention paymentAdjustment) {
    Leg ret = new Leg(NQuantLibcPINVOKE.FixedRateLeg__SWIG_10(Schedule.getCPtr(schedule), DayCounter.getCPtr(dayCount), DoubleVector.getCPtr(nominals), DoubleVector.getCPtr(couponRates), (int)paymentAdjustment), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg FixedRateLeg(Schedule schedule, DayCounter dayCount, DoubleVector nominals, DoubleVector couponRates) {
    Leg ret = new Leg(NQuantLibcPINVOKE.FixedRateLeg__SWIG_11(Schedule.getCPtr(schedule), DayCounter.getCPtr(dayCount), DoubleVector.getCPtr(nominals), DoubleVector.getCPtr(couponRates)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg FixedRateLeg(Schedule schedule, DayCounter dayCount, DoubleVector nominals) {
    Leg ret = new Leg(NQuantLibcPINVOKE.FixedRateLeg__SWIG_12(Schedule.getCPtr(schedule), DayCounter.getCPtr(dayCount), DoubleVector.getCPtr(nominals)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg IborLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors, bool isInArrears, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention, bool exCouponEndOfMonth, Calendar paymentCalendar, int paymentLag, OptionalBool withIndexedCoupons) {
    Leg ret = new Leg(NQuantLibcPINVOKE.IborLeg__SWIG_0(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), isInArrears, Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention, exCouponEndOfMonth, Calendar.getCPtr(paymentCalendar), paymentLag, OptionalBool.getCPtr(withIndexedCoupons)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg IborLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors, bool isInArrears, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention, bool exCouponEndOfMonth, Calendar paymentCalendar, int paymentLag) {
    Leg ret = new Leg(NQuantLibcPINVOKE.IborLeg__SWIG_1(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), isInArrears, Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention, exCouponEndOfMonth, Calendar.getCPtr(paymentCalendar), paymentLag), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg IborLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors, bool isInArrears, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention, bool exCouponEndOfMonth, Calendar paymentCalendar) {
    Leg ret = new Leg(NQuantLibcPINVOKE.IborLeg__SWIG_2(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), isInArrears, Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention, exCouponEndOfMonth, Calendar.getCPtr(paymentCalendar)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg IborLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors, bool isInArrears, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention, bool exCouponEndOfMonth) {
    Leg ret = new Leg(NQuantLibcPINVOKE.IborLeg__SWIG_3(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), isInArrears, Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention, exCouponEndOfMonth), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg IborLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors, bool isInArrears, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention) {
    Leg ret = new Leg(NQuantLibcPINVOKE.IborLeg__SWIG_4(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), isInArrears, Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg IborLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors, bool isInArrears, Period exCouponPeriod, Calendar exCouponCalendar) {
    Leg ret = new Leg(NQuantLibcPINVOKE.IborLeg__SWIG_5(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), isInArrears, Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg IborLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors, bool isInArrears, Period exCouponPeriod) {
    Leg ret = new Leg(NQuantLibcPINVOKE.IborLeg__SWIG_6(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), isInArrears, Period.getCPtr(exCouponPeriod)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg IborLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors, bool isInArrears) {
    Leg ret = new Leg(NQuantLibcPINVOKE.IborLeg__SWIG_7(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), isInArrears), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg IborLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors) {
    Leg ret = new Leg(NQuantLibcPINVOKE.IborLeg__SWIG_8(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg IborLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps) {
    Leg ret = new Leg(NQuantLibcPINVOKE.IborLeg__SWIG_9(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg IborLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads) {
    Leg ret = new Leg(NQuantLibcPINVOKE.IborLeg__SWIG_10(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg IborLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings) {
    Leg ret = new Leg(NQuantLibcPINVOKE.IborLeg__SWIG_11(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg IborLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays) {
    Leg ret = new Leg(NQuantLibcPINVOKE.IborLeg__SWIG_12(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg IborLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention) {
    Leg ret = new Leg(NQuantLibcPINVOKE.IborLeg__SWIG_13(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg IborLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter) {
    Leg ret = new Leg(NQuantLibcPINVOKE.IborLeg__SWIG_14(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg IborLeg(DoubleVector nominals, Schedule schedule, IborIndex index) {
    Leg ret = new Leg(NQuantLibcPINVOKE.IborLeg__SWIG_15(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg OvernightLeg(DoubleVector nominals, Schedule schedule, OvernightIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, DoubleVector gearings, DoubleVector spreads, bool telescopicValueDates, RateAveraging.Type averagingMethod, Calendar paymentCalendar, int paymentLag, uint lookbackDays, uint lockoutDays, bool applyObservationShift) {
    Leg ret = new Leg(NQuantLibcPINVOKE.OvernightLeg__SWIG_0(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), OvernightIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), telescopicValueDates, (int)averagingMethod, Calendar.getCPtr(paymentCalendar), paymentLag, lookbackDays, lockoutDays, applyObservationShift), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg OvernightLeg(DoubleVector nominals, Schedule schedule, OvernightIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, DoubleVector gearings, DoubleVector spreads, bool telescopicValueDates, RateAveraging.Type averagingMethod, Calendar paymentCalendar, int paymentLag, uint lookbackDays, uint lockoutDays) {
    Leg ret = new Leg(NQuantLibcPINVOKE.OvernightLeg__SWIG_1(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), OvernightIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), telescopicValueDates, (int)averagingMethod, Calendar.getCPtr(paymentCalendar), paymentLag, lookbackDays, lockoutDays), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg OvernightLeg(DoubleVector nominals, Schedule schedule, OvernightIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, DoubleVector gearings, DoubleVector spreads, bool telescopicValueDates, RateAveraging.Type averagingMethod, Calendar paymentCalendar, int paymentLag, uint lookbackDays) {
    Leg ret = new Leg(NQuantLibcPINVOKE.OvernightLeg__SWIG_2(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), OvernightIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), telescopicValueDates, (int)averagingMethod, Calendar.getCPtr(paymentCalendar), paymentLag, lookbackDays), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg OvernightLeg(DoubleVector nominals, Schedule schedule, OvernightIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, DoubleVector gearings, DoubleVector spreads, bool telescopicValueDates, RateAveraging.Type averagingMethod, Calendar paymentCalendar, int paymentLag) {
    Leg ret = new Leg(NQuantLibcPINVOKE.OvernightLeg__SWIG_3(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), OvernightIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), telescopicValueDates, (int)averagingMethod, Calendar.getCPtr(paymentCalendar), paymentLag), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg OvernightLeg(DoubleVector nominals, Schedule schedule, OvernightIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, DoubleVector gearings, DoubleVector spreads, bool telescopicValueDates, RateAveraging.Type averagingMethod, Calendar paymentCalendar) {
    Leg ret = new Leg(NQuantLibcPINVOKE.OvernightLeg__SWIG_4(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), OvernightIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), telescopicValueDates, (int)averagingMethod, Calendar.getCPtr(paymentCalendar)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg OvernightLeg(DoubleVector nominals, Schedule schedule, OvernightIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, DoubleVector gearings, DoubleVector spreads, bool telescopicValueDates, RateAveraging.Type averagingMethod) {
    Leg ret = new Leg(NQuantLibcPINVOKE.OvernightLeg__SWIG_5(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), OvernightIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), telescopicValueDates, (int)averagingMethod), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg OvernightLeg(DoubleVector nominals, Schedule schedule, OvernightIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, DoubleVector gearings, DoubleVector spreads, bool telescopicValueDates) {
    Leg ret = new Leg(NQuantLibcPINVOKE.OvernightLeg__SWIG_6(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), OvernightIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), telescopicValueDates), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg OvernightLeg(DoubleVector nominals, Schedule schedule, OvernightIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, DoubleVector gearings, DoubleVector spreads) {
    Leg ret = new Leg(NQuantLibcPINVOKE.OvernightLeg__SWIG_7(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), OvernightIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg OvernightLeg(DoubleVector nominals, Schedule schedule, OvernightIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, DoubleVector gearings) {
    Leg ret = new Leg(NQuantLibcPINVOKE.OvernightLeg__SWIG_8(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), OvernightIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, DoubleVector.getCPtr(gearings)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg OvernightLeg(DoubleVector nominals, Schedule schedule, OvernightIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention) {
    Leg ret = new Leg(NQuantLibcPINVOKE.OvernightLeg__SWIG_9(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), OvernightIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg OvernightLeg(DoubleVector nominals, Schedule schedule, OvernightIndex index, DayCounter paymentDayCounter) {
    Leg ret = new Leg(NQuantLibcPINVOKE.OvernightLeg__SWIG_10(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), OvernightIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg OvernightLeg(DoubleVector nominals, Schedule schedule, OvernightIndex index) {
    Leg ret = new Leg(NQuantLibcPINVOKE.OvernightLeg__SWIG_11(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), OvernightIndex.getCPtr(index)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors, bool isInArrears, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention, bool exCouponEndOfMonth) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsLeg__SWIG_0(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), isInArrears, Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention, exCouponEndOfMonth), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors, bool isInArrears, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsLeg__SWIG_1(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), isInArrears, Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors, bool isInArrears, Period exCouponPeriod, Calendar exCouponCalendar) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsLeg__SWIG_2(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), isInArrears, Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors, bool isInArrears, Period exCouponPeriod) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsLeg__SWIG_3(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), isInArrears, Period.getCPtr(exCouponPeriod)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors, bool isInArrears) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsLeg__SWIG_4(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), isInArrears), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsLeg__SWIG_5(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsLeg__SWIG_6(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsLeg__SWIG_7(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsLeg__SWIG_8(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsLeg__SWIG_9(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsLeg__SWIG_10(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsLeg__SWIG_11(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsLeg(DoubleVector nominals, Schedule schedule, SwapIndex index) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsLeg__SWIG_12(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsZeroLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention, bool exCouponEndOfMonth) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsZeroLeg__SWIG_0(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention, exCouponEndOfMonth), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsZeroLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsZeroLeg__SWIG_1(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsZeroLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors, Period exCouponPeriod, Calendar exCouponCalendar) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsZeroLeg__SWIG_2(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsZeroLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors, Period exCouponPeriod) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsZeroLeg__SWIG_3(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), Period.getCPtr(exCouponPeriod)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsZeroLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsZeroLeg__SWIG_4(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsZeroLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsZeroLeg__SWIG_5(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsZeroLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsZeroLeg__SWIG_6(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsZeroLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsZeroLeg__SWIG_7(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsZeroLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsZeroLeg__SWIG_8(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsZeroLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsZeroLeg__SWIG_9(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsZeroLeg(DoubleVector nominals, Schedule schedule, SwapIndex index, DayCounter paymentDayCounter) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsZeroLeg__SWIG_10(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsZeroLeg(DoubleVector nominals, Schedule schedule, SwapIndex index) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsZeroLeg__SWIG_11(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapIndex.getCPtr(index)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsSpreadLeg(DoubleVector nominals, Schedule schedule, SwapSpreadIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors, bool isInArrears) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsSpreadLeg__SWIG_0(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapSpreadIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), isInArrears), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsSpreadLeg(DoubleVector nominals, Schedule schedule, SwapSpreadIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsSpreadLeg__SWIG_1(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapSpreadIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsSpreadLeg(DoubleVector nominals, Schedule schedule, SwapSpreadIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsSpreadLeg__SWIG_2(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapSpreadIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsSpreadLeg(DoubleVector nominals, Schedule schedule, SwapSpreadIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsSpreadLeg__SWIG_3(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapSpreadIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsSpreadLeg(DoubleVector nominals, Schedule schedule, SwapSpreadIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsSpreadLeg__SWIG_4(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapSpreadIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsSpreadLeg(DoubleVector nominals, Schedule schedule, SwapSpreadIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsSpreadLeg__SWIG_5(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapSpreadIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsSpreadLeg(DoubleVector nominals, Schedule schedule, SwapSpreadIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsSpreadLeg__SWIG_6(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapSpreadIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsSpreadLeg(DoubleVector nominals, Schedule schedule, SwapSpreadIndex index, DayCounter paymentDayCounter) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsSpreadLeg__SWIG_7(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapSpreadIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CmsSpreadLeg(DoubleVector nominals, Schedule schedule, SwapSpreadIndex index) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CmsSpreadLeg__SWIG_8(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), SwapSpreadIndex.getCPtr(index)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg MultipleResetsLeg(Schedule fullResetSchedule, IborIndex index, uint resetsPerCoupon, DoubleVector nominals, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Calendar paymentCalendar, int paymentLag, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector couponSpreads, DoubleVector rateSpreads, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention, bool exCouponEndOfMonth, RateAveraging.Type averagingMethod) {
    Leg ret = new Leg(NQuantLibcPINVOKE.MultipleResetsLeg__SWIG_0(Schedule.getCPtr(fullResetSchedule), IborIndex.getCPtr(index), resetsPerCoupon, DoubleVector.getCPtr(nominals), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, Calendar.getCPtr(paymentCalendar), paymentLag, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(couponSpreads), DoubleVector.getCPtr(rateSpreads), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention, exCouponEndOfMonth, (int)averagingMethod), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg MultipleResetsLeg(Schedule fullResetSchedule, IborIndex index, uint resetsPerCoupon, DoubleVector nominals, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Calendar paymentCalendar, int paymentLag, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector couponSpreads, DoubleVector rateSpreads, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention, bool exCouponEndOfMonth) {
    Leg ret = new Leg(NQuantLibcPINVOKE.MultipleResetsLeg__SWIG_1(Schedule.getCPtr(fullResetSchedule), IborIndex.getCPtr(index), resetsPerCoupon, DoubleVector.getCPtr(nominals), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, Calendar.getCPtr(paymentCalendar), paymentLag, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(couponSpreads), DoubleVector.getCPtr(rateSpreads), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention, exCouponEndOfMonth), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg MultipleResetsLeg(Schedule fullResetSchedule, IborIndex index, uint resetsPerCoupon, DoubleVector nominals, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Calendar paymentCalendar, int paymentLag, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector couponSpreads, DoubleVector rateSpreads, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention) {
    Leg ret = new Leg(NQuantLibcPINVOKE.MultipleResetsLeg__SWIG_2(Schedule.getCPtr(fullResetSchedule), IborIndex.getCPtr(index), resetsPerCoupon, DoubleVector.getCPtr(nominals), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, Calendar.getCPtr(paymentCalendar), paymentLag, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(couponSpreads), DoubleVector.getCPtr(rateSpreads), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg MultipleResetsLeg(Schedule fullResetSchedule, IborIndex index, uint resetsPerCoupon, DoubleVector nominals, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Calendar paymentCalendar, int paymentLag, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector couponSpreads, DoubleVector rateSpreads, Period exCouponPeriod, Calendar exCouponCalendar) {
    Leg ret = new Leg(NQuantLibcPINVOKE.MultipleResetsLeg__SWIG_3(Schedule.getCPtr(fullResetSchedule), IborIndex.getCPtr(index), resetsPerCoupon, DoubleVector.getCPtr(nominals), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, Calendar.getCPtr(paymentCalendar), paymentLag, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(couponSpreads), DoubleVector.getCPtr(rateSpreads), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg MultipleResetsLeg(Schedule fullResetSchedule, IborIndex index, uint resetsPerCoupon, DoubleVector nominals, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Calendar paymentCalendar, int paymentLag, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector couponSpreads, DoubleVector rateSpreads, Period exCouponPeriod) {
    Leg ret = new Leg(NQuantLibcPINVOKE.MultipleResetsLeg__SWIG_4(Schedule.getCPtr(fullResetSchedule), IborIndex.getCPtr(index), resetsPerCoupon, DoubleVector.getCPtr(nominals), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, Calendar.getCPtr(paymentCalendar), paymentLag, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(couponSpreads), DoubleVector.getCPtr(rateSpreads), Period.getCPtr(exCouponPeriod)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg MultipleResetsLeg(Schedule fullResetSchedule, IborIndex index, uint resetsPerCoupon, DoubleVector nominals, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Calendar paymentCalendar, int paymentLag, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector couponSpreads, DoubleVector rateSpreads) {
    Leg ret = new Leg(NQuantLibcPINVOKE.MultipleResetsLeg__SWIG_5(Schedule.getCPtr(fullResetSchedule), IborIndex.getCPtr(index), resetsPerCoupon, DoubleVector.getCPtr(nominals), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, Calendar.getCPtr(paymentCalendar), paymentLag, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(couponSpreads), DoubleVector.getCPtr(rateSpreads)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg MultipleResetsLeg(Schedule fullResetSchedule, IborIndex index, uint resetsPerCoupon, DoubleVector nominals, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Calendar paymentCalendar, int paymentLag, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector couponSpreads) {
    Leg ret = new Leg(NQuantLibcPINVOKE.MultipleResetsLeg__SWIG_6(Schedule.getCPtr(fullResetSchedule), IborIndex.getCPtr(index), resetsPerCoupon, DoubleVector.getCPtr(nominals), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, Calendar.getCPtr(paymentCalendar), paymentLag, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(couponSpreads)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg MultipleResetsLeg(Schedule fullResetSchedule, IborIndex index, uint resetsPerCoupon, DoubleVector nominals, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Calendar paymentCalendar, int paymentLag, UnsignedIntVector fixingDays, DoubleVector gearings) {
    Leg ret = new Leg(NQuantLibcPINVOKE.MultipleResetsLeg__SWIG_7(Schedule.getCPtr(fullResetSchedule), IborIndex.getCPtr(index), resetsPerCoupon, DoubleVector.getCPtr(nominals), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, Calendar.getCPtr(paymentCalendar), paymentLag, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg MultipleResetsLeg(Schedule fullResetSchedule, IborIndex index, uint resetsPerCoupon, DoubleVector nominals, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Calendar paymentCalendar, int paymentLag, UnsignedIntVector fixingDays) {
    Leg ret = new Leg(NQuantLibcPINVOKE.MultipleResetsLeg__SWIG_8(Schedule.getCPtr(fullResetSchedule), IborIndex.getCPtr(index), resetsPerCoupon, DoubleVector.getCPtr(nominals), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, Calendar.getCPtr(paymentCalendar), paymentLag, UnsignedIntVector.getCPtr(fixingDays)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg MultipleResetsLeg(Schedule fullResetSchedule, IborIndex index, uint resetsPerCoupon, DoubleVector nominals, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Calendar paymentCalendar, int paymentLag) {
    Leg ret = new Leg(NQuantLibcPINVOKE.MultipleResetsLeg__SWIG_9(Schedule.getCPtr(fullResetSchedule), IborIndex.getCPtr(index), resetsPerCoupon, DoubleVector.getCPtr(nominals), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, Calendar.getCPtr(paymentCalendar), paymentLag), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg MultipleResetsLeg(Schedule fullResetSchedule, IborIndex index, uint resetsPerCoupon, DoubleVector nominals, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Calendar paymentCalendar) {
    Leg ret = new Leg(NQuantLibcPINVOKE.MultipleResetsLeg__SWIG_10(Schedule.getCPtr(fullResetSchedule), IborIndex.getCPtr(index), resetsPerCoupon, DoubleVector.getCPtr(nominals), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, Calendar.getCPtr(paymentCalendar)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg MultipleResetsLeg(Schedule fullResetSchedule, IborIndex index, uint resetsPerCoupon, DoubleVector nominals, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention) {
    Leg ret = new Leg(NQuantLibcPINVOKE.MultipleResetsLeg__SWIG_11(Schedule.getCPtr(fullResetSchedule), IborIndex.getCPtr(index), resetsPerCoupon, DoubleVector.getCPtr(nominals), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg MultipleResetsLeg(Schedule fullResetSchedule, IborIndex index, uint resetsPerCoupon, DoubleVector nominals, DayCounter paymentDayCounter) {
    Leg ret = new Leg(NQuantLibcPINVOKE.MultipleResetsLeg__SWIG_12(Schedule.getCPtr(fullResetSchedule), IborIndex.getCPtr(index), resetsPerCoupon, DoubleVector.getCPtr(nominals), DayCounter.getCPtr(paymentDayCounter)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg MultipleResetsLeg(Schedule fullResetSchedule, IborIndex index, uint resetsPerCoupon, DoubleVector nominals) {
    Leg ret = new Leg(NQuantLibcPINVOKE.MultipleResetsLeg__SWIG_13(Schedule.getCPtr(fullResetSchedule), IborIndex.getCPtr(index), resetsPerCoupon, DoubleVector.getCPtr(nominals)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg SubPeriodsLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Calendar paymentCalendar, int paymentLag, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector couponSpreads, DoubleVector rateSpreads, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention, bool exCouponEndOfMonth, RateAveraging.Type averagingMethod) {
    Leg ret = new Leg(NQuantLibcPINVOKE.SubPeriodsLeg__SWIG_0(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, Calendar.getCPtr(paymentCalendar), paymentLag, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(couponSpreads), DoubleVector.getCPtr(rateSpreads), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention, exCouponEndOfMonth, (int)averagingMethod), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg SubPeriodsLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Calendar paymentCalendar, int paymentLag, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector couponSpreads, DoubleVector rateSpreads, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention, bool exCouponEndOfMonth) {
    Leg ret = new Leg(NQuantLibcPINVOKE.SubPeriodsLeg__SWIG_1(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, Calendar.getCPtr(paymentCalendar), paymentLag, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(couponSpreads), DoubleVector.getCPtr(rateSpreads), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention, exCouponEndOfMonth), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg SubPeriodsLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Calendar paymentCalendar, int paymentLag, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector couponSpreads, DoubleVector rateSpreads, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention) {
    Leg ret = new Leg(NQuantLibcPINVOKE.SubPeriodsLeg__SWIG_2(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, Calendar.getCPtr(paymentCalendar), paymentLag, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(couponSpreads), DoubleVector.getCPtr(rateSpreads), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg SubPeriodsLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Calendar paymentCalendar, int paymentLag, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector couponSpreads, DoubleVector rateSpreads, Period exCouponPeriod, Calendar exCouponCalendar) {
    Leg ret = new Leg(NQuantLibcPINVOKE.SubPeriodsLeg__SWIG_3(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, Calendar.getCPtr(paymentCalendar), paymentLag, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(couponSpreads), DoubleVector.getCPtr(rateSpreads), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg SubPeriodsLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Calendar paymentCalendar, int paymentLag, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector couponSpreads, DoubleVector rateSpreads, Period exCouponPeriod) {
    Leg ret = new Leg(NQuantLibcPINVOKE.SubPeriodsLeg__SWIG_4(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, Calendar.getCPtr(paymentCalendar), paymentLag, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(couponSpreads), DoubleVector.getCPtr(rateSpreads), Period.getCPtr(exCouponPeriod)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg SubPeriodsLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Calendar paymentCalendar, int paymentLag, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector couponSpreads, DoubleVector rateSpreads) {
    Leg ret = new Leg(NQuantLibcPINVOKE.SubPeriodsLeg__SWIG_5(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, Calendar.getCPtr(paymentCalendar), paymentLag, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(couponSpreads), DoubleVector.getCPtr(rateSpreads)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg SubPeriodsLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Calendar paymentCalendar, int paymentLag, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector couponSpreads) {
    Leg ret = new Leg(NQuantLibcPINVOKE.SubPeriodsLeg__SWIG_6(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, Calendar.getCPtr(paymentCalendar), paymentLag, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(couponSpreads)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg SubPeriodsLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Calendar paymentCalendar, int paymentLag, UnsignedIntVector fixingDays, DoubleVector gearings) {
    Leg ret = new Leg(NQuantLibcPINVOKE.SubPeriodsLeg__SWIG_7(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, Calendar.getCPtr(paymentCalendar), paymentLag, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg SubPeriodsLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Calendar paymentCalendar, int paymentLag, UnsignedIntVector fixingDays) {
    Leg ret = new Leg(NQuantLibcPINVOKE.SubPeriodsLeg__SWIG_8(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, Calendar.getCPtr(paymentCalendar), paymentLag, UnsignedIntVector.getCPtr(fixingDays)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg SubPeriodsLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Calendar paymentCalendar, int paymentLag) {
    Leg ret = new Leg(NQuantLibcPINVOKE.SubPeriodsLeg__SWIG_9(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, Calendar.getCPtr(paymentCalendar), paymentLag), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg SubPeriodsLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Calendar paymentCalendar) {
    Leg ret = new Leg(NQuantLibcPINVOKE.SubPeriodsLeg__SWIG_10(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, Calendar.getCPtr(paymentCalendar)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg SubPeriodsLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention) {
    Leg ret = new Leg(NQuantLibcPINVOKE.SubPeriodsLeg__SWIG_11(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg SubPeriodsLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter) {
    Leg ret = new Leg(NQuantLibcPINVOKE.SubPeriodsLeg__SWIG_12(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg SubPeriodsLeg(DoubleVector nominals, Schedule schedule, IborIndex index) {
    Leg ret = new Leg(NQuantLibcPINVOKE.SubPeriodsLeg__SWIG_13(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg RangeAccrualLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector lowerTriggers, DoubleVector upperTriggers, Period observationTenor, BusinessDayConvention observationConvention) {
    Leg ret = new Leg(NQuantLibcPINVOKE.RangeAccrualLeg__SWIG_0(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(lowerTriggers), DoubleVector.getCPtr(upperTriggers), Period.getCPtr(observationTenor), (int)observationConvention), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg RangeAccrualLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector lowerTriggers, DoubleVector upperTriggers, Period observationTenor) {
    Leg ret = new Leg(NQuantLibcPINVOKE.RangeAccrualLeg__SWIG_1(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(lowerTriggers), DoubleVector.getCPtr(upperTriggers), Period.getCPtr(observationTenor)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg RangeAccrualLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector lowerTriggers, DoubleVector upperTriggers) {
    Leg ret = new Leg(NQuantLibcPINVOKE.RangeAccrualLeg__SWIG_2(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(lowerTriggers), DoubleVector.getCPtr(upperTriggers)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg RangeAccrualLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector lowerTriggers) {
    Leg ret = new Leg(NQuantLibcPINVOKE.RangeAccrualLeg__SWIG_3(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(lowerTriggers)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg RangeAccrualLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings, DoubleVector spreads) {
    Leg ret = new Leg(NQuantLibcPINVOKE.RangeAccrualLeg__SWIG_4(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg RangeAccrualLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays, DoubleVector gearings) {
    Leg ret = new Leg(NQuantLibcPINVOKE.RangeAccrualLeg__SWIG_5(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays), DoubleVector.getCPtr(gearings)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg RangeAccrualLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, UnsignedIntVector fixingDays) {
    Leg ret = new Leg(NQuantLibcPINVOKE.RangeAccrualLeg__SWIG_6(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, UnsignedIntVector.getCPtr(fixingDays)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg RangeAccrualLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention) {
    Leg ret = new Leg(NQuantLibcPINVOKE.RangeAccrualLeg__SWIG_7(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg RangeAccrualLeg(DoubleVector nominals, Schedule schedule, IborIndex index, DayCounter paymentDayCounter) {
    Leg ret = new Leg(NQuantLibcPINVOKE.RangeAccrualLeg__SWIG_8(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index), DayCounter.getCPtr(paymentDayCounter)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg RangeAccrualLeg(DoubleVector nominals, Schedule schedule, IborIndex index) {
    Leg ret = new Leg(NQuantLibcPINVOKE.RangeAccrualLeg__SWIG_9(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), IborIndex.getCPtr(index)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DividendSchedule DividendVector(DateVector dividendDates, DoubleVector dividends) {
    DividendSchedule ret = new DividendSchedule(NQuantLibcPINVOKE.DividendVector(DateVector.getCPtr(dividendDates), DoubleVector.getCPtr(dividends)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static GsrProcess as_gsr_process(StochasticProcess proc) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_gsr_process(StochasticProcess.getCPtr(proc));
    GsrProcess ret = (cPtr == global::System.IntPtr.Zero) ? null : new GsrProcess(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PlainVanillaPayoff as_plain_vanilla_payoff(Payoff payoff) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_plain_vanilla_payoff(Payoff.getCPtr(payoff));
    PlainVanillaPayoff ret = (cPtr == global::System.IntPtr.Zero) ? null : new PlainVanillaPayoff(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormula(Option.Type optionType, double strike, double forward, double stdDev, double discount, double displacement) {
    double ret = NQuantLibcPINVOKE.blackFormula__SWIG_0((int)optionType, strike, forward, stdDev, discount, displacement);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormula(Option.Type optionType, double strike, double forward, double stdDev, double discount) {
    double ret = NQuantLibcPINVOKE.blackFormula__SWIG_1((int)optionType, strike, forward, stdDev, discount);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormula(Option.Type optionType, double strike, double forward, double stdDev) {
    double ret = NQuantLibcPINVOKE.blackFormula__SWIG_2((int)optionType, strike, forward, stdDev);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaImpliedStdDev(Option.Type optionType, double strike, double forward, double blackPrice, double discount, double displacement, double guess, double accuracy, uint maxIterations) {
    double ret = NQuantLibcPINVOKE.blackFormulaImpliedStdDev__SWIG_0((int)optionType, strike, forward, blackPrice, discount, displacement, guess, accuracy, maxIterations);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaImpliedStdDev(Option.Type optionType, double strike, double forward, double blackPrice, double discount, double displacement, double guess, double accuracy) {
    double ret = NQuantLibcPINVOKE.blackFormulaImpliedStdDev__SWIG_1((int)optionType, strike, forward, blackPrice, discount, displacement, guess, accuracy);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaImpliedStdDev(Option.Type optionType, double strike, double forward, double blackPrice, double discount, double displacement, double guess) {
    double ret = NQuantLibcPINVOKE.blackFormulaImpliedStdDev__SWIG_2((int)optionType, strike, forward, blackPrice, discount, displacement, guess);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaImpliedStdDev(Option.Type optionType, double strike, double forward, double blackPrice, double discount, double displacement) {
    double ret = NQuantLibcPINVOKE.blackFormulaImpliedStdDev__SWIG_3((int)optionType, strike, forward, blackPrice, discount, displacement);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaImpliedStdDev(Option.Type optionType, double strike, double forward, double blackPrice, double discount) {
    double ret = NQuantLibcPINVOKE.blackFormulaImpliedStdDev__SWIG_4((int)optionType, strike, forward, blackPrice, discount);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaImpliedStdDev(Option.Type optionType, double strike, double forward, double blackPrice) {
    double ret = NQuantLibcPINVOKE.blackFormulaImpliedStdDev__SWIG_5((int)optionType, strike, forward, blackPrice);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaImpliedStdDevLiRS(Option.Type optionType, double strike, double forward, double blackPrice, double discount, double displacement, double guess, double omega, double accuracy, uint maxIterations) {
    double ret = NQuantLibcPINVOKE.blackFormulaImpliedStdDevLiRS__SWIG_0((int)optionType, strike, forward, blackPrice, discount, displacement, guess, omega, accuracy, maxIterations);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaImpliedStdDevLiRS(Option.Type optionType, double strike, double forward, double blackPrice, double discount, double displacement, double guess, double omega, double accuracy) {
    double ret = NQuantLibcPINVOKE.blackFormulaImpliedStdDevLiRS__SWIG_1((int)optionType, strike, forward, blackPrice, discount, displacement, guess, omega, accuracy);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaImpliedStdDevLiRS(Option.Type optionType, double strike, double forward, double blackPrice, double discount, double displacement, double guess, double omega) {
    double ret = NQuantLibcPINVOKE.blackFormulaImpliedStdDevLiRS__SWIG_2((int)optionType, strike, forward, blackPrice, discount, displacement, guess, omega);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaImpliedStdDevLiRS(Option.Type optionType, double strike, double forward, double blackPrice, double discount, double displacement, double guess) {
    double ret = NQuantLibcPINVOKE.blackFormulaImpliedStdDevLiRS__SWIG_3((int)optionType, strike, forward, blackPrice, discount, displacement, guess);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaImpliedStdDevLiRS(Option.Type optionType, double strike, double forward, double blackPrice, double discount, double displacement) {
    double ret = NQuantLibcPINVOKE.blackFormulaImpliedStdDevLiRS__SWIG_4((int)optionType, strike, forward, blackPrice, discount, displacement);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaImpliedStdDevLiRS(Option.Type optionType, double strike, double forward, double blackPrice, double discount) {
    double ret = NQuantLibcPINVOKE.blackFormulaImpliedStdDevLiRS__SWIG_5((int)optionType, strike, forward, blackPrice, discount);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaImpliedStdDevLiRS(Option.Type optionType, double strike, double forward, double blackPrice) {
    double ret = NQuantLibcPINVOKE.blackFormulaImpliedStdDevLiRS__SWIG_6((int)optionType, strike, forward, blackPrice);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaImpliedStdDevLiRS(PlainVanillaPayoff payoff, double forward, double blackPrice, double discount, double displacement, double guess, double omega, double accuracy, uint maxIterations) {
    double ret = NQuantLibcPINVOKE.blackFormulaImpliedStdDevLiRS__SWIG_7(PlainVanillaPayoff.getCPtr(payoff), forward, blackPrice, discount, displacement, guess, omega, accuracy, maxIterations);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaImpliedStdDevLiRS(PlainVanillaPayoff payoff, double forward, double blackPrice, double discount, double displacement, double guess, double omega, double accuracy) {
    double ret = NQuantLibcPINVOKE.blackFormulaImpliedStdDevLiRS__SWIG_8(PlainVanillaPayoff.getCPtr(payoff), forward, blackPrice, discount, displacement, guess, omega, accuracy);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaImpliedStdDevLiRS(PlainVanillaPayoff payoff, double forward, double blackPrice, double discount, double displacement, double guess, double omega) {
    double ret = NQuantLibcPINVOKE.blackFormulaImpliedStdDevLiRS__SWIG_9(PlainVanillaPayoff.getCPtr(payoff), forward, blackPrice, discount, displacement, guess, omega);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaImpliedStdDevLiRS(PlainVanillaPayoff payoff, double forward, double blackPrice, double discount, double displacement, double guess) {
    double ret = NQuantLibcPINVOKE.blackFormulaImpliedStdDevLiRS__SWIG_10(PlainVanillaPayoff.getCPtr(payoff), forward, blackPrice, discount, displacement, guess);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaImpliedStdDevLiRS(PlainVanillaPayoff payoff, double forward, double blackPrice, double discount, double displacement) {
    double ret = NQuantLibcPINVOKE.blackFormulaImpliedStdDevLiRS__SWIG_11(PlainVanillaPayoff.getCPtr(payoff), forward, blackPrice, discount, displacement);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaImpliedStdDevLiRS(PlainVanillaPayoff payoff, double forward, double blackPrice, double discount) {
    double ret = NQuantLibcPINVOKE.blackFormulaImpliedStdDevLiRS__SWIG_12(PlainVanillaPayoff.getCPtr(payoff), forward, blackPrice, discount);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaImpliedStdDevLiRS(PlainVanillaPayoff payoff, double forward, double blackPrice) {
    double ret = NQuantLibcPINVOKE.blackFormulaImpliedStdDevLiRS__SWIG_13(PlainVanillaPayoff.getCPtr(payoff), forward, blackPrice);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaCashItmProbability(Option.Type optionType, double strike, double forward, double stdDev, double displacement) {
    double ret = NQuantLibcPINVOKE.blackFormulaCashItmProbability__SWIG_0((int)optionType, strike, forward, stdDev, displacement);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaCashItmProbability(Option.Type optionType, double strike, double forward, double stdDev) {
    double ret = NQuantLibcPINVOKE.blackFormulaCashItmProbability__SWIG_1((int)optionType, strike, forward, stdDev);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaCashItmProbability(PlainVanillaPayoff payoff, double forward, double stdDev, double displacement) {
    double ret = NQuantLibcPINVOKE.blackFormulaCashItmProbability__SWIG_2(PlainVanillaPayoff.getCPtr(payoff), forward, stdDev, displacement);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaCashItmProbability(PlainVanillaPayoff payoff, double forward, double stdDev) {
    double ret = NQuantLibcPINVOKE.blackFormulaCashItmProbability__SWIG_3(PlainVanillaPayoff.getCPtr(payoff), forward, stdDev);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaAssetItmProbability(Option.Type optionType, double strike, double forward, double stdDev, double displacement) {
    double ret = NQuantLibcPINVOKE.blackFormulaAssetItmProbability__SWIG_0((int)optionType, strike, forward, stdDev, displacement);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaAssetItmProbability(Option.Type optionType, double strike, double forward, double stdDev) {
    double ret = NQuantLibcPINVOKE.blackFormulaAssetItmProbability__SWIG_1((int)optionType, strike, forward, stdDev);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaAssetItmProbability(PlainVanillaPayoff payoff, double forward, double stdDev, double displacement) {
    double ret = NQuantLibcPINVOKE.blackFormulaAssetItmProbability__SWIG_2(PlainVanillaPayoff.getCPtr(payoff), forward, stdDev, displacement);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double blackFormulaAssetItmProbability(PlainVanillaPayoff payoff, double forward, double stdDev) {
    double ret = NQuantLibcPINVOKE.blackFormulaAssetItmProbability__SWIG_3(PlainVanillaPayoff.getCPtr(payoff), forward, stdDev);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double bachelierBlackFormula(Option.Type optionType, double strike, double forward, double stdDev, double discount) {
    double ret = NQuantLibcPINVOKE.bachelierBlackFormula__SWIG_0((int)optionType, strike, forward, stdDev, discount);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double bachelierBlackFormula(Option.Type optionType, double strike, double forward, double stdDev) {
    double ret = NQuantLibcPINVOKE.bachelierBlackFormula__SWIG_1((int)optionType, strike, forward, stdDev);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double bachelierBlackFormulaImpliedVol(Option.Type optionType, double strike, double forward, double tte, double bachelierPrice, double discount) {
    double ret = NQuantLibcPINVOKE.bachelierBlackFormulaImpliedVol__SWIG_0((int)optionType, strike, forward, tte, bachelierPrice, discount);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double bachelierBlackFormulaImpliedVol(Option.Type optionType, double strike, double forward, double tte, double bachelierPrice) {
    double ret = NQuantLibcPINVOKE.bachelierBlackFormulaImpliedVol__SWIG_1((int)optionType, strike, forward, tte, bachelierPrice);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double bachelierBlackFormulaImpliedVolChoi(Option.Type optionType, double strike, double forward, double tte, double bachelierPrice, double discount) {
    double ret = NQuantLibcPINVOKE.bachelierBlackFormulaImpliedVolChoi__SWIG_0((int)optionType, strike, forward, tte, bachelierPrice, discount);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double bachelierBlackFormulaImpliedVolChoi(Option.Type optionType, double strike, double forward, double tte, double bachelierPrice) {
    double ret = NQuantLibcPINVOKE.bachelierBlackFormulaImpliedVolChoi__SWIG_1((int)optionType, strike, forward, tte, bachelierPrice);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double bachelierBlackFormulaAssetItmProbability(Option.Type optionType, double strike, double forward, double stdDev) {
    double ret = NQuantLibcPINVOKE.bachelierBlackFormulaAssetItmProbability__SWIG_0((int)optionType, strike, forward, stdDev);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double bachelierBlackFormulaAssetItmProbability(PlainVanillaPayoff payoff, double forward, double stdDev) {
    double ret = NQuantLibcPINVOKE.bachelierBlackFormulaAssetItmProbability__SWIG_1(PlainVanillaPayoff.getCPtr(payoff), forward, stdDev);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void simplifyNotificationGraph(Swap swap, bool unregisterCoupons) {
    NQuantLibcPINVOKE.simplifyNotificationGraph__SWIG_0(Swap.getCPtr(swap), unregisterCoupons);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void simplifyNotificationGraph(Swap swap) {
    NQuantLibcPINVOKE.simplifyNotificationGraph__SWIG_1(Swap.getCPtr(swap));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public static OvernightIndexedSwap as_overnight_swap_index(InterestRateIndex index) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_overnight_swap_index(InterestRateIndex.getCPtr(index));
    OvernightIndexedSwap ret = (cPtr == global::System.IntPtr.Zero) ? null : new OvernightIndexedSwap(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ZeroInflationIndex as_zero_inflation_index(Index i) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_zero_inflation_index(Index.getCPtr(i));
    ZeroInflationIndex ret = (cPtr == global::System.IntPtr.Zero) ? null : new ZeroInflationIndex(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static InflationCoupon as_inflation_coupon(CashFlow cf) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_inflation_coupon(CashFlow.getCPtr(cf));
    InflationCoupon ret = (cPtr == global::System.IntPtr.Zero) ? null : new InflationCoupon(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CPICoupon as_cpi_coupon(CashFlow cf) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_cpi_coupon(CashFlow.getCPtr(cf));
    CPICoupon ret = (cPtr == global::System.IntPtr.Zero) ? null : new CPICoupon(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CPICashFlow as_cpi_cashflow(CashFlow cf) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_cpi_cashflow(CashFlow.getCPtr(cf));
    CPICashFlow ret = (cPtr == global::System.IntPtr.Zero) ? null : new CPICashFlow(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CPILeg(DoubleVector nominals, Schedule schedule, ZeroInflationIndex index, double baseCPI, Period observationLag, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, DoubleVector fixedRates, DoubleVector caps, DoubleVector floors, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention, bool exCouponEndOfMonth, Calendar paymentCalendar, bool growthOnly, CPI.InterpolationType observationInterpolation) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CPILeg__SWIG_0(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), ZeroInflationIndex.getCPtr(index), baseCPI, Period.getCPtr(observationLag), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, DoubleVector.getCPtr(fixedRates), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention, exCouponEndOfMonth, Calendar.getCPtr(paymentCalendar), growthOnly, (int)observationInterpolation), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CPILeg(DoubleVector nominals, Schedule schedule, ZeroInflationIndex index, double baseCPI, Period observationLag, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, DoubleVector fixedRates, DoubleVector caps, DoubleVector floors, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention, bool exCouponEndOfMonth, Calendar paymentCalendar, bool growthOnly) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CPILeg__SWIG_1(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), ZeroInflationIndex.getCPtr(index), baseCPI, Period.getCPtr(observationLag), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, DoubleVector.getCPtr(fixedRates), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention, exCouponEndOfMonth, Calendar.getCPtr(paymentCalendar), growthOnly), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CPILeg(DoubleVector nominals, Schedule schedule, ZeroInflationIndex index, double baseCPI, Period observationLag, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, DoubleVector fixedRates, DoubleVector caps, DoubleVector floors, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention, bool exCouponEndOfMonth, Calendar paymentCalendar) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CPILeg__SWIG_2(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), ZeroInflationIndex.getCPtr(index), baseCPI, Period.getCPtr(observationLag), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, DoubleVector.getCPtr(fixedRates), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention, exCouponEndOfMonth, Calendar.getCPtr(paymentCalendar)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CPILeg(DoubleVector nominals, Schedule schedule, ZeroInflationIndex index, double baseCPI, Period observationLag, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, DoubleVector fixedRates, DoubleVector caps, DoubleVector floors, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention, bool exCouponEndOfMonth) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CPILeg__SWIG_3(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), ZeroInflationIndex.getCPtr(index), baseCPI, Period.getCPtr(observationLag), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, DoubleVector.getCPtr(fixedRates), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention, exCouponEndOfMonth), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CPILeg(DoubleVector nominals, Schedule schedule, ZeroInflationIndex index, double baseCPI, Period observationLag, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, DoubleVector fixedRates, DoubleVector caps, DoubleVector floors, Period exCouponPeriod, Calendar exCouponCalendar, BusinessDayConvention exCouponConvention) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CPILeg__SWIG_4(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), ZeroInflationIndex.getCPtr(index), baseCPI, Period.getCPtr(observationLag), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, DoubleVector.getCPtr(fixedRates), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar), (int)exCouponConvention), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CPILeg(DoubleVector nominals, Schedule schedule, ZeroInflationIndex index, double baseCPI, Period observationLag, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, DoubleVector fixedRates, DoubleVector caps, DoubleVector floors, Period exCouponPeriod, Calendar exCouponCalendar) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CPILeg__SWIG_5(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), ZeroInflationIndex.getCPtr(index), baseCPI, Period.getCPtr(observationLag), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, DoubleVector.getCPtr(fixedRates), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), Period.getCPtr(exCouponPeriod), Calendar.getCPtr(exCouponCalendar)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CPILeg(DoubleVector nominals, Schedule schedule, ZeroInflationIndex index, double baseCPI, Period observationLag, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, DoubleVector fixedRates, DoubleVector caps, DoubleVector floors, Period exCouponPeriod) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CPILeg__SWIG_6(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), ZeroInflationIndex.getCPtr(index), baseCPI, Period.getCPtr(observationLag), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, DoubleVector.getCPtr(fixedRates), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors), Period.getCPtr(exCouponPeriod)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CPILeg(DoubleVector nominals, Schedule schedule, ZeroInflationIndex index, double baseCPI, Period observationLag, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, DoubleVector fixedRates, DoubleVector caps, DoubleVector floors) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CPILeg__SWIG_7(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), ZeroInflationIndex.getCPtr(index), baseCPI, Period.getCPtr(observationLag), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, DoubleVector.getCPtr(fixedRates), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CPILeg(DoubleVector nominals, Schedule schedule, ZeroInflationIndex index, double baseCPI, Period observationLag, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, DoubleVector fixedRates, DoubleVector caps) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CPILeg__SWIG_8(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), ZeroInflationIndex.getCPtr(index), baseCPI, Period.getCPtr(observationLag), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, DoubleVector.getCPtr(fixedRates), DoubleVector.getCPtr(caps)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CPILeg(DoubleVector nominals, Schedule schedule, ZeroInflationIndex index, double baseCPI, Period observationLag, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, DoubleVector fixedRates) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CPILeg__SWIG_9(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), ZeroInflationIndex.getCPtr(index), baseCPI, Period.getCPtr(observationLag), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention, DoubleVector.getCPtr(fixedRates)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CPILeg(DoubleVector nominals, Schedule schedule, ZeroInflationIndex index, double baseCPI, Period observationLag, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CPILeg__SWIG_10(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), ZeroInflationIndex.getCPtr(index), baseCPI, Period.getCPtr(observationLag), DayCounter.getCPtr(paymentDayCounter), (int)paymentConvention), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CPILeg(DoubleVector nominals, Schedule schedule, ZeroInflationIndex index, double baseCPI, Period observationLag, DayCounter paymentDayCounter) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CPILeg__SWIG_11(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), ZeroInflationIndex.getCPtr(index), baseCPI, Period.getCPtr(observationLag), DayCounter.getCPtr(paymentDayCounter)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg CPILeg(DoubleVector nominals, Schedule schedule, ZeroInflationIndex index, double baseCPI, Period observationLag) {
    Leg ret = new Leg(NQuantLibcPINVOKE.CPILeg__SWIG_12(DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), ZeroInflationIndex.getCPtr(index), baseCPI, Period.getCPtr(observationLag)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ZeroInflationCashFlow as_zero_inflation_cash_flow(CashFlow cf) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_zero_inflation_cash_flow(CashFlow.getCPtr(cf));
    ZeroInflationCashFlow ret = (cPtr == global::System.IntPtr.Zero) ? null : new ZeroInflationCashFlow(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DatePair inflationPeriod(Date d, Frequency f) {
    DatePair ret = new DatePair(NQuantLibcPINVOKE.inflationPeriod(Date.getCPtr(d), (int)f), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double inflationYearFraction(Frequency f, bool indexIsInterpolated, DayCounter dayCount, Date d1, Date d2) {
    double ret = NQuantLibcPINVOKE.inflationYearFraction((int)f, indexIsInterpolated, DayCounter.getCPtr(dayCount), Date.getCPtr(d1), Date.getCPtr(d2));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Date inflationBaseDate(Date referenceDate, Period observationLag, Frequency frequency, bool indexIsInterpolated) {
    Date ret = new Date(NQuantLibcPINVOKE.inflationBaseDate(Date.getCPtr(referenceDate), Period.getCPtr(observationLag), (int)frequency, indexIsInterpolated), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setCouponPricer(Leg arg0, YoYInflationCouponPricer arg1) {
    NQuantLibcPINVOKE.setCouponPricer__SWIG_2(Leg.getCPtr(arg0), YoYInflationCouponPricer.getCPtr(arg1));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public static YoYInflationCoupon as_yoy_inflation_coupon(CashFlow cf) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_yoy_inflation_coupon(CashFlow.getCPtr(cf));
    YoYInflationCoupon ret = (cPtr == global::System.IntPtr.Zero) ? null : new YoYInflationCoupon(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CappedFlooredYoYInflationCoupon as_capped_floored_yoy_inflation_coupon(CashFlow cf) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_capped_floored_yoy_inflation_coupon(CashFlow.getCPtr(cf));
    CappedFlooredYoYInflationCoupon ret = (cPtr == global::System.IntPtr.Zero) ? null : new CappedFlooredYoYInflationCoupon(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg yoyInflationLeg(Schedule schedule, Calendar calendar, YoYInflationIndex index, Period observationLag, CPI.InterpolationType interpolation, DoubleVector notionals, DayCounter paymentDayCounter, BusinessDayConvention paymentAdjustment, uint fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps, DoubleVector floors) {
    Leg ret = new Leg(NQuantLibcPINVOKE.yoyInflationLeg__SWIG_0(Schedule.getCPtr(schedule), Calendar.getCPtr(calendar), YoYInflationIndex.getCPtr(index), Period.getCPtr(observationLag), (int)interpolation, DoubleVector.getCPtr(notionals), DayCounter.getCPtr(paymentDayCounter), (int)paymentAdjustment, fixingDays, DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps), DoubleVector.getCPtr(floors)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg yoyInflationLeg(Schedule schedule, Calendar calendar, YoYInflationIndex index, Period observationLag, CPI.InterpolationType interpolation, DoubleVector notionals, DayCounter paymentDayCounter, BusinessDayConvention paymentAdjustment, uint fixingDays, DoubleVector gearings, DoubleVector spreads, DoubleVector caps) {
    Leg ret = new Leg(NQuantLibcPINVOKE.yoyInflationLeg__SWIG_1(Schedule.getCPtr(schedule), Calendar.getCPtr(calendar), YoYInflationIndex.getCPtr(index), Period.getCPtr(observationLag), (int)interpolation, DoubleVector.getCPtr(notionals), DayCounter.getCPtr(paymentDayCounter), (int)paymentAdjustment, fixingDays, DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads), DoubleVector.getCPtr(caps)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg yoyInflationLeg(Schedule schedule, Calendar calendar, YoYInflationIndex index, Period observationLag, CPI.InterpolationType interpolation, DoubleVector notionals, DayCounter paymentDayCounter, BusinessDayConvention paymentAdjustment, uint fixingDays, DoubleVector gearings, DoubleVector spreads) {
    Leg ret = new Leg(NQuantLibcPINVOKE.yoyInflationLeg__SWIG_2(Schedule.getCPtr(schedule), Calendar.getCPtr(calendar), YoYInflationIndex.getCPtr(index), Period.getCPtr(observationLag), (int)interpolation, DoubleVector.getCPtr(notionals), DayCounter.getCPtr(paymentDayCounter), (int)paymentAdjustment, fixingDays, DoubleVector.getCPtr(gearings), DoubleVector.getCPtr(spreads)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg yoyInflationLeg(Schedule schedule, Calendar calendar, YoYInflationIndex index, Period observationLag, CPI.InterpolationType interpolation, DoubleVector notionals, DayCounter paymentDayCounter, BusinessDayConvention paymentAdjustment, uint fixingDays, DoubleVector gearings) {
    Leg ret = new Leg(NQuantLibcPINVOKE.yoyInflationLeg__SWIG_3(Schedule.getCPtr(schedule), Calendar.getCPtr(calendar), YoYInflationIndex.getCPtr(index), Period.getCPtr(observationLag), (int)interpolation, DoubleVector.getCPtr(notionals), DayCounter.getCPtr(paymentDayCounter), (int)paymentAdjustment, fixingDays, DoubleVector.getCPtr(gearings)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg yoyInflationLeg(Schedule schedule, Calendar calendar, YoYInflationIndex index, Period observationLag, CPI.InterpolationType interpolation, DoubleVector notionals, DayCounter paymentDayCounter, BusinessDayConvention paymentAdjustment, uint fixingDays) {
    Leg ret = new Leg(NQuantLibcPINVOKE.yoyInflationLeg__SWIG_4(Schedule.getCPtr(schedule), Calendar.getCPtr(calendar), YoYInflationIndex.getCPtr(index), Period.getCPtr(observationLag), (int)interpolation, DoubleVector.getCPtr(notionals), DayCounter.getCPtr(paymentDayCounter), (int)paymentAdjustment, fixingDays), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg yoyInflationLeg(Schedule schedule, Calendar calendar, YoYInflationIndex index, Period observationLag, CPI.InterpolationType interpolation, DoubleVector notionals, DayCounter paymentDayCounter, BusinessDayConvention paymentAdjustment) {
    Leg ret = new Leg(NQuantLibcPINVOKE.yoyInflationLeg__SWIG_5(Schedule.getCPtr(schedule), Calendar.getCPtr(calendar), YoYInflationIndex.getCPtr(index), Period.getCPtr(observationLag), (int)interpolation, DoubleVector.getCPtr(notionals), DayCounter.getCPtr(paymentDayCounter), (int)paymentAdjustment), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Leg yoyInflationLeg(Schedule schedule, Calendar calendar, YoYInflationIndex index, Period observationLag, CPI.InterpolationType interpolation, DoubleVector notionals, DayCounter paymentDayCounter) {
    Leg ret = new Leg(NQuantLibcPINVOKE.yoyInflationLeg__SWIG_6(Schedule.getCPtr(schedule), Calendar.getCPtr(calendar), YoYInflationIndex.getCPtr(index), Period.getCPtr(observationLag), (int)interpolation, DoubleVector.getCPtr(notionals), DayCounter.getCPtr(paymentDayCounter)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void simplifyNotificationGraph(Bond bond, bool unregisterCoupons) {
    NQuantLibcPINVOKE.simplifyNotificationGraph__SWIG_2(Bond.getCPtr(bond), unregisterCoupons);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void simplifyNotificationGraph(Bond bond) {
    NQuantLibcPINVOKE.simplifyNotificationGraph__SWIG_3(Bond.getCPtr(bond));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double cleanPriceFromZSpread(Bond bond, YieldTermStructure discountCurve, double zSpread, DayCounter dc, Compounding compounding, Frequency freq, Date settlementDate) {
    double ret = NQuantLibcPINVOKE.cleanPriceFromZSpread__SWIG_0(Bond.getCPtr(bond), YieldTermStructure.getCPtr(discountCurve), zSpread, DayCounter.getCPtr(dc), (int)compounding, (int)freq, Date.getCPtr(settlementDate));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double cleanPriceFromZSpread(Bond bond, YieldTermStructure discountCurve, double zSpread, DayCounter dc, Compounding compounding, Frequency freq) {
    double ret = NQuantLibcPINVOKE.cleanPriceFromZSpread__SWIG_1(Bond.getCPtr(bond), YieldTermStructure.getCPtr(discountCurve), zSpread, DayCounter.getCPtr(dc), (int)compounding, (int)freq);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Schedule sinkingSchedule(Date startDate, Period bondLength, Frequency frequency, Calendar paymentCalendar) {
    Schedule ret = new Schedule(NQuantLibcPINVOKE.sinkingSchedule(Date.getCPtr(startDate), Period.getCPtr(bondLength), (int)frequency, Calendar.getCPtr(paymentCalendar)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DoubleVector sinkingNotionals(Period bondLength, Frequency frequency, double couponRate, double initialNotional) {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.sinkingNotionals(Period.getCPtr(bondLength), (int)frequency, couponRate, initialNotional), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BlackCalibrationHelper as_black_helper(CalibrationHelper h) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_black_helper(CalibrationHelper.getCPtr(h));
    BlackCalibrationHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new BlackCalibrationHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_ext__shared_ptrT_SwaptionHelper_t as_swaption_helper(BlackCalibrationHelper h) {
    SWIGTYPE_p_ext__shared_ptrT_SwaptionHelper_t ret = new SWIGTYPE_p_ext__shared_ptrT_SwaptionHelper_t(NQuantLibcPINVOKE.as_swaption_helper(BlackCalibrationHelper.getCPtr(h)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DepositRateHelper as_depositratehelper(RateHelper helper) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_depositratehelper(RateHelper.getCPtr(helper));
    DepositRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new DepositRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FraRateHelper as_fraratehelper(RateHelper helper) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_fraratehelper(RateHelper.getCPtr(helper));
    FraRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new FraRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SwapRateHelper as_swapratehelper(RateHelper helper) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_swapratehelper(RateHelper.getCPtr(helper));
    SwapRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwapRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OISRateHelper as_oisratehelper(RateHelper helper) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_oisratehelper(RateHelper.getCPtr(helper));
    OISRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new OISRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ConstNotionalCrossCurrencyBasisSwapRateHelper as_constnotionalcrosscurrencybasisswapratehelper(RateHelper helper) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_constnotionalcrosscurrencybasisswapratehelper(RateHelper.getCPtr(helper));
    ConstNotionalCrossCurrencyBasisSwapRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new ConstNotionalCrossCurrencyBasisSwapRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MtMCrossCurrencyBasisSwapRateHelper as_mtmcrosscurrencybasisswapratehelper(RateHelper helper) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.as_mtmcrosscurrencybasisswapratehelper(RateHelper.getCPtr(helper));
    MtMCrossCurrencyBasisSwapRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new MtMCrossCurrencyBasisSwapRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Date cdsMaturity(Date tradeDate, Period tenor, DateGeneration.Rule rule) {
    Date ret = new Date(NQuantLibcPINVOKE.cdsMaturity(Date.getCPtr(tradeDate), Period.getCPtr(tenor), (int)rule), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void checkCompatibility(EvolutionDescription evolution, UnsignedIntVector numeraires) {
    NQuantLibcPINVOKE.checkCompatibility(EvolutionDescription.getCPtr(evolution), UnsignedIntVector.getCPtr(numeraires));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool isInTerminalMeasure(EvolutionDescription evolution, UnsignedIntVector numeraires) {
    bool ret = NQuantLibcPINVOKE.isInTerminalMeasure(EvolutionDescription.getCPtr(evolution), UnsignedIntVector.getCPtr(numeraires));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isInMoneyMarketPlusMeasure(EvolutionDescription evolution, UnsignedIntVector numeraires, uint offset) {
    bool ret = NQuantLibcPINVOKE.isInMoneyMarketPlusMeasure__SWIG_0(EvolutionDescription.getCPtr(evolution), UnsignedIntVector.getCPtr(numeraires), offset);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isInMoneyMarketPlusMeasure(EvolutionDescription evolution, UnsignedIntVector numeraires) {
    bool ret = NQuantLibcPINVOKE.isInMoneyMarketPlusMeasure__SWIG_1(EvolutionDescription.getCPtr(evolution), UnsignedIntVector.getCPtr(numeraires));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isInMoneyMarketMeasure(EvolutionDescription evolution, UnsignedIntVector numeraires) {
    bool ret = NQuantLibcPINVOKE.isInMoneyMarketMeasure(EvolutionDescription.getCPtr(evolution), UnsignedIntVector.getCPtr(numeraires));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UnsignedIntVector terminalMeasure(EvolutionDescription evolution) {
    UnsignedIntVector ret = new UnsignedIntVector(NQuantLibcPINVOKE.terminalMeasure(EvolutionDescription.getCPtr(evolution)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UnsignedIntVector moneyMarketPlusMeasure(EvolutionDescription evolution, uint offset) {
    UnsignedIntVector ret = new UnsignedIntVector(NQuantLibcPINVOKE.moneyMarketPlusMeasure__SWIG_0(EvolutionDescription.getCPtr(evolution), offset), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UnsignedIntVector moneyMarketPlusMeasure(EvolutionDescription evolution) {
    UnsignedIntVector ret = new UnsignedIntVector(NQuantLibcPINVOKE.moneyMarketPlusMeasure__SWIG_1(EvolutionDescription.getCPtr(evolution)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UnsignedIntVector moneyMarketMeasure(EvolutionDescription evolution) {
    UnsignedIntVector ret = new UnsignedIntVector(NQuantLibcPINVOKE.moneyMarketMeasure(EvolutionDescription.getCPtr(evolution)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Matrix getCovariance(QlArray volatilities, Matrix correlations) {
    Matrix ret = new Matrix(NQuantLibcPINVOKE.getCovariance(QlArray.getCPtr(volatilities), Matrix.getCPtr(correlations)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void enableTracing() {
    NQuantLibcPINVOKE.enableTracing();
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void disableTracing() {
    NQuantLibcPINVOKE.disableTracing();
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

}
