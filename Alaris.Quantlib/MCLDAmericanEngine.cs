//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class MCLDAmericanEngine : PricingEngine {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal MCLDAmericanEngine(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.MCLDAmericanEngine_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MCLDAmericanEngine obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_MCLDAmericanEngine(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public MCLDAmericanEngine(GeneralizedBlackScholesProcess process, int timeSteps, int timeStepsPerYear, bool antitheticVariate, bool controlVariate, int requiredSamples, double requiredTolerance, int maxSamples, int seed, int polynomOrder, LsmBasisSystem.PolynomialType polynomType, int nCalibrationSamples, OptionalBool antitheticVariateCalibration, uint seedCalibration) : this(NQuantLibcPINVOKE.new_MCLDAmericanEngine__SWIG_0(GeneralizedBlackScholesProcess.getCPtr(process), timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance, maxSamples, seed, polynomOrder, (int)polynomType, nCalibrationSamples, OptionalBool.getCPtr(antitheticVariateCalibration), seedCalibration), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCLDAmericanEngine(GeneralizedBlackScholesProcess process, int timeSteps, int timeStepsPerYear, bool antitheticVariate, bool controlVariate, int requiredSamples, double requiredTolerance, int maxSamples, int seed, int polynomOrder, LsmBasisSystem.PolynomialType polynomType, int nCalibrationSamples, OptionalBool antitheticVariateCalibration) : this(NQuantLibcPINVOKE.new_MCLDAmericanEngine__SWIG_1(GeneralizedBlackScholesProcess.getCPtr(process), timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance, maxSamples, seed, polynomOrder, (int)polynomType, nCalibrationSamples, OptionalBool.getCPtr(antitheticVariateCalibration)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCLDAmericanEngine(GeneralizedBlackScholesProcess process, int timeSteps, int timeStepsPerYear, bool antitheticVariate, bool controlVariate, int requiredSamples, double requiredTolerance, int maxSamples, int seed, int polynomOrder, LsmBasisSystem.PolynomialType polynomType, int nCalibrationSamples) : this(NQuantLibcPINVOKE.new_MCLDAmericanEngine__SWIG_2(GeneralizedBlackScholesProcess.getCPtr(process), timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance, maxSamples, seed, polynomOrder, (int)polynomType, nCalibrationSamples), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCLDAmericanEngine(GeneralizedBlackScholesProcess process, int timeSteps, int timeStepsPerYear, bool antitheticVariate, bool controlVariate, int requiredSamples, double requiredTolerance, int maxSamples, int seed, int polynomOrder, LsmBasisSystem.PolynomialType polynomType) : this(NQuantLibcPINVOKE.new_MCLDAmericanEngine__SWIG_3(GeneralizedBlackScholesProcess.getCPtr(process), timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance, maxSamples, seed, polynomOrder, (int)polynomType), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCLDAmericanEngine(GeneralizedBlackScholesProcess process, int timeSteps, int timeStepsPerYear, bool antitheticVariate, bool controlVariate, int requiredSamples, double requiredTolerance, int maxSamples, int seed, int polynomOrder) : this(NQuantLibcPINVOKE.new_MCLDAmericanEngine__SWIG_4(GeneralizedBlackScholesProcess.getCPtr(process), timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance, maxSamples, seed, polynomOrder), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCLDAmericanEngine(GeneralizedBlackScholesProcess process, int timeSteps, int timeStepsPerYear, bool antitheticVariate, bool controlVariate, int requiredSamples, double requiredTolerance, int maxSamples, int seed) : this(NQuantLibcPINVOKE.new_MCLDAmericanEngine__SWIG_5(GeneralizedBlackScholesProcess.getCPtr(process), timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance, maxSamples, seed), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCLDAmericanEngine(GeneralizedBlackScholesProcess process, int timeSteps, int timeStepsPerYear, bool antitheticVariate, bool controlVariate, int requiredSamples, double requiredTolerance, int maxSamples) : this(NQuantLibcPINVOKE.new_MCLDAmericanEngine__SWIG_6(GeneralizedBlackScholesProcess.getCPtr(process), timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance, maxSamples), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCLDAmericanEngine(GeneralizedBlackScholesProcess process, int timeSteps, int timeStepsPerYear, bool antitheticVariate, bool controlVariate, int requiredSamples, double requiredTolerance) : this(NQuantLibcPINVOKE.new_MCLDAmericanEngine__SWIG_7(GeneralizedBlackScholesProcess.getCPtr(process), timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCLDAmericanEngine(GeneralizedBlackScholesProcess process, int timeSteps, int timeStepsPerYear, bool antitheticVariate, bool controlVariate, int requiredSamples) : this(NQuantLibcPINVOKE.new_MCLDAmericanEngine__SWIG_8(GeneralizedBlackScholesProcess.getCPtr(process), timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCLDAmericanEngine(GeneralizedBlackScholesProcess process, int timeSteps, int timeStepsPerYear, bool antitheticVariate, bool controlVariate) : this(NQuantLibcPINVOKE.new_MCLDAmericanEngine__SWIG_9(GeneralizedBlackScholesProcess.getCPtr(process), timeSteps, timeStepsPerYear, antitheticVariate, controlVariate), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCLDAmericanEngine(GeneralizedBlackScholesProcess process, int timeSteps, int timeStepsPerYear, bool antitheticVariate) : this(NQuantLibcPINVOKE.new_MCLDAmericanEngine__SWIG_10(GeneralizedBlackScholesProcess.getCPtr(process), timeSteps, timeStepsPerYear, antitheticVariate), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCLDAmericanEngine(GeneralizedBlackScholesProcess process, int timeSteps, int timeStepsPerYear) : this(NQuantLibcPINVOKE.new_MCLDAmericanEngine__SWIG_11(GeneralizedBlackScholesProcess.getCPtr(process), timeSteps, timeStepsPerYear), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCLDAmericanEngine(GeneralizedBlackScholesProcess process, int timeSteps) : this(NQuantLibcPINVOKE.new_MCLDAmericanEngine__SWIG_12(GeneralizedBlackScholesProcess.getCPtr(process), timeSteps), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCLDAmericanEngine(GeneralizedBlackScholesProcess process) : this(NQuantLibcPINVOKE.new_MCLDAmericanEngine__SWIG_13(GeneralizedBlackScholesProcess.getCPtr(process)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

}
