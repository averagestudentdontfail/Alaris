//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class FdBlackScholesVanillaEngine : PricingEngine {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal FdBlackScholesVanillaEngine(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.FdBlackScholesVanillaEngine_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FdBlackScholesVanillaEngine obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_FdBlackScholesVanillaEngine(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess process, uint tGrid, uint xGrid, uint dampingSteps, FdmSchemeDesc schemeDesc, bool localVol, double illegalLocalVolOverwrite, FdBlackScholesVanillaEngine.CashDividendModel cashDividendModel) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_0(GeneralizedBlackScholesProcess.getCPtr(process), tGrid, xGrid, dampingSteps, FdmSchemeDesc.getCPtr(schemeDesc), localVol, illegalLocalVolOverwrite, (int)cashDividendModel), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess process, uint tGrid, uint xGrid, uint dampingSteps, FdmSchemeDesc schemeDesc, bool localVol, double illegalLocalVolOverwrite) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_1(GeneralizedBlackScholesProcess.getCPtr(process), tGrid, xGrid, dampingSteps, FdmSchemeDesc.getCPtr(schemeDesc), localVol, illegalLocalVolOverwrite), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess process, uint tGrid, uint xGrid, uint dampingSteps, FdmSchemeDesc schemeDesc, bool localVol) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_2(GeneralizedBlackScholesProcess.getCPtr(process), tGrid, xGrid, dampingSteps, FdmSchemeDesc.getCPtr(schemeDesc), localVol), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess process, uint tGrid, uint xGrid, uint dampingSteps, FdmSchemeDesc schemeDesc) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_3(GeneralizedBlackScholesProcess.getCPtr(process), tGrid, xGrid, dampingSteps, FdmSchemeDesc.getCPtr(schemeDesc)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess process, uint tGrid, uint xGrid, uint dampingSteps) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_4(GeneralizedBlackScholesProcess.getCPtr(process), tGrid, xGrid, dampingSteps), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess process, uint tGrid, uint xGrid) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_5(GeneralizedBlackScholesProcess.getCPtr(process), tGrid, xGrid), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess process, uint tGrid) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_6(GeneralizedBlackScholesProcess.getCPtr(process), tGrid), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess process) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_7(GeneralizedBlackScholesProcess.getCPtr(process)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess arg0, FdmQuantoHelper quantoHelper, uint tGrid, uint xGrid, uint dampingSteps, FdmSchemeDesc schemeDesc, bool localVol, double illegalLocalVolOverwrite, FdBlackScholesVanillaEngine.CashDividendModel cashDividendModel) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_8(GeneralizedBlackScholesProcess.getCPtr(arg0), FdmQuantoHelper.getCPtr(quantoHelper), tGrid, xGrid, dampingSteps, FdmSchemeDesc.getCPtr(schemeDesc), localVol, illegalLocalVolOverwrite, (int)cashDividendModel), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess arg0, FdmQuantoHelper quantoHelper, uint tGrid, uint xGrid, uint dampingSteps, FdmSchemeDesc schemeDesc, bool localVol, double illegalLocalVolOverwrite) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_9(GeneralizedBlackScholesProcess.getCPtr(arg0), FdmQuantoHelper.getCPtr(quantoHelper), tGrid, xGrid, dampingSteps, FdmSchemeDesc.getCPtr(schemeDesc), localVol, illegalLocalVolOverwrite), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess arg0, FdmQuantoHelper quantoHelper, uint tGrid, uint xGrid, uint dampingSteps, FdmSchemeDesc schemeDesc, bool localVol) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_10(GeneralizedBlackScholesProcess.getCPtr(arg0), FdmQuantoHelper.getCPtr(quantoHelper), tGrid, xGrid, dampingSteps, FdmSchemeDesc.getCPtr(schemeDesc), localVol), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess arg0, FdmQuantoHelper quantoHelper, uint tGrid, uint xGrid, uint dampingSteps, FdmSchemeDesc schemeDesc) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_11(GeneralizedBlackScholesProcess.getCPtr(arg0), FdmQuantoHelper.getCPtr(quantoHelper), tGrid, xGrid, dampingSteps, FdmSchemeDesc.getCPtr(schemeDesc)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess arg0, FdmQuantoHelper quantoHelper, uint tGrid, uint xGrid, uint dampingSteps) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_12(GeneralizedBlackScholesProcess.getCPtr(arg0), FdmQuantoHelper.getCPtr(quantoHelper), tGrid, xGrid, dampingSteps), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess arg0, FdmQuantoHelper quantoHelper, uint tGrid, uint xGrid) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_13(GeneralizedBlackScholesProcess.getCPtr(arg0), FdmQuantoHelper.getCPtr(quantoHelper), tGrid, xGrid), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess arg0, FdmQuantoHelper quantoHelper, uint tGrid) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_14(GeneralizedBlackScholesProcess.getCPtr(arg0), FdmQuantoHelper.getCPtr(quantoHelper), tGrid), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess arg0, FdmQuantoHelper quantoHelper) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_15(GeneralizedBlackScholesProcess.getCPtr(arg0), FdmQuantoHelper.getCPtr(quantoHelper)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess process, DividendSchedule dividends, uint tGrid, uint xGrid, uint dampingSteps, FdmSchemeDesc schemeDesc, bool localVol, double illegalLocalVolOverwrite, FdBlackScholesVanillaEngine.CashDividendModel cashDividendModel) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_16(GeneralizedBlackScholesProcess.getCPtr(process), DividendSchedule.getCPtr(dividends), tGrid, xGrid, dampingSteps, FdmSchemeDesc.getCPtr(schemeDesc), localVol, illegalLocalVolOverwrite, (int)cashDividendModel), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess process, DividendSchedule dividends, uint tGrid, uint xGrid, uint dampingSteps, FdmSchemeDesc schemeDesc, bool localVol, double illegalLocalVolOverwrite) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_17(GeneralizedBlackScholesProcess.getCPtr(process), DividendSchedule.getCPtr(dividends), tGrid, xGrid, dampingSteps, FdmSchemeDesc.getCPtr(schemeDesc), localVol, illegalLocalVolOverwrite), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess process, DividendSchedule dividends, uint tGrid, uint xGrid, uint dampingSteps, FdmSchemeDesc schemeDesc, bool localVol) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_18(GeneralizedBlackScholesProcess.getCPtr(process), DividendSchedule.getCPtr(dividends), tGrid, xGrid, dampingSteps, FdmSchemeDesc.getCPtr(schemeDesc), localVol), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess process, DividendSchedule dividends, uint tGrid, uint xGrid, uint dampingSteps, FdmSchemeDesc schemeDesc) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_19(GeneralizedBlackScholesProcess.getCPtr(process), DividendSchedule.getCPtr(dividends), tGrid, xGrid, dampingSteps, FdmSchemeDesc.getCPtr(schemeDesc)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess process, DividendSchedule dividends, uint tGrid, uint xGrid, uint dampingSteps) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_20(GeneralizedBlackScholesProcess.getCPtr(process), DividendSchedule.getCPtr(dividends), tGrid, xGrid, dampingSteps), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess process, DividendSchedule dividends, uint tGrid, uint xGrid) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_21(GeneralizedBlackScholesProcess.getCPtr(process), DividendSchedule.getCPtr(dividends), tGrid, xGrid), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess process, DividendSchedule dividends, uint tGrid) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_22(GeneralizedBlackScholesProcess.getCPtr(process), DividendSchedule.getCPtr(dividends), tGrid), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess process, DividendSchedule dividends) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_23(GeneralizedBlackScholesProcess.getCPtr(process), DividendSchedule.getCPtr(dividends)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess arg0, DividendSchedule dividends, FdmQuantoHelper quantoHelper, uint tGrid, uint xGrid, uint dampingSteps, FdmSchemeDesc schemeDesc, bool localVol, double illegalLocalVolOverwrite, FdBlackScholesVanillaEngine.CashDividendModel cashDividendModel) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_24(GeneralizedBlackScholesProcess.getCPtr(arg0), DividendSchedule.getCPtr(dividends), FdmQuantoHelper.getCPtr(quantoHelper), tGrid, xGrid, dampingSteps, FdmSchemeDesc.getCPtr(schemeDesc), localVol, illegalLocalVolOverwrite, (int)cashDividendModel), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess arg0, DividendSchedule dividends, FdmQuantoHelper quantoHelper, uint tGrid, uint xGrid, uint dampingSteps, FdmSchemeDesc schemeDesc, bool localVol, double illegalLocalVolOverwrite) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_25(GeneralizedBlackScholesProcess.getCPtr(arg0), DividendSchedule.getCPtr(dividends), FdmQuantoHelper.getCPtr(quantoHelper), tGrid, xGrid, dampingSteps, FdmSchemeDesc.getCPtr(schemeDesc), localVol, illegalLocalVolOverwrite), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess arg0, DividendSchedule dividends, FdmQuantoHelper quantoHelper, uint tGrid, uint xGrid, uint dampingSteps, FdmSchemeDesc schemeDesc, bool localVol) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_26(GeneralizedBlackScholesProcess.getCPtr(arg0), DividendSchedule.getCPtr(dividends), FdmQuantoHelper.getCPtr(quantoHelper), tGrid, xGrid, dampingSteps, FdmSchemeDesc.getCPtr(schemeDesc), localVol), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess arg0, DividendSchedule dividends, FdmQuantoHelper quantoHelper, uint tGrid, uint xGrid, uint dampingSteps, FdmSchemeDesc schemeDesc) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_27(GeneralizedBlackScholesProcess.getCPtr(arg0), DividendSchedule.getCPtr(dividends), FdmQuantoHelper.getCPtr(quantoHelper), tGrid, xGrid, dampingSteps, FdmSchemeDesc.getCPtr(schemeDesc)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess arg0, DividendSchedule dividends, FdmQuantoHelper quantoHelper, uint tGrid, uint xGrid, uint dampingSteps) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_28(GeneralizedBlackScholesProcess.getCPtr(arg0), DividendSchedule.getCPtr(dividends), FdmQuantoHelper.getCPtr(quantoHelper), tGrid, xGrid, dampingSteps), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess arg0, DividendSchedule dividends, FdmQuantoHelper quantoHelper, uint tGrid, uint xGrid) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_29(GeneralizedBlackScholesProcess.getCPtr(arg0), DividendSchedule.getCPtr(dividends), FdmQuantoHelper.getCPtr(quantoHelper), tGrid, xGrid), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess arg0, DividendSchedule dividends, FdmQuantoHelper quantoHelper, uint tGrid) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_30(GeneralizedBlackScholesProcess.getCPtr(arg0), DividendSchedule.getCPtr(dividends), FdmQuantoHelper.getCPtr(quantoHelper), tGrid), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdBlackScholesVanillaEngine(GeneralizedBlackScholesProcess arg0, DividendSchedule dividends, FdmQuantoHelper quantoHelper) : this(NQuantLibcPINVOKE.new_FdBlackScholesVanillaEngine__SWIG_31(GeneralizedBlackScholesProcess.getCPtr(arg0), DividendSchedule.getCPtr(dividends), FdmQuantoHelper.getCPtr(quantoHelper)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum CashDividendModel {
    Spot,
    Escrowed
  }

}
