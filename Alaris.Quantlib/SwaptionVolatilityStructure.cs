//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class SwaptionVolatilityStructure : VolatilityTermStructure {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal SwaptionVolatilityStructure(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.SwaptionVolatilityStructure_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SwaptionVolatilityStructure obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_SwaptionVolatilityStructure(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public double volatility(Date start, Period length, double strike, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructure_volatility__SWIG_0(swigCPtr, Date.getCPtr(start), Period.getCPtr(length), strike, extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double volatility(Date start, Period length, double strike) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructure_volatility__SWIG_1(swigCPtr, Date.getCPtr(start), Period.getCPtr(length), strike);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double volatility(double start, double length, double strike, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructure_volatility__SWIG_2(swigCPtr, start, length, strike, extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double volatility(double start, double length, double strike) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructure_volatility__SWIG_3(swigCPtr, start, length, strike);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double blackVariance(Date start, Period length, double strike, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructure_blackVariance__SWIG_0(swigCPtr, Date.getCPtr(start), Period.getCPtr(length), strike, extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double blackVariance(Date start, Period length, double strike) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructure_blackVariance__SWIG_1(swigCPtr, Date.getCPtr(start), Period.getCPtr(length), strike);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double blackVariance(double start, double length, double strike, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructure_blackVariance__SWIG_2(swigCPtr, start, length, strike, extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double blackVariance(double start, double length, double strike) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructure_blackVariance__SWIG_3(swigCPtr, start, length, strike);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Date optionDateFromTenor(Period p) {
    Date ret = new Date(NQuantLibcPINVOKE.SwaptionVolatilityStructure_optionDateFromTenor(swigCPtr, Period.getCPtr(p)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(Period optionTenor, Period swapTenor, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructure_shift__SWIG_0(swigCPtr, Period.getCPtr(optionTenor), Period.getCPtr(swapTenor), extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(Period optionTenor, Period swapTenor) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructure_shift__SWIG_1(swigCPtr, Period.getCPtr(optionTenor), Period.getCPtr(swapTenor));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(Date optionDate, Period swapTenor, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructure_shift__SWIG_2(swigCPtr, Date.getCPtr(optionDate), Period.getCPtr(swapTenor), extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(Date optionDate, Period swapTenor) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructure_shift__SWIG_3(swigCPtr, Date.getCPtr(optionDate), Period.getCPtr(swapTenor));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(double optionTime, Period swapTenor, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructure_shift__SWIG_4(swigCPtr, optionTime, Period.getCPtr(swapTenor), extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(double optionTime, Period swapTenor) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructure_shift__SWIG_5(swigCPtr, optionTime, Period.getCPtr(swapTenor));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(Period optionTenor, double swapLength, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructure_shift__SWIG_6(swigCPtr, Period.getCPtr(optionTenor), swapLength, extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(Period optionTenor, double swapLength) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructure_shift__SWIG_7(swigCPtr, Period.getCPtr(optionTenor), swapLength);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(Date optionDate, double swapLength, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructure_shift__SWIG_8(swigCPtr, Date.getCPtr(optionDate), swapLength, extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(Date optionDate, double swapLength) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructure_shift__SWIG_9(swigCPtr, Date.getCPtr(optionDate), swapLength);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(double optionTime, double swapLength, bool extrapolate) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructure_shift__SWIG_10(swigCPtr, optionTime, swapLength, extrapolate);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shift(double optionTime, double swapLength) {
    double ret = NQuantLibcPINVOKE.SwaptionVolatilityStructure_shift__SWIG_11(swigCPtr, optionTime, swapLength);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(Period optionTenor, Period swapTenor, bool extr) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructure_smileSection__SWIG_0(swigCPtr, Period.getCPtr(optionTenor), Period.getCPtr(swapTenor), extr);
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(Period optionTenor, Period swapTenor) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructure_smileSection__SWIG_1(swigCPtr, Period.getCPtr(optionTenor), Period.getCPtr(swapTenor));
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(Date optionDate, Period swapTenor, bool extr) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructure_smileSection__SWIG_2(swigCPtr, Date.getCPtr(optionDate), Period.getCPtr(swapTenor), extr);
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(Date optionDate, Period swapTenor) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructure_smileSection__SWIG_3(swigCPtr, Date.getCPtr(optionDate), Period.getCPtr(swapTenor));
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(double optionTime, Period swapTenor, bool extr) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructure_smileSection__SWIG_4(swigCPtr, optionTime, Period.getCPtr(swapTenor), extr);
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(double optionTime, Period swapTenor) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructure_smileSection__SWIG_5(swigCPtr, optionTime, Period.getCPtr(swapTenor));
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(Period optionTenor, double swapLength, bool extr) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructure_smileSection__SWIG_6(swigCPtr, Period.getCPtr(optionTenor), swapLength, extr);
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(Period optionTenor, double swapLength) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructure_smileSection__SWIG_7(swigCPtr, Period.getCPtr(optionTenor), swapLength);
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(Date optionDate, double swapLength, bool extr) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructure_smileSection__SWIG_8(swigCPtr, Date.getCPtr(optionDate), swapLength, extr);
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(Date optionDate, double swapLength) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructure_smileSection__SWIG_9(swigCPtr, Date.getCPtr(optionDate), swapLength);
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(double optionTime, double swapLength, bool extr) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructure_smileSection__SWIG_10(swigCPtr, optionTime, swapLength, extr);
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SmileSection smileSection(double optionTime, double swapLength) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwaptionVolatilityStructure_smileSection__SWIG_11(swigCPtr, optionTime, swapLength);
    SmileSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SmileSection(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
