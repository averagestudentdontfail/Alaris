//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ForwardRateAgreement : Instrument {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ForwardRateAgreement(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.ForwardRateAgreement_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ForwardRateAgreement obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_ForwardRateAgreement(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ForwardRateAgreement(IborIndex index, Date valueDate, Position.Type type, double strikeForwardRate, double notionalAmount, YieldTermStructureHandle discountCurve) : this(NQuantLibcPINVOKE.new_ForwardRateAgreement__SWIG_0(IborIndex.getCPtr(index), Date.getCPtr(valueDate), (int)type, strikeForwardRate, notionalAmount, YieldTermStructureHandle.getCPtr(discountCurve)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public ForwardRateAgreement(IborIndex index, Date valueDate, Position.Type type, double strikeForwardRate, double notionalAmount) : this(NQuantLibcPINVOKE.new_ForwardRateAgreement__SWIG_1(IborIndex.getCPtr(index), Date.getCPtr(valueDate), (int)type, strikeForwardRate, notionalAmount), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public ForwardRateAgreement(IborIndex index, Date valueDate, Date maturityDate, Position.Type type, double strikeForwardRate, double notionalAmount, YieldTermStructureHandle discountCurve) : this(NQuantLibcPINVOKE.new_ForwardRateAgreement__SWIG_2(IborIndex.getCPtr(index), Date.getCPtr(valueDate), Date.getCPtr(maturityDate), (int)type, strikeForwardRate, notionalAmount, YieldTermStructureHandle.getCPtr(discountCurve)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public ForwardRateAgreement(IborIndex index, Date valueDate, Date maturityDate, Position.Type type, double strikeForwardRate, double notionalAmount) : this(NQuantLibcPINVOKE.new_ForwardRateAgreement__SWIG_3(IborIndex.getCPtr(index), Date.getCPtr(valueDate), Date.getCPtr(maturityDate), (int)type, strikeForwardRate, notionalAmount), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public double amount() {
    double ret = NQuantLibcPINVOKE.ForwardRateAgreement_amount(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Date fixingDate() {
    Date ret = new Date(NQuantLibcPINVOKE.ForwardRateAgreement_fixingDate(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public InterestRate forwardRate() {
    InterestRate ret = new InterestRate(NQuantLibcPINVOKE.ForwardRateAgreement_forwardRate(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
