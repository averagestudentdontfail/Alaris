//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class AndreasenHugeVolatilityInterpl : Observable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal AndreasenHugeVolatilityInterpl(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.AndreasenHugeVolatilityInterpl_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AndreasenHugeVolatilityInterpl obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_AndreasenHugeVolatilityInterpl(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public AndreasenHugeVolatilityInterpl(CalibrationSet calibrationSet, QuoteHandle spot, YieldTermStructureHandle rTS, YieldTermStructureHandle qTS, AndreasenHugeVolatilityInterpl.InterpolationType interpolationType, AndreasenHugeVolatilityInterpl.CalibrationType calibrationType, uint nGridPoints, double minStrike, double maxStrike, OptimizationMethod optimizationMethod, EndCriteria endCriteria) : this(NQuantLibcPINVOKE.new_AndreasenHugeVolatilityInterpl__SWIG_0(CalibrationSet.getCPtr(calibrationSet), QuoteHandle.getCPtr(spot), YieldTermStructureHandle.getCPtr(rTS), YieldTermStructureHandle.getCPtr(qTS), (int)interpolationType, (int)calibrationType, nGridPoints, minStrike, maxStrike, OptimizationMethod.getCPtr(optimizationMethod), EndCriteria.getCPtr(endCriteria)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AndreasenHugeVolatilityInterpl(CalibrationSet calibrationSet, QuoteHandle spot, YieldTermStructureHandle rTS, YieldTermStructureHandle qTS, AndreasenHugeVolatilityInterpl.InterpolationType interpolationType, AndreasenHugeVolatilityInterpl.CalibrationType calibrationType, uint nGridPoints, double minStrike, double maxStrike, OptimizationMethod optimizationMethod) : this(NQuantLibcPINVOKE.new_AndreasenHugeVolatilityInterpl__SWIG_1(CalibrationSet.getCPtr(calibrationSet), QuoteHandle.getCPtr(spot), YieldTermStructureHandle.getCPtr(rTS), YieldTermStructureHandle.getCPtr(qTS), (int)interpolationType, (int)calibrationType, nGridPoints, minStrike, maxStrike, OptimizationMethod.getCPtr(optimizationMethod)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AndreasenHugeVolatilityInterpl(CalibrationSet calibrationSet, QuoteHandle spot, YieldTermStructureHandle rTS, YieldTermStructureHandle qTS, AndreasenHugeVolatilityInterpl.InterpolationType interpolationType, AndreasenHugeVolatilityInterpl.CalibrationType calibrationType, uint nGridPoints, double minStrike, double maxStrike) : this(NQuantLibcPINVOKE.new_AndreasenHugeVolatilityInterpl__SWIG_2(CalibrationSet.getCPtr(calibrationSet), QuoteHandle.getCPtr(spot), YieldTermStructureHandle.getCPtr(rTS), YieldTermStructureHandle.getCPtr(qTS), (int)interpolationType, (int)calibrationType, nGridPoints, minStrike, maxStrike), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AndreasenHugeVolatilityInterpl(CalibrationSet calibrationSet, QuoteHandle spot, YieldTermStructureHandle rTS, YieldTermStructureHandle qTS, AndreasenHugeVolatilityInterpl.InterpolationType interpolationType, AndreasenHugeVolatilityInterpl.CalibrationType calibrationType, uint nGridPoints, double minStrike) : this(NQuantLibcPINVOKE.new_AndreasenHugeVolatilityInterpl__SWIG_3(CalibrationSet.getCPtr(calibrationSet), QuoteHandle.getCPtr(spot), YieldTermStructureHandle.getCPtr(rTS), YieldTermStructureHandle.getCPtr(qTS), (int)interpolationType, (int)calibrationType, nGridPoints, minStrike), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AndreasenHugeVolatilityInterpl(CalibrationSet calibrationSet, QuoteHandle spot, YieldTermStructureHandle rTS, YieldTermStructureHandle qTS, AndreasenHugeVolatilityInterpl.InterpolationType interpolationType, AndreasenHugeVolatilityInterpl.CalibrationType calibrationType, uint nGridPoints) : this(NQuantLibcPINVOKE.new_AndreasenHugeVolatilityInterpl__SWIG_4(CalibrationSet.getCPtr(calibrationSet), QuoteHandle.getCPtr(spot), YieldTermStructureHandle.getCPtr(rTS), YieldTermStructureHandle.getCPtr(qTS), (int)interpolationType, (int)calibrationType, nGridPoints), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AndreasenHugeVolatilityInterpl(CalibrationSet calibrationSet, QuoteHandle spot, YieldTermStructureHandle rTS, YieldTermStructureHandle qTS, AndreasenHugeVolatilityInterpl.InterpolationType interpolationType, AndreasenHugeVolatilityInterpl.CalibrationType calibrationType) : this(NQuantLibcPINVOKE.new_AndreasenHugeVolatilityInterpl__SWIG_5(CalibrationSet.getCPtr(calibrationSet), QuoteHandle.getCPtr(spot), YieldTermStructureHandle.getCPtr(rTS), YieldTermStructureHandle.getCPtr(qTS), (int)interpolationType, (int)calibrationType), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AndreasenHugeVolatilityInterpl(CalibrationSet calibrationSet, QuoteHandle spot, YieldTermStructureHandle rTS, YieldTermStructureHandle qTS, AndreasenHugeVolatilityInterpl.InterpolationType interpolationType) : this(NQuantLibcPINVOKE.new_AndreasenHugeVolatilityInterpl__SWIG_6(CalibrationSet.getCPtr(calibrationSet), QuoteHandle.getCPtr(spot), YieldTermStructureHandle.getCPtr(rTS), YieldTermStructureHandle.getCPtr(qTS), (int)interpolationType), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AndreasenHugeVolatilityInterpl(CalibrationSet calibrationSet, QuoteHandle spot, YieldTermStructureHandle rTS, YieldTermStructureHandle qTS) : this(NQuantLibcPINVOKE.new_AndreasenHugeVolatilityInterpl__SWIG_7(CalibrationSet.getCPtr(calibrationSet), QuoteHandle.getCPtr(spot), YieldTermStructureHandle.getCPtr(rTS), YieldTermStructureHandle.getCPtr(qTS)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public Date maxDate() {
    Date ret = new Date(NQuantLibcPINVOKE.AndreasenHugeVolatilityInterpl_maxDate(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double minStrike() {
    double ret = NQuantLibcPINVOKE.AndreasenHugeVolatilityInterpl_minStrike(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double maxStrike() {
    double ret = NQuantLibcPINVOKE.AndreasenHugeVolatilityInterpl_maxStrike(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double fwd(double t) {
    double ret = NQuantLibcPINVOKE.AndreasenHugeVolatilityInterpl_fwd(swigCPtr, t);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public YieldTermStructureHandle riskFreeRate() {
    YieldTermStructureHandle ret = new YieldTermStructureHandle(NQuantLibcPINVOKE.AndreasenHugeVolatilityInterpl_riskFreeRate(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CalibrationErrorTuple calibrationError() {
    CalibrationErrorTuple ret = new CalibrationErrorTuple(NQuantLibcPINVOKE.AndreasenHugeVolatilityInterpl_calibrationError(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double optionPrice(double t, double strike, Option.Type optionType) {
    double ret = NQuantLibcPINVOKE.AndreasenHugeVolatilityInterpl_optionPrice(swigCPtr, t, strike, (int)optionType);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double localVol(double t, double strike) {
    double ret = NQuantLibcPINVOKE.AndreasenHugeVolatilityInterpl_localVol(swigCPtr, t, strike);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum InterpolationType {
    PiecewiseConstant,
    Linear,
    CubicSpline
  }

  public enum CalibrationType {
    Call = 1,
    Put = -1,
    CallPut
  }

}
