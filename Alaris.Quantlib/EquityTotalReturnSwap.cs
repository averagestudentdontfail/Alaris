//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class EquityTotalReturnSwap : Swap {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal EquityTotalReturnSwap(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.EquityTotalReturnSwap_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EquityTotalReturnSwap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_EquityTotalReturnSwap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public EquityTotalReturnSwap(Swap.Type type, double nominal, Schedule schedule, EquityIndex equityIndex, IborIndex interestRateIndex, DayCounter dayCounter, double margin, double gearing, Calendar paymentCalendar, BusinessDayConvention paymentConvention, uint paymentDelay) : this(NQuantLibcPINVOKE.new_EquityTotalReturnSwap__SWIG_0((int)type, nominal, Schedule.getCPtr(schedule), EquityIndex.getCPtr(equityIndex), IborIndex.getCPtr(interestRateIndex), DayCounter.getCPtr(dayCounter), margin, gearing, Calendar.getCPtr(paymentCalendar), (int)paymentConvention, paymentDelay), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public EquityTotalReturnSwap(Swap.Type type, double nominal, Schedule schedule, EquityIndex equityIndex, IborIndex interestRateIndex, DayCounter dayCounter, double margin, double gearing, Calendar paymentCalendar, BusinessDayConvention paymentConvention) : this(NQuantLibcPINVOKE.new_EquityTotalReturnSwap__SWIG_1((int)type, nominal, Schedule.getCPtr(schedule), EquityIndex.getCPtr(equityIndex), IborIndex.getCPtr(interestRateIndex), DayCounter.getCPtr(dayCounter), margin, gearing, Calendar.getCPtr(paymentCalendar), (int)paymentConvention), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public EquityTotalReturnSwap(Swap.Type type, double nominal, Schedule schedule, EquityIndex equityIndex, IborIndex interestRateIndex, DayCounter dayCounter, double margin, double gearing, Calendar paymentCalendar) : this(NQuantLibcPINVOKE.new_EquityTotalReturnSwap__SWIG_2((int)type, nominal, Schedule.getCPtr(schedule), EquityIndex.getCPtr(equityIndex), IborIndex.getCPtr(interestRateIndex), DayCounter.getCPtr(dayCounter), margin, gearing, Calendar.getCPtr(paymentCalendar)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public EquityTotalReturnSwap(Swap.Type type, double nominal, Schedule schedule, EquityIndex equityIndex, IborIndex interestRateIndex, DayCounter dayCounter, double margin, double gearing) : this(NQuantLibcPINVOKE.new_EquityTotalReturnSwap__SWIG_3((int)type, nominal, Schedule.getCPtr(schedule), EquityIndex.getCPtr(equityIndex), IborIndex.getCPtr(interestRateIndex), DayCounter.getCPtr(dayCounter), margin, gearing), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public EquityTotalReturnSwap(Swap.Type type, double nominal, Schedule schedule, EquityIndex equityIndex, IborIndex interestRateIndex, DayCounter dayCounter, double margin) : this(NQuantLibcPINVOKE.new_EquityTotalReturnSwap__SWIG_4((int)type, nominal, Schedule.getCPtr(schedule), EquityIndex.getCPtr(equityIndex), IborIndex.getCPtr(interestRateIndex), DayCounter.getCPtr(dayCounter), margin), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public EquityTotalReturnSwap(Swap.Type type, double nominal, Schedule schedule, EquityIndex equityIndex, OvernightIndex interestRateIndex, DayCounter dayCounter, double margin, double gearing, Calendar paymentCalendar, BusinessDayConvention paymentConvention, uint paymentDelay) : this(NQuantLibcPINVOKE.new_EquityTotalReturnSwap__SWIG_5((int)type, nominal, Schedule.getCPtr(schedule), EquityIndex.getCPtr(equityIndex), OvernightIndex.getCPtr(interestRateIndex), DayCounter.getCPtr(dayCounter), margin, gearing, Calendar.getCPtr(paymentCalendar), (int)paymentConvention, paymentDelay), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public EquityTotalReturnSwap(Swap.Type type, double nominal, Schedule schedule, EquityIndex equityIndex, OvernightIndex interestRateIndex, DayCounter dayCounter, double margin, double gearing, Calendar paymentCalendar, BusinessDayConvention paymentConvention) : this(NQuantLibcPINVOKE.new_EquityTotalReturnSwap__SWIG_6((int)type, nominal, Schedule.getCPtr(schedule), EquityIndex.getCPtr(equityIndex), OvernightIndex.getCPtr(interestRateIndex), DayCounter.getCPtr(dayCounter), margin, gearing, Calendar.getCPtr(paymentCalendar), (int)paymentConvention), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public EquityTotalReturnSwap(Swap.Type type, double nominal, Schedule schedule, EquityIndex equityIndex, OvernightIndex interestRateIndex, DayCounter dayCounter, double margin, double gearing, Calendar paymentCalendar) : this(NQuantLibcPINVOKE.new_EquityTotalReturnSwap__SWIG_7((int)type, nominal, Schedule.getCPtr(schedule), EquityIndex.getCPtr(equityIndex), OvernightIndex.getCPtr(interestRateIndex), DayCounter.getCPtr(dayCounter), margin, gearing, Calendar.getCPtr(paymentCalendar)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public EquityTotalReturnSwap(Swap.Type type, double nominal, Schedule schedule, EquityIndex equityIndex, OvernightIndex interestRateIndex, DayCounter dayCounter, double margin, double gearing) : this(NQuantLibcPINVOKE.new_EquityTotalReturnSwap__SWIG_8((int)type, nominal, Schedule.getCPtr(schedule), EquityIndex.getCPtr(equityIndex), OvernightIndex.getCPtr(interestRateIndex), DayCounter.getCPtr(dayCounter), margin, gearing), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public EquityTotalReturnSwap(Swap.Type type, double nominal, Schedule schedule, EquityIndex equityIndex, OvernightIndex interestRateIndex, DayCounter dayCounter, double margin) : this(NQuantLibcPINVOKE.new_EquityTotalReturnSwap__SWIG_9((int)type, nominal, Schedule.getCPtr(schedule), EquityIndex.getCPtr(equityIndex), OvernightIndex.getCPtr(interestRateIndex), DayCounter.getCPtr(dayCounter), margin), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public Swap.Type type() {
    Swap.Type ret = (Swap.Type)NQuantLibcPINVOKE.EquityTotalReturnSwap_type(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double nominal() {
    double ret = NQuantLibcPINVOKE.EquityTotalReturnSwap_nominal(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public EquityIndex equityIndex() {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.EquityTotalReturnSwap_equityIndex(swigCPtr);
    EquityIndex ret = (cPtr == global::System.IntPtr.Zero) ? null : new EquityIndex(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public InterestRateIndex interestRateIndex() {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.EquityTotalReturnSwap_interestRateIndex(swigCPtr);
    InterestRateIndex ret = (cPtr == global::System.IntPtr.Zero) ? null : new InterestRateIndex(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Schedule schedule() {
    Schedule ret = new Schedule(NQuantLibcPINVOKE.EquityTotalReturnSwap_schedule(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DayCounter dayCounter() {
    DayCounter ret = new DayCounter(NQuantLibcPINVOKE.EquityTotalReturnSwap_dayCounter(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double margin() {
    double ret = NQuantLibcPINVOKE.EquityTotalReturnSwap_margin(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double gearing() {
    double ret = NQuantLibcPINVOKE.EquityTotalReturnSwap_gearing(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Calendar paymentCalendar() {
    Calendar ret = new Calendar(NQuantLibcPINVOKE.EquityTotalReturnSwap_paymentCalendar(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BusinessDayConvention paymentConvention() {
    BusinessDayConvention ret = (BusinessDayConvention)NQuantLibcPINVOKE.EquityTotalReturnSwap_paymentConvention(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint paymentDelay() {
    uint ret = NQuantLibcPINVOKE.EquityTotalReturnSwap_paymentDelay(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Leg equityLeg() {
    Leg ret = new Leg(NQuantLibcPINVOKE.EquityTotalReturnSwap_equityLeg(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Leg interestRateLeg() {
    Leg ret = new Leg(NQuantLibcPINVOKE.EquityTotalReturnSwap_interestRateLeg(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double equityLegNPV() {
    double ret = NQuantLibcPINVOKE.EquityTotalReturnSwap_equityLegNPV(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double interestRateLegNPV() {
    double ret = NQuantLibcPINVOKE.EquityTotalReturnSwap_interestRateLegNPV(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double fairMargin() {
    double ret = NQuantLibcPINVOKE.EquityTotalReturnSwap_fairMargin(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
