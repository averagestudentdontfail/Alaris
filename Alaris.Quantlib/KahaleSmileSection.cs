//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class KahaleSmileSection : SmileSection {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal KahaleSmileSection(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.KahaleSmileSection_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(KahaleSmileSection obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_KahaleSmileSection(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public KahaleSmileSection(SmileSection source, double atm, bool interpolate, bool exponentialExtrapolation, bool deleteArbitragePoints, DoubleVector moneynessGrid, double gap, int forcedLeftIndex, int forcedRightIndex) : this(NQuantLibcPINVOKE.new_KahaleSmileSection__SWIG_0(SmileSection.getCPtr(source), atm, interpolate, exponentialExtrapolation, deleteArbitragePoints, DoubleVector.getCPtr(moneynessGrid), gap, forcedLeftIndex, forcedRightIndex), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public KahaleSmileSection(SmileSection source, double atm, bool interpolate, bool exponentialExtrapolation, bool deleteArbitragePoints, DoubleVector moneynessGrid, double gap, int forcedLeftIndex) : this(NQuantLibcPINVOKE.new_KahaleSmileSection__SWIG_1(SmileSection.getCPtr(source), atm, interpolate, exponentialExtrapolation, deleteArbitragePoints, DoubleVector.getCPtr(moneynessGrid), gap, forcedLeftIndex), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public KahaleSmileSection(SmileSection source, double atm, bool interpolate, bool exponentialExtrapolation, bool deleteArbitragePoints, DoubleVector moneynessGrid, double gap) : this(NQuantLibcPINVOKE.new_KahaleSmileSection__SWIG_2(SmileSection.getCPtr(source), atm, interpolate, exponentialExtrapolation, deleteArbitragePoints, DoubleVector.getCPtr(moneynessGrid), gap), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public KahaleSmileSection(SmileSection source, double atm, bool interpolate, bool exponentialExtrapolation, bool deleteArbitragePoints, DoubleVector moneynessGrid) : this(NQuantLibcPINVOKE.new_KahaleSmileSection__SWIG_3(SmileSection.getCPtr(source), atm, interpolate, exponentialExtrapolation, deleteArbitragePoints, DoubleVector.getCPtr(moneynessGrid)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public KahaleSmileSection(SmileSection source, double atm, bool interpolate, bool exponentialExtrapolation, bool deleteArbitragePoints) : this(NQuantLibcPINVOKE.new_KahaleSmileSection__SWIG_4(SmileSection.getCPtr(source), atm, interpolate, exponentialExtrapolation, deleteArbitragePoints), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public KahaleSmileSection(SmileSection source, double atm, bool interpolate, bool exponentialExtrapolation) : this(NQuantLibcPINVOKE.new_KahaleSmileSection__SWIG_5(SmileSection.getCPtr(source), atm, interpolate, exponentialExtrapolation), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public KahaleSmileSection(SmileSection source, double atm, bool interpolate) : this(NQuantLibcPINVOKE.new_KahaleSmileSection__SWIG_6(SmileSection.getCPtr(source), atm, interpolate), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public KahaleSmileSection(SmileSection source, double atm) : this(NQuantLibcPINVOKE.new_KahaleSmileSection__SWIG_7(SmileSection.getCPtr(source), atm), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public KahaleSmileSection(SmileSection source) : this(NQuantLibcPINVOKE.new_KahaleSmileSection__SWIG_8(SmileSection.getCPtr(source)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

}
