//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class EvolutionDescription : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EvolutionDescription(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EvolutionDescription obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(EvolutionDescription obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~EvolutionDescription() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_EvolutionDescription(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public EvolutionDescription(DoubleVector rateTimes, DoubleVector evolutionTimes, UnsignedIntPairVector relevanceRates) : this(NQuantLibcPINVOKE.new_EvolutionDescription__SWIG_0(DoubleVector.getCPtr(rateTimes), DoubleVector.getCPtr(evolutionTimes), UnsignedIntPairVector.getCPtr(relevanceRates)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public EvolutionDescription(DoubleVector rateTimes, DoubleVector evolutionTimes) : this(NQuantLibcPINVOKE.new_EvolutionDescription__SWIG_1(DoubleVector.getCPtr(rateTimes), DoubleVector.getCPtr(evolutionTimes)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public EvolutionDescription(DoubleVector rateTimes) : this(NQuantLibcPINVOKE.new_EvolutionDescription__SWIG_2(DoubleVector.getCPtr(rateTimes)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public DoubleVector rateTimes() {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.EvolutionDescription_rateTimes(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector rateTaus() {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.EvolutionDescription_rateTaus(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector evolutionTimes() {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.EvolutionDescription_evolutionTimes(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UnsignedIntVector firstAliveRate() {
    UnsignedIntVector ret = new UnsignedIntVector(NQuantLibcPINVOKE.EvolutionDescription_firstAliveRate(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UnsignedIntPairVector relevanceRates() {
    UnsignedIntPairVector ret = new UnsignedIntPairVector(NQuantLibcPINVOKE.EvolutionDescription_relevanceRates(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint numberOfRates() {
    uint ret = NQuantLibcPINVOKE.EvolutionDescription_numberOfRates(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint numberOfSteps() {
    uint ret = NQuantLibcPINVOKE.EvolutionDescription_numberOfSteps(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
