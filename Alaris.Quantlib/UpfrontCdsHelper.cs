//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class UpfrontCdsHelper : DefaultProbabilityHelper {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal UpfrontCdsHelper(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.UpfrontCdsHelper_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UpfrontCdsHelper obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_UpfrontCdsHelper(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public UpfrontCdsHelper(QuoteHandle upfront, double spread, Period tenor, int settlementDays, Calendar calendar, Frequency frequency, BusinessDayConvention convention, DateGeneration.Rule rule, DayCounter dayCounter, double recoveryRate, YieldTermStructureHandle discountCurve, uint upfrontSettlementDays, bool settlesAccrual, bool paysAtDefaultTime, Date startDate, DayCounter lastPeriodDayCounter, bool rebatesAccrual, CreditDefaultSwap.PricingModel model) : this(NQuantLibcPINVOKE.new_UpfrontCdsHelper__SWIG_0(QuoteHandle.getCPtr(upfront), spread, Period.getCPtr(tenor), settlementDays, Calendar.getCPtr(calendar), (int)frequency, (int)convention, (int)rule, DayCounter.getCPtr(dayCounter), recoveryRate, YieldTermStructureHandle.getCPtr(discountCurve), upfrontSettlementDays, settlesAccrual, paysAtDefaultTime, Date.getCPtr(startDate), DayCounter.getCPtr(lastPeriodDayCounter), rebatesAccrual, (int)model), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public UpfrontCdsHelper(QuoteHandle upfront, double spread, Period tenor, int settlementDays, Calendar calendar, Frequency frequency, BusinessDayConvention convention, DateGeneration.Rule rule, DayCounter dayCounter, double recoveryRate, YieldTermStructureHandle discountCurve, uint upfrontSettlementDays, bool settlesAccrual, bool paysAtDefaultTime, Date startDate, DayCounter lastPeriodDayCounter, bool rebatesAccrual) : this(NQuantLibcPINVOKE.new_UpfrontCdsHelper__SWIG_1(QuoteHandle.getCPtr(upfront), spread, Period.getCPtr(tenor), settlementDays, Calendar.getCPtr(calendar), (int)frequency, (int)convention, (int)rule, DayCounter.getCPtr(dayCounter), recoveryRate, YieldTermStructureHandle.getCPtr(discountCurve), upfrontSettlementDays, settlesAccrual, paysAtDefaultTime, Date.getCPtr(startDate), DayCounter.getCPtr(lastPeriodDayCounter), rebatesAccrual), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public UpfrontCdsHelper(QuoteHandle upfront, double spread, Period tenor, int settlementDays, Calendar calendar, Frequency frequency, BusinessDayConvention convention, DateGeneration.Rule rule, DayCounter dayCounter, double recoveryRate, YieldTermStructureHandle discountCurve, uint upfrontSettlementDays, bool settlesAccrual, bool paysAtDefaultTime, Date startDate, DayCounter lastPeriodDayCounter) : this(NQuantLibcPINVOKE.new_UpfrontCdsHelper__SWIG_2(QuoteHandle.getCPtr(upfront), spread, Period.getCPtr(tenor), settlementDays, Calendar.getCPtr(calendar), (int)frequency, (int)convention, (int)rule, DayCounter.getCPtr(dayCounter), recoveryRate, YieldTermStructureHandle.getCPtr(discountCurve), upfrontSettlementDays, settlesAccrual, paysAtDefaultTime, Date.getCPtr(startDate), DayCounter.getCPtr(lastPeriodDayCounter)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public UpfrontCdsHelper(QuoteHandle upfront, double spread, Period tenor, int settlementDays, Calendar calendar, Frequency frequency, BusinessDayConvention convention, DateGeneration.Rule rule, DayCounter dayCounter, double recoveryRate, YieldTermStructureHandle discountCurve, uint upfrontSettlementDays, bool settlesAccrual, bool paysAtDefaultTime, Date startDate) : this(NQuantLibcPINVOKE.new_UpfrontCdsHelper__SWIG_3(QuoteHandle.getCPtr(upfront), spread, Period.getCPtr(tenor), settlementDays, Calendar.getCPtr(calendar), (int)frequency, (int)convention, (int)rule, DayCounter.getCPtr(dayCounter), recoveryRate, YieldTermStructureHandle.getCPtr(discountCurve), upfrontSettlementDays, settlesAccrual, paysAtDefaultTime, Date.getCPtr(startDate)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public UpfrontCdsHelper(QuoteHandle upfront, double spread, Period tenor, int settlementDays, Calendar calendar, Frequency frequency, BusinessDayConvention convention, DateGeneration.Rule rule, DayCounter dayCounter, double recoveryRate, YieldTermStructureHandle discountCurve, uint upfrontSettlementDays, bool settlesAccrual, bool paysAtDefaultTime) : this(NQuantLibcPINVOKE.new_UpfrontCdsHelper__SWIG_4(QuoteHandle.getCPtr(upfront), spread, Period.getCPtr(tenor), settlementDays, Calendar.getCPtr(calendar), (int)frequency, (int)convention, (int)rule, DayCounter.getCPtr(dayCounter), recoveryRate, YieldTermStructureHandle.getCPtr(discountCurve), upfrontSettlementDays, settlesAccrual, paysAtDefaultTime), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public UpfrontCdsHelper(QuoteHandle upfront, double spread, Period tenor, int settlementDays, Calendar calendar, Frequency frequency, BusinessDayConvention convention, DateGeneration.Rule rule, DayCounter dayCounter, double recoveryRate, YieldTermStructureHandle discountCurve, uint upfrontSettlementDays, bool settlesAccrual) : this(NQuantLibcPINVOKE.new_UpfrontCdsHelper__SWIG_5(QuoteHandle.getCPtr(upfront), spread, Period.getCPtr(tenor), settlementDays, Calendar.getCPtr(calendar), (int)frequency, (int)convention, (int)rule, DayCounter.getCPtr(dayCounter), recoveryRate, YieldTermStructureHandle.getCPtr(discountCurve), upfrontSettlementDays, settlesAccrual), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public UpfrontCdsHelper(QuoteHandle upfront, double spread, Period tenor, int settlementDays, Calendar calendar, Frequency frequency, BusinessDayConvention convention, DateGeneration.Rule rule, DayCounter dayCounter, double recoveryRate, YieldTermStructureHandle discountCurve, uint upfrontSettlementDays) : this(NQuantLibcPINVOKE.new_UpfrontCdsHelper__SWIG_6(QuoteHandle.getCPtr(upfront), spread, Period.getCPtr(tenor), settlementDays, Calendar.getCPtr(calendar), (int)frequency, (int)convention, (int)rule, DayCounter.getCPtr(dayCounter), recoveryRate, YieldTermStructureHandle.getCPtr(discountCurve), upfrontSettlementDays), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public UpfrontCdsHelper(QuoteHandle upfront, double spread, Period tenor, int settlementDays, Calendar calendar, Frequency frequency, BusinessDayConvention convention, DateGeneration.Rule rule, DayCounter dayCounter, double recoveryRate, YieldTermStructureHandle discountCurve) : this(NQuantLibcPINVOKE.new_UpfrontCdsHelper__SWIG_7(QuoteHandle.getCPtr(upfront), spread, Period.getCPtr(tenor), settlementDays, Calendar.getCPtr(calendar), (int)frequency, (int)convention, (int)rule, DayCounter.getCPtr(dayCounter), recoveryRate, YieldTermStructureHandle.getCPtr(discountCurve)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public UpfrontCdsHelper(double upfront, double spread, Period tenor, int settlementDays, Calendar calendar, Frequency frequency, BusinessDayConvention convention, DateGeneration.Rule rule, DayCounter dayCounter, double recoveryRate, YieldTermStructureHandle discountCurve, uint upfrontSettlementDays, bool settlesAccrual, bool paysAtDefaultTime, Date startDate, DayCounter lastPeriodDayCounter, bool rebatesAccrual, CreditDefaultSwap.PricingModel model) : this(NQuantLibcPINVOKE.new_UpfrontCdsHelper__SWIG_8(upfront, spread, Period.getCPtr(tenor), settlementDays, Calendar.getCPtr(calendar), (int)frequency, (int)convention, (int)rule, DayCounter.getCPtr(dayCounter), recoveryRate, YieldTermStructureHandle.getCPtr(discountCurve), upfrontSettlementDays, settlesAccrual, paysAtDefaultTime, Date.getCPtr(startDate), DayCounter.getCPtr(lastPeriodDayCounter), rebatesAccrual, (int)model), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public UpfrontCdsHelper(double upfront, double spread, Period tenor, int settlementDays, Calendar calendar, Frequency frequency, BusinessDayConvention convention, DateGeneration.Rule rule, DayCounter dayCounter, double recoveryRate, YieldTermStructureHandle discountCurve, uint upfrontSettlementDays, bool settlesAccrual, bool paysAtDefaultTime, Date startDate, DayCounter lastPeriodDayCounter, bool rebatesAccrual) : this(NQuantLibcPINVOKE.new_UpfrontCdsHelper__SWIG_9(upfront, spread, Period.getCPtr(tenor), settlementDays, Calendar.getCPtr(calendar), (int)frequency, (int)convention, (int)rule, DayCounter.getCPtr(dayCounter), recoveryRate, YieldTermStructureHandle.getCPtr(discountCurve), upfrontSettlementDays, settlesAccrual, paysAtDefaultTime, Date.getCPtr(startDate), DayCounter.getCPtr(lastPeriodDayCounter), rebatesAccrual), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public UpfrontCdsHelper(double upfront, double spread, Period tenor, int settlementDays, Calendar calendar, Frequency frequency, BusinessDayConvention convention, DateGeneration.Rule rule, DayCounter dayCounter, double recoveryRate, YieldTermStructureHandle discountCurve, uint upfrontSettlementDays, bool settlesAccrual, bool paysAtDefaultTime, Date startDate, DayCounter lastPeriodDayCounter) : this(NQuantLibcPINVOKE.new_UpfrontCdsHelper__SWIG_10(upfront, spread, Period.getCPtr(tenor), settlementDays, Calendar.getCPtr(calendar), (int)frequency, (int)convention, (int)rule, DayCounter.getCPtr(dayCounter), recoveryRate, YieldTermStructureHandle.getCPtr(discountCurve), upfrontSettlementDays, settlesAccrual, paysAtDefaultTime, Date.getCPtr(startDate), DayCounter.getCPtr(lastPeriodDayCounter)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public UpfrontCdsHelper(double upfront, double spread, Period tenor, int settlementDays, Calendar calendar, Frequency frequency, BusinessDayConvention convention, DateGeneration.Rule rule, DayCounter dayCounter, double recoveryRate, YieldTermStructureHandle discountCurve, uint upfrontSettlementDays, bool settlesAccrual, bool paysAtDefaultTime, Date startDate) : this(NQuantLibcPINVOKE.new_UpfrontCdsHelper__SWIG_11(upfront, spread, Period.getCPtr(tenor), settlementDays, Calendar.getCPtr(calendar), (int)frequency, (int)convention, (int)rule, DayCounter.getCPtr(dayCounter), recoveryRate, YieldTermStructureHandle.getCPtr(discountCurve), upfrontSettlementDays, settlesAccrual, paysAtDefaultTime, Date.getCPtr(startDate)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public UpfrontCdsHelper(double upfront, double spread, Period tenor, int settlementDays, Calendar calendar, Frequency frequency, BusinessDayConvention convention, DateGeneration.Rule rule, DayCounter dayCounter, double recoveryRate, YieldTermStructureHandle discountCurve, uint upfrontSettlementDays, bool settlesAccrual, bool paysAtDefaultTime) : this(NQuantLibcPINVOKE.new_UpfrontCdsHelper__SWIG_12(upfront, spread, Period.getCPtr(tenor), settlementDays, Calendar.getCPtr(calendar), (int)frequency, (int)convention, (int)rule, DayCounter.getCPtr(dayCounter), recoveryRate, YieldTermStructureHandle.getCPtr(discountCurve), upfrontSettlementDays, settlesAccrual, paysAtDefaultTime), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public UpfrontCdsHelper(double upfront, double spread, Period tenor, int settlementDays, Calendar calendar, Frequency frequency, BusinessDayConvention convention, DateGeneration.Rule rule, DayCounter dayCounter, double recoveryRate, YieldTermStructureHandle discountCurve, uint upfrontSettlementDays, bool settlesAccrual) : this(NQuantLibcPINVOKE.new_UpfrontCdsHelper__SWIG_13(upfront, spread, Period.getCPtr(tenor), settlementDays, Calendar.getCPtr(calendar), (int)frequency, (int)convention, (int)rule, DayCounter.getCPtr(dayCounter), recoveryRate, YieldTermStructureHandle.getCPtr(discountCurve), upfrontSettlementDays, settlesAccrual), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public UpfrontCdsHelper(double upfront, double spread, Period tenor, int settlementDays, Calendar calendar, Frequency frequency, BusinessDayConvention convention, DateGeneration.Rule rule, DayCounter dayCounter, double recoveryRate, YieldTermStructureHandle discountCurve, uint upfrontSettlementDays) : this(NQuantLibcPINVOKE.new_UpfrontCdsHelper__SWIG_14(upfront, spread, Period.getCPtr(tenor), settlementDays, Calendar.getCPtr(calendar), (int)frequency, (int)convention, (int)rule, DayCounter.getCPtr(dayCounter), recoveryRate, YieldTermStructureHandle.getCPtr(discountCurve), upfrontSettlementDays), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public UpfrontCdsHelper(double upfront, double spread, Period tenor, int settlementDays, Calendar calendar, Frequency frequency, BusinessDayConvention convention, DateGeneration.Rule rule, DayCounter dayCounter, double recoveryRate, YieldTermStructureHandle discountCurve) : this(NQuantLibcPINVOKE.new_UpfrontCdsHelper__SWIG_15(upfront, spread, Period.getCPtr(tenor), settlementDays, Calendar.getCPtr(calendar), (int)frequency, (int)convention, (int)rule, DayCounter.getCPtr(dayCounter), recoveryRate, YieldTermStructureHandle.getCPtr(discountCurve)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

}
