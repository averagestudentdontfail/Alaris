//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class DatedOISRateHelper : RateHelper {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal DatedOISRateHelper(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.DatedOISRateHelper_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DatedOISRateHelper obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_DatedOISRateHelper(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public DatedOISRateHelper(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, RateAveraging.Type averagingMethod, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, double overnightSpread, OptionalBool endOfMonth, OptionalFrequency fixedPaymentFrequency, Calendar fixedCalendar, uint lookbackDays, uint lockoutDays, bool applyObservationShift, FloatingRateCouponPricer pricer) : this(NQuantLibcPINVOKE.new_DatedOISRateHelper__SWIG_0(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, (int)averagingMethod, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), overnightSpread, OptionalBool.getCPtr(endOfMonth), OptionalFrequency.getCPtr(fixedPaymentFrequency), Calendar.getCPtr(fixedCalendar), lookbackDays, lockoutDays, applyObservationShift, FloatingRateCouponPricer.getCPtr(pricer)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public DatedOISRateHelper(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, RateAveraging.Type averagingMethod, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, double overnightSpread, OptionalBool endOfMonth, OptionalFrequency fixedPaymentFrequency, Calendar fixedCalendar, uint lookbackDays, uint lockoutDays, bool applyObservationShift) : this(NQuantLibcPINVOKE.new_DatedOISRateHelper__SWIG_1(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, (int)averagingMethod, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), overnightSpread, OptionalBool.getCPtr(endOfMonth), OptionalFrequency.getCPtr(fixedPaymentFrequency), Calendar.getCPtr(fixedCalendar), lookbackDays, lockoutDays, applyObservationShift), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public DatedOISRateHelper(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, RateAveraging.Type averagingMethod, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, double overnightSpread, OptionalBool endOfMonth, OptionalFrequency fixedPaymentFrequency, Calendar fixedCalendar, uint lookbackDays, uint lockoutDays) : this(NQuantLibcPINVOKE.new_DatedOISRateHelper__SWIG_2(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, (int)averagingMethod, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), overnightSpread, OptionalBool.getCPtr(endOfMonth), OptionalFrequency.getCPtr(fixedPaymentFrequency), Calendar.getCPtr(fixedCalendar), lookbackDays, lockoutDays), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public DatedOISRateHelper(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, RateAveraging.Type averagingMethod, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, double overnightSpread, OptionalBool endOfMonth, OptionalFrequency fixedPaymentFrequency, Calendar fixedCalendar, uint lookbackDays) : this(NQuantLibcPINVOKE.new_DatedOISRateHelper__SWIG_3(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, (int)averagingMethod, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), overnightSpread, OptionalBool.getCPtr(endOfMonth), OptionalFrequency.getCPtr(fixedPaymentFrequency), Calendar.getCPtr(fixedCalendar), lookbackDays), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public DatedOISRateHelper(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, RateAveraging.Type averagingMethod, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, double overnightSpread, OptionalBool endOfMonth, OptionalFrequency fixedPaymentFrequency, Calendar fixedCalendar) : this(NQuantLibcPINVOKE.new_DatedOISRateHelper__SWIG_4(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, (int)averagingMethod, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), overnightSpread, OptionalBool.getCPtr(endOfMonth), OptionalFrequency.getCPtr(fixedPaymentFrequency), Calendar.getCPtr(fixedCalendar)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public DatedOISRateHelper(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, RateAveraging.Type averagingMethod, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, double overnightSpread, OptionalBool endOfMonth, OptionalFrequency fixedPaymentFrequency) : this(NQuantLibcPINVOKE.new_DatedOISRateHelper__SWIG_5(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, (int)averagingMethod, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), overnightSpread, OptionalBool.getCPtr(endOfMonth), OptionalFrequency.getCPtr(fixedPaymentFrequency)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public DatedOISRateHelper(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, RateAveraging.Type averagingMethod, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, double overnightSpread, OptionalBool endOfMonth) : this(NQuantLibcPINVOKE.new_DatedOISRateHelper__SWIG_6(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, (int)averagingMethod, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), overnightSpread, OptionalBool.getCPtr(endOfMonth)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public DatedOISRateHelper(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, RateAveraging.Type averagingMethod, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, double overnightSpread) : this(NQuantLibcPINVOKE.new_DatedOISRateHelper__SWIG_7(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, (int)averagingMethod, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), overnightSpread), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public DatedOISRateHelper(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, RateAveraging.Type averagingMethod, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar) : this(NQuantLibcPINVOKE.new_DatedOISRateHelper__SWIG_8(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, (int)averagingMethod, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public DatedOISRateHelper(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, RateAveraging.Type averagingMethod, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency) : this(NQuantLibcPINVOKE.new_DatedOISRateHelper__SWIG_9(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, (int)averagingMethod, paymentLag, (int)paymentConvention, (int)paymentFrequency), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public DatedOISRateHelper(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, RateAveraging.Type averagingMethod, int paymentLag, BusinessDayConvention paymentConvention) : this(NQuantLibcPINVOKE.new_DatedOISRateHelper__SWIG_10(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, (int)averagingMethod, paymentLag, (int)paymentConvention), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public DatedOISRateHelper(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, RateAveraging.Type averagingMethod, int paymentLag) : this(NQuantLibcPINVOKE.new_DatedOISRateHelper__SWIG_11(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, (int)averagingMethod, paymentLag), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public DatedOISRateHelper(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, RateAveraging.Type averagingMethod) : this(NQuantLibcPINVOKE.new_DatedOISRateHelper__SWIG_12(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, (int)averagingMethod), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public DatedOISRateHelper(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates) : this(NQuantLibcPINVOKE.new_DatedOISRateHelper__SWIG_13(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public DatedOISRateHelper(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve) : this(NQuantLibcPINVOKE.new_DatedOISRateHelper__SWIG_14(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public DatedOISRateHelper(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index) : this(NQuantLibcPINVOKE.new_DatedOISRateHelper__SWIG_15(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap swap() {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.DatedOISRateHelper_swap(swigCPtr);
    OvernightIndexedSwap ret = (cPtr == global::System.IntPtr.Zero) ? null : new OvernightIndexedSwap(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
