//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class FdmLinearOpCompositeDelegate : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FdmLinearOpCompositeDelegate(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FdmLinearOpCompositeDelegate obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(FdmLinearOpCompositeDelegate obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~FdmLinearOpCompositeDelegate() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_FdmLinearOpCompositeDelegate(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual uint size() {
    uint ret = (SwigDerivedClassHasMethod("size", swigMethodTypes0) ? NQuantLibcPINVOKE.FdmLinearOpCompositeDelegate_sizeSwigExplicitFdmLinearOpCompositeDelegate(swigCPtr) : NQuantLibcPINVOKE.FdmLinearOpCompositeDelegate_size(swigCPtr));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setTime(double t1, double t2) {
    if (SwigDerivedClassHasMethod("setTime", swigMethodTypes1)) NQuantLibcPINVOKE.FdmLinearOpCompositeDelegate_setTimeSwigExplicitFdmLinearOpCompositeDelegate(swigCPtr, t1, t2); else NQuantLibcPINVOKE.FdmLinearOpCompositeDelegate_setTime(swigCPtr, t1, t2);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual QlArray apply(QlArray r) {
    QlArray ret = new QlArray((SwigDerivedClassHasMethod("apply", swigMethodTypes2) ? NQuantLibcPINVOKE.FdmLinearOpCompositeDelegate_applySwigExplicitFdmLinearOpCompositeDelegate(swigCPtr, QlArray.getCPtr(r)) : NQuantLibcPINVOKE.FdmLinearOpCompositeDelegate_apply(swigCPtr, QlArray.getCPtr(r))), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual QlArray apply_mixed(QlArray r) {
    QlArray ret = new QlArray((SwigDerivedClassHasMethod("apply_mixed", swigMethodTypes3) ? NQuantLibcPINVOKE.FdmLinearOpCompositeDelegate_apply_mixedSwigExplicitFdmLinearOpCompositeDelegate(swigCPtr, QlArray.getCPtr(r)) : NQuantLibcPINVOKE.FdmLinearOpCompositeDelegate_apply_mixed(swigCPtr, QlArray.getCPtr(r))), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual QlArray apply_direction(uint direction, QlArray r) {
    QlArray ret = new QlArray((SwigDerivedClassHasMethod("apply_direction", swigMethodTypes4) ? NQuantLibcPINVOKE.FdmLinearOpCompositeDelegate_apply_directionSwigExplicitFdmLinearOpCompositeDelegate(swigCPtr, direction, QlArray.getCPtr(r)) : NQuantLibcPINVOKE.FdmLinearOpCompositeDelegate_apply_direction(swigCPtr, direction, QlArray.getCPtr(r))), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual QlArray solve_splitting(uint direction, QlArray r, double s) {
    QlArray ret = new QlArray((SwigDerivedClassHasMethod("solve_splitting", swigMethodTypes5) ? NQuantLibcPINVOKE.FdmLinearOpCompositeDelegate_solve_splittingSwigExplicitFdmLinearOpCompositeDelegate(swigCPtr, direction, QlArray.getCPtr(r), s) : NQuantLibcPINVOKE.FdmLinearOpCompositeDelegate_solve_splitting(swigCPtr, direction, QlArray.getCPtr(r), s)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual QlArray preconditioner(QlArray r, double dt) {
    QlArray ret = new QlArray((SwigDerivedClassHasMethod("preconditioner", swigMethodTypes6) ? NQuantLibcPINVOKE.FdmLinearOpCompositeDelegate_preconditionerSwigExplicitFdmLinearOpCompositeDelegate(swigCPtr, QlArray.getCPtr(r), dt) : NQuantLibcPINVOKE.FdmLinearOpCompositeDelegate_preconditioner(swigCPtr, QlArray.getCPtr(r), dt)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FdmLinearOpCompositeDelegate() : this(NQuantLibcPINVOKE.new_FdmLinearOpCompositeDelegate(), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("size", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateFdmLinearOpCompositeDelegate_0(SwigDirectorMethodsize);
    if (SwigDerivedClassHasMethod("setTime", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateFdmLinearOpCompositeDelegate_1(SwigDirectorMethodsetTime);
    if (SwigDerivedClassHasMethod("apply", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateFdmLinearOpCompositeDelegate_2(SwigDirectorMethodapply);
    if (SwigDerivedClassHasMethod("apply_mixed", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateFdmLinearOpCompositeDelegate_3(SwigDirectorMethodapply_mixed);
    if (SwigDerivedClassHasMethod("apply_direction", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateFdmLinearOpCompositeDelegate_4(SwigDirectorMethodapply_direction);
    if (SwigDerivedClassHasMethod("solve_splitting", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateFdmLinearOpCompositeDelegate_5(SwigDirectorMethodsolve_splitting);
    if (SwigDerivedClassHasMethod("preconditioner", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateFdmLinearOpCompositeDelegate_6(SwigDirectorMethodpreconditioner);
    NQuantLibcPINVOKE.FdmLinearOpCompositeDelegate_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo[] methodInfos = this.GetType().GetMethods(
        global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance);
    foreach (global::System.Reflection.MethodInfo methodInfo in methodInfos) {
      if (methodInfo.DeclaringType == null)
        continue;

      if (methodInfo.Name != methodName)
        continue;

      var parameters = methodInfo.GetParameters();
      if (parameters.Length != methodTypes.Length)
        continue;

      bool parametersMatch = true;
      for (var i = 0; i < parameters.Length; i++) {
        if (parameters[i].ParameterType != methodTypes[i]) {
          parametersMatch = false;
          break;
        }
      }

      if (!parametersMatch)
        continue;

      if (methodInfo.IsVirtual && (methodInfo.DeclaringType.IsSubclassOf(typeof(FdmLinearOpCompositeDelegate))) &&
        methodInfo.DeclaringType != methodInfo.GetBaseDefinition().DeclaringType) {
        return true;
      }
    }

    return false;
  }

  private uint SwigDirectorMethodsize() {
    return size();
  }

  private void SwigDirectorMethodsetTime(double t1, double t2) {
    setTime(t1, t2);
  }

  private global::System.IntPtr SwigDirectorMethodapply(global::System.IntPtr r) {
    return QlArray.getCPtr(apply(new QlArray(r, false))).Handle;
  }

  private global::System.IntPtr SwigDirectorMethodapply_mixed(global::System.IntPtr r) {
    return QlArray.getCPtr(apply_mixed(new QlArray(r, false))).Handle;
  }

  private global::System.IntPtr SwigDirectorMethodapply_direction(uint direction, global::System.IntPtr r) {
    return QlArray.getCPtr(apply_direction(direction, new QlArray(r, false))).Handle;
  }

  private global::System.IntPtr SwigDirectorMethodsolve_splitting(uint direction, global::System.IntPtr r, double s) {
    return QlArray.getCPtr(solve_splitting(direction, new QlArray(r, false), s)).Handle;
  }

  private global::System.IntPtr SwigDirectorMethodpreconditioner(global::System.IntPtr r, double dt) {
    return QlArray.getCPtr(preconditioner(new QlArray(r, false), dt)).Handle;
  }

  public delegate uint SwigDelegateFdmLinearOpCompositeDelegate_0();
  public delegate void SwigDelegateFdmLinearOpCompositeDelegate_1(double t1, double t2);
  public delegate global::System.IntPtr SwigDelegateFdmLinearOpCompositeDelegate_2(global::System.IntPtr r);
  public delegate global::System.IntPtr SwigDelegateFdmLinearOpCompositeDelegate_3(global::System.IntPtr r);
  public delegate global::System.IntPtr SwigDelegateFdmLinearOpCompositeDelegate_4(uint direction, global::System.IntPtr r);
  public delegate global::System.IntPtr SwigDelegateFdmLinearOpCompositeDelegate_5(uint direction, global::System.IntPtr r, double s);
  public delegate global::System.IntPtr SwigDelegateFdmLinearOpCompositeDelegate_6(global::System.IntPtr r, double dt);

  private SwigDelegateFdmLinearOpCompositeDelegate_0 swigDelegate0;
  private SwigDelegateFdmLinearOpCompositeDelegate_1 swigDelegate1;
  private SwigDelegateFdmLinearOpCompositeDelegate_2 swigDelegate2;
  private SwigDelegateFdmLinearOpCompositeDelegate_3 swigDelegate3;
  private SwigDelegateFdmLinearOpCompositeDelegate_4 swigDelegate4;
  private SwigDelegateFdmLinearOpCompositeDelegate_5 swigDelegate5;
  private SwigDelegateFdmLinearOpCompositeDelegate_6 swigDelegate6;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(double), typeof(double) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(QlArray) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(QlArray) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(uint), typeof(QlArray) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(uint), typeof(QlArray), typeof(double) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(QlArray), typeof(double) };
}
