//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Period : global::System.IDisposable, global::System.IEquatable<Period>, global::System.IComparable, global::System.IComparable<Period> {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Period(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Period obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Period obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Period() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_Period(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public override string ToString() {
    return this.__str__();
  }

  public override int GetHashCode() {
    return normalized().ToString().GetHashCode();
  }

  public int CompareTo(object obj) {
    if (obj != null && !(obj is Period))
      throw new global::System.ArgumentException("Object must be of type Period.");

    return CompareTo(obj as Period);
  }

  public int CompareTo(Period other) {
    // All instances are greater than null
    if (object.ReferenceEquals(other, null))
      return 1;
    else
      return Period.compareTo(this, other);
  }

  public override bool Equals(object obj) {
    return (obj != null) && (obj is Period) && Equals(obj as Period);
  }

  public bool Equals(Period other) {
    return (this == other);
  }

  public static bool operator==(Period lhs, Period rhs) {
    var lhsObject = (object)lhs;
    var rhsObject = (object)rhs;

    // null == null
    if (lhsObject == null && rhsObject == null)
      return true;

    // null != (!null)
    if (lhsObject == null || rhsObject == null)
      return false;

    return lhs.CompareTo(rhs) == 0;
  }

  public static bool operator!=(Period lhs, Period rhs) {
    return !(lhs == rhs);
  }

  public static bool operator<(Period lhs, Period rhs) {
    var lhsObject = (object)lhs;
    var rhsObject = (object)rhs;

    // null == null, therefore (null < null) == false
    if (lhsObject == null && rhsObject == null)
      return false;

    // All instances are greater than null
    if (lhsObject == null)
      return true;

    return lhs.CompareTo(rhs) < 0;
  }

  public static bool operator<=(Period lhs, Period rhs) {
    return (lhs < rhs) || (lhs == rhs);
  }

  public static bool operator>(Period lhs, Period rhs) {
    return !(lhs <= rhs);
  }

  public static bool operator>=(Period lhs, Period rhs) {
    return !(lhs < rhs);
  }

  public Period() : this(NQuantLibcPINVOKE.new_Period__SWIG_0(), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public Period(int n, TimeUnit units) : this(NQuantLibcPINVOKE.new_Period__SWIG_1(n, (int)units), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public Period(Frequency arg0) : this(NQuantLibcPINVOKE.new_Period__SWIG_2((int)arg0), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public int length() {
    int ret = NQuantLibcPINVOKE.Period_length(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TimeUnit units() {
    TimeUnit ret = (TimeUnit)NQuantLibcPINVOKE.Period_units(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Frequency frequency() {
    Frequency ret = (Frequency)NQuantLibcPINVOKE.Period_frequency(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Period normalized() {
    Period ret = new Period(NQuantLibcPINVOKE.Period_normalized(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Period(string str) : this(NQuantLibcPINVOKE.new_Period__SWIG_3(str), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public string __str__() {
    string ret = NQuantLibcPINVOKE.Period___str__(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string __repr__() {
    string ret = NQuantLibcPINVOKE.Period___repr__(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int compareTo(Period lhs, Period rhs) {
    int ret = NQuantLibcPINVOKE.Period_compareTo(Period.getCPtr(lhs), Period.getCPtr(rhs));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
