//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class OvernightIndexedSwap : FixedVsFloatingSwap {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal OvernightIndexedSwap(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.OvernightIndexedSwap_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OvernightIndexedSwap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_OvernightIndexedSwap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public OvernightIndexedSwap(Swap.Type type, double nominal, Schedule schedule, double fixedRate, DayCounter fixedDC, OvernightIndex index, double spread, int paymentLag, BusinessDayConvention paymentAdjustment, Calendar paymentCalendar, bool telescopicValueDates, RateAveraging.Type averagingMethod, uint lookbackDays, uint lockoutDays, bool applyObservationShift) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_0((int)type, nominal, Schedule.getCPtr(schedule), fixedRate, DayCounter.getCPtr(fixedDC), OvernightIndex.getCPtr(index), spread, paymentLag, (int)paymentAdjustment, Calendar.getCPtr(paymentCalendar), telescopicValueDates, (int)averagingMethod, lookbackDays, lockoutDays, applyObservationShift), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, double nominal, Schedule schedule, double fixedRate, DayCounter fixedDC, OvernightIndex index, double spread, int paymentLag, BusinessDayConvention paymentAdjustment, Calendar paymentCalendar, bool telescopicValueDates, RateAveraging.Type averagingMethod, uint lookbackDays, uint lockoutDays) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_1((int)type, nominal, Schedule.getCPtr(schedule), fixedRate, DayCounter.getCPtr(fixedDC), OvernightIndex.getCPtr(index), spread, paymentLag, (int)paymentAdjustment, Calendar.getCPtr(paymentCalendar), telescopicValueDates, (int)averagingMethod, lookbackDays, lockoutDays), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, double nominal, Schedule schedule, double fixedRate, DayCounter fixedDC, OvernightIndex index, double spread, int paymentLag, BusinessDayConvention paymentAdjustment, Calendar paymentCalendar, bool telescopicValueDates, RateAveraging.Type averagingMethod, uint lookbackDays) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_2((int)type, nominal, Schedule.getCPtr(schedule), fixedRate, DayCounter.getCPtr(fixedDC), OvernightIndex.getCPtr(index), spread, paymentLag, (int)paymentAdjustment, Calendar.getCPtr(paymentCalendar), telescopicValueDates, (int)averagingMethod, lookbackDays), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, double nominal, Schedule schedule, double fixedRate, DayCounter fixedDC, OvernightIndex index, double spread, int paymentLag, BusinessDayConvention paymentAdjustment, Calendar paymentCalendar, bool telescopicValueDates, RateAveraging.Type averagingMethod) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_3((int)type, nominal, Schedule.getCPtr(schedule), fixedRate, DayCounter.getCPtr(fixedDC), OvernightIndex.getCPtr(index), spread, paymentLag, (int)paymentAdjustment, Calendar.getCPtr(paymentCalendar), telescopicValueDates, (int)averagingMethod), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, double nominal, Schedule schedule, double fixedRate, DayCounter fixedDC, OvernightIndex index, double spread, int paymentLag, BusinessDayConvention paymentAdjustment, Calendar paymentCalendar, bool telescopicValueDates) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_4((int)type, nominal, Schedule.getCPtr(schedule), fixedRate, DayCounter.getCPtr(fixedDC), OvernightIndex.getCPtr(index), spread, paymentLag, (int)paymentAdjustment, Calendar.getCPtr(paymentCalendar), telescopicValueDates), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, double nominal, Schedule schedule, double fixedRate, DayCounter fixedDC, OvernightIndex index, double spread, int paymentLag, BusinessDayConvention paymentAdjustment, Calendar paymentCalendar) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_5((int)type, nominal, Schedule.getCPtr(schedule), fixedRate, DayCounter.getCPtr(fixedDC), OvernightIndex.getCPtr(index), spread, paymentLag, (int)paymentAdjustment, Calendar.getCPtr(paymentCalendar)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, double nominal, Schedule schedule, double fixedRate, DayCounter fixedDC, OvernightIndex index, double spread, int paymentLag, BusinessDayConvention paymentAdjustment) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_6((int)type, nominal, Schedule.getCPtr(schedule), fixedRate, DayCounter.getCPtr(fixedDC), OvernightIndex.getCPtr(index), spread, paymentLag, (int)paymentAdjustment), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, double nominal, Schedule schedule, double fixedRate, DayCounter fixedDC, OvernightIndex index, double spread, int paymentLag) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_7((int)type, nominal, Schedule.getCPtr(schedule), fixedRate, DayCounter.getCPtr(fixedDC), OvernightIndex.getCPtr(index), spread, paymentLag), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, double nominal, Schedule schedule, double fixedRate, DayCounter fixedDC, OvernightIndex index, double spread) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_8((int)type, nominal, Schedule.getCPtr(schedule), fixedRate, DayCounter.getCPtr(fixedDC), OvernightIndex.getCPtr(index), spread), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, double nominal, Schedule schedule, double fixedRate, DayCounter fixedDC, OvernightIndex index) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_9((int)type, nominal, Schedule.getCPtr(schedule), fixedRate, DayCounter.getCPtr(fixedDC), OvernightIndex.getCPtr(index)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, DoubleVector nominals, Schedule schedule, double fixedRate, DayCounter fixedDC, OvernightIndex index, double spread, int paymentLag, BusinessDayConvention paymentAdjustment, Calendar paymentCalendar, bool telescopicValueDates, RateAveraging.Type averagingMethod, uint lookbackDays, uint lockoutDays, bool applyObservationShift) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_10((int)type, DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), fixedRate, DayCounter.getCPtr(fixedDC), OvernightIndex.getCPtr(index), spread, paymentLag, (int)paymentAdjustment, Calendar.getCPtr(paymentCalendar), telescopicValueDates, (int)averagingMethod, lookbackDays, lockoutDays, applyObservationShift), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, DoubleVector nominals, Schedule schedule, double fixedRate, DayCounter fixedDC, OvernightIndex index, double spread, int paymentLag, BusinessDayConvention paymentAdjustment, Calendar paymentCalendar, bool telescopicValueDates, RateAveraging.Type averagingMethod, uint lookbackDays, uint lockoutDays) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_11((int)type, DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), fixedRate, DayCounter.getCPtr(fixedDC), OvernightIndex.getCPtr(index), spread, paymentLag, (int)paymentAdjustment, Calendar.getCPtr(paymentCalendar), telescopicValueDates, (int)averagingMethod, lookbackDays, lockoutDays), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, DoubleVector nominals, Schedule schedule, double fixedRate, DayCounter fixedDC, OvernightIndex index, double spread, int paymentLag, BusinessDayConvention paymentAdjustment, Calendar paymentCalendar, bool telescopicValueDates, RateAveraging.Type averagingMethod, uint lookbackDays) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_12((int)type, DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), fixedRate, DayCounter.getCPtr(fixedDC), OvernightIndex.getCPtr(index), spread, paymentLag, (int)paymentAdjustment, Calendar.getCPtr(paymentCalendar), telescopicValueDates, (int)averagingMethod, lookbackDays), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, DoubleVector nominals, Schedule schedule, double fixedRate, DayCounter fixedDC, OvernightIndex index, double spread, int paymentLag, BusinessDayConvention paymentAdjustment, Calendar paymentCalendar, bool telescopicValueDates, RateAveraging.Type averagingMethod) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_13((int)type, DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), fixedRate, DayCounter.getCPtr(fixedDC), OvernightIndex.getCPtr(index), spread, paymentLag, (int)paymentAdjustment, Calendar.getCPtr(paymentCalendar), telescopicValueDates, (int)averagingMethod), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, DoubleVector nominals, Schedule schedule, double fixedRate, DayCounter fixedDC, OvernightIndex index, double spread, int paymentLag, BusinessDayConvention paymentAdjustment, Calendar paymentCalendar, bool telescopicValueDates) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_14((int)type, DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), fixedRate, DayCounter.getCPtr(fixedDC), OvernightIndex.getCPtr(index), spread, paymentLag, (int)paymentAdjustment, Calendar.getCPtr(paymentCalendar), telescopicValueDates), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, DoubleVector nominals, Schedule schedule, double fixedRate, DayCounter fixedDC, OvernightIndex index, double spread, int paymentLag, BusinessDayConvention paymentAdjustment, Calendar paymentCalendar) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_15((int)type, DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), fixedRate, DayCounter.getCPtr(fixedDC), OvernightIndex.getCPtr(index), spread, paymentLag, (int)paymentAdjustment, Calendar.getCPtr(paymentCalendar)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, DoubleVector nominals, Schedule schedule, double fixedRate, DayCounter fixedDC, OvernightIndex index, double spread, int paymentLag, BusinessDayConvention paymentAdjustment) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_16((int)type, DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), fixedRate, DayCounter.getCPtr(fixedDC), OvernightIndex.getCPtr(index), spread, paymentLag, (int)paymentAdjustment), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, DoubleVector nominals, Schedule schedule, double fixedRate, DayCounter fixedDC, OvernightIndex index, double spread, int paymentLag) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_17((int)type, DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), fixedRate, DayCounter.getCPtr(fixedDC), OvernightIndex.getCPtr(index), spread, paymentLag), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, DoubleVector nominals, Schedule schedule, double fixedRate, DayCounter fixedDC, OvernightIndex index, double spread) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_18((int)type, DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), fixedRate, DayCounter.getCPtr(fixedDC), OvernightIndex.getCPtr(index), spread), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, DoubleVector nominals, Schedule schedule, double fixedRate, DayCounter fixedDC, OvernightIndex index) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_19((int)type, DoubleVector.getCPtr(nominals), Schedule.getCPtr(schedule), fixedRate, DayCounter.getCPtr(fixedDC), OvernightIndex.getCPtr(index)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, DoubleVector fixedNominals, Schedule fixedSchedule, double fixedRate, DayCounter fixedDC, DoubleVector overnightNominals, Schedule overnightSchedule, OvernightIndex overnightIndex, double spread, int paymentLag, BusinessDayConvention paymentAdjustment, Calendar paymentCalendar, bool telescopicValueDates, RateAveraging.Type averagingMethod, uint lookbackDays, uint lockoutDays, bool applyObservationShift) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_20((int)type, DoubleVector.getCPtr(fixedNominals), Schedule.getCPtr(fixedSchedule), fixedRate, DayCounter.getCPtr(fixedDC), DoubleVector.getCPtr(overnightNominals), Schedule.getCPtr(overnightSchedule), OvernightIndex.getCPtr(overnightIndex), spread, paymentLag, (int)paymentAdjustment, Calendar.getCPtr(paymentCalendar), telescopicValueDates, (int)averagingMethod, lookbackDays, lockoutDays, applyObservationShift), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, DoubleVector fixedNominals, Schedule fixedSchedule, double fixedRate, DayCounter fixedDC, DoubleVector overnightNominals, Schedule overnightSchedule, OvernightIndex overnightIndex, double spread, int paymentLag, BusinessDayConvention paymentAdjustment, Calendar paymentCalendar, bool telescopicValueDates, RateAveraging.Type averagingMethod, uint lookbackDays, uint lockoutDays) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_21((int)type, DoubleVector.getCPtr(fixedNominals), Schedule.getCPtr(fixedSchedule), fixedRate, DayCounter.getCPtr(fixedDC), DoubleVector.getCPtr(overnightNominals), Schedule.getCPtr(overnightSchedule), OvernightIndex.getCPtr(overnightIndex), spread, paymentLag, (int)paymentAdjustment, Calendar.getCPtr(paymentCalendar), telescopicValueDates, (int)averagingMethod, lookbackDays, lockoutDays), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, DoubleVector fixedNominals, Schedule fixedSchedule, double fixedRate, DayCounter fixedDC, DoubleVector overnightNominals, Schedule overnightSchedule, OvernightIndex overnightIndex, double spread, int paymentLag, BusinessDayConvention paymentAdjustment, Calendar paymentCalendar, bool telescopicValueDates, RateAveraging.Type averagingMethod, uint lookbackDays) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_22((int)type, DoubleVector.getCPtr(fixedNominals), Schedule.getCPtr(fixedSchedule), fixedRate, DayCounter.getCPtr(fixedDC), DoubleVector.getCPtr(overnightNominals), Schedule.getCPtr(overnightSchedule), OvernightIndex.getCPtr(overnightIndex), spread, paymentLag, (int)paymentAdjustment, Calendar.getCPtr(paymentCalendar), telescopicValueDates, (int)averagingMethod, lookbackDays), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, DoubleVector fixedNominals, Schedule fixedSchedule, double fixedRate, DayCounter fixedDC, DoubleVector overnightNominals, Schedule overnightSchedule, OvernightIndex overnightIndex, double spread, int paymentLag, BusinessDayConvention paymentAdjustment, Calendar paymentCalendar, bool telescopicValueDates, RateAveraging.Type averagingMethod) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_23((int)type, DoubleVector.getCPtr(fixedNominals), Schedule.getCPtr(fixedSchedule), fixedRate, DayCounter.getCPtr(fixedDC), DoubleVector.getCPtr(overnightNominals), Schedule.getCPtr(overnightSchedule), OvernightIndex.getCPtr(overnightIndex), spread, paymentLag, (int)paymentAdjustment, Calendar.getCPtr(paymentCalendar), telescopicValueDates, (int)averagingMethod), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, DoubleVector fixedNominals, Schedule fixedSchedule, double fixedRate, DayCounter fixedDC, DoubleVector overnightNominals, Schedule overnightSchedule, OvernightIndex overnightIndex, double spread, int paymentLag, BusinessDayConvention paymentAdjustment, Calendar paymentCalendar, bool telescopicValueDates) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_24((int)type, DoubleVector.getCPtr(fixedNominals), Schedule.getCPtr(fixedSchedule), fixedRate, DayCounter.getCPtr(fixedDC), DoubleVector.getCPtr(overnightNominals), Schedule.getCPtr(overnightSchedule), OvernightIndex.getCPtr(overnightIndex), spread, paymentLag, (int)paymentAdjustment, Calendar.getCPtr(paymentCalendar), telescopicValueDates), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, DoubleVector fixedNominals, Schedule fixedSchedule, double fixedRate, DayCounter fixedDC, DoubleVector overnightNominals, Schedule overnightSchedule, OvernightIndex overnightIndex, double spread, int paymentLag, BusinessDayConvention paymentAdjustment, Calendar paymentCalendar) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_25((int)type, DoubleVector.getCPtr(fixedNominals), Schedule.getCPtr(fixedSchedule), fixedRate, DayCounter.getCPtr(fixedDC), DoubleVector.getCPtr(overnightNominals), Schedule.getCPtr(overnightSchedule), OvernightIndex.getCPtr(overnightIndex), spread, paymentLag, (int)paymentAdjustment, Calendar.getCPtr(paymentCalendar)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, DoubleVector fixedNominals, Schedule fixedSchedule, double fixedRate, DayCounter fixedDC, DoubleVector overnightNominals, Schedule overnightSchedule, OvernightIndex overnightIndex, double spread, int paymentLag, BusinessDayConvention paymentAdjustment) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_26((int)type, DoubleVector.getCPtr(fixedNominals), Schedule.getCPtr(fixedSchedule), fixedRate, DayCounter.getCPtr(fixedDC), DoubleVector.getCPtr(overnightNominals), Schedule.getCPtr(overnightSchedule), OvernightIndex.getCPtr(overnightIndex), spread, paymentLag, (int)paymentAdjustment), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, DoubleVector fixedNominals, Schedule fixedSchedule, double fixedRate, DayCounter fixedDC, DoubleVector overnightNominals, Schedule overnightSchedule, OvernightIndex overnightIndex, double spread, int paymentLag) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_27((int)type, DoubleVector.getCPtr(fixedNominals), Schedule.getCPtr(fixedSchedule), fixedRate, DayCounter.getCPtr(fixedDC), DoubleVector.getCPtr(overnightNominals), Schedule.getCPtr(overnightSchedule), OvernightIndex.getCPtr(overnightIndex), spread, paymentLag), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, DoubleVector fixedNominals, Schedule fixedSchedule, double fixedRate, DayCounter fixedDC, DoubleVector overnightNominals, Schedule overnightSchedule, OvernightIndex overnightIndex, double spread) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_28((int)type, DoubleVector.getCPtr(fixedNominals), Schedule.getCPtr(fixedSchedule), fixedRate, DayCounter.getCPtr(fixedDC), DoubleVector.getCPtr(overnightNominals), Schedule.getCPtr(overnightSchedule), OvernightIndex.getCPtr(overnightIndex), spread), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedSwap(Swap.Type type, DoubleVector fixedNominals, Schedule fixedSchedule, double fixedRate, DayCounter fixedDC, DoubleVector overnightNominals, Schedule overnightSchedule, OvernightIndex overnightIndex) : this(NQuantLibcPINVOKE.new_OvernightIndexedSwap__SWIG_29((int)type, DoubleVector.getCPtr(fixedNominals), Schedule.getCPtr(fixedSchedule), fixedRate, DayCounter.getCPtr(fixedDC), DoubleVector.getCPtr(overnightNominals), Schedule.getCPtr(overnightSchedule), OvernightIndex.getCPtr(overnightIndex)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public double overnightLegBPS() {
    double ret = NQuantLibcPINVOKE.OvernightIndexedSwap_overnightLegBPS(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double overnightLegNPV() {
    double ret = NQuantLibcPINVOKE.OvernightIndexedSwap_overnightLegNPV(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Frequency paymentFrequency() {
    Frequency ret = (Frequency)NQuantLibcPINVOKE.OvernightIndexedSwap_paymentFrequency(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public OvernightIndex overnightIndex() {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.OvernightIndexedSwap_overnightIndex(swigCPtr);
    OvernightIndex ret = (cPtr == global::System.IntPtr.Zero) ? null : new OvernightIndex(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Leg overnightLeg() {
    Leg ret = new Leg(NQuantLibcPINVOKE.OvernightIndexedSwap_overnightLeg(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RateAveraging.Type averagingMethod() {
    RateAveraging.Type ret = (RateAveraging.Type)NQuantLibcPINVOKE.OvernightIndexedSwap_averagingMethod(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint lookbackDays() {
    uint ret = NQuantLibcPINVOKE.OvernightIndexedSwap_lookbackDays(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint lockoutDays() {
    uint ret = NQuantLibcPINVOKE.OvernightIndexedSwap_lockoutDays(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool applyObservationShift() {
    bool ret = NQuantLibcPINVOKE.OvernightIndexedSwap_applyObservationShift(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
