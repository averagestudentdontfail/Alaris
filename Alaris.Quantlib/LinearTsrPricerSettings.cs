//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class LinearTsrPricerSettings : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LinearTsrPricerSettings(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LinearTsrPricerSettings obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(LinearTsrPricerSettings obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~LinearTsrPricerSettings() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_LinearTsrPricerSettings(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public LinearTsrPricerSettings() : this(NQuantLibcPINVOKE.new_LinearTsrPricerSettings(), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public LinearTsrPricerSettings withRateBound(double lowerRateBound, double upperRateBound) {
    LinearTsrPricerSettings ret = new LinearTsrPricerSettings(NQuantLibcPINVOKE.LinearTsrPricerSettings_withRateBound__SWIG_0(swigCPtr, lowerRateBound, upperRateBound), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public LinearTsrPricerSettings withRateBound(double lowerRateBound) {
    LinearTsrPricerSettings ret = new LinearTsrPricerSettings(NQuantLibcPINVOKE.LinearTsrPricerSettings_withRateBound__SWIG_1(swigCPtr, lowerRateBound), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public LinearTsrPricerSettings withRateBound() {
    LinearTsrPricerSettings ret = new LinearTsrPricerSettings(NQuantLibcPINVOKE.LinearTsrPricerSettings_withRateBound__SWIG_2(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public LinearTsrPricerSettings withVegaRatio(double vegaRatio) {
    LinearTsrPricerSettings ret = new LinearTsrPricerSettings(NQuantLibcPINVOKE.LinearTsrPricerSettings_withVegaRatio__SWIG_0(swigCPtr, vegaRatio), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public LinearTsrPricerSettings withVegaRatio() {
    LinearTsrPricerSettings ret = new LinearTsrPricerSettings(NQuantLibcPINVOKE.LinearTsrPricerSettings_withVegaRatio__SWIG_1(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public LinearTsrPricerSettings withVegaRatio(double vegaRatio, double lowerRateBound, double upperRateBound) {
    LinearTsrPricerSettings ret = new LinearTsrPricerSettings(NQuantLibcPINVOKE.LinearTsrPricerSettings_withVegaRatio__SWIG_2(swigCPtr, vegaRatio, lowerRateBound, upperRateBound), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public LinearTsrPricerSettings withPriceThreshold(double priceThreshold) {
    LinearTsrPricerSettings ret = new LinearTsrPricerSettings(NQuantLibcPINVOKE.LinearTsrPricerSettings_withPriceThreshold__SWIG_0(swigCPtr, priceThreshold), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public LinearTsrPricerSettings withPriceThreshold() {
    LinearTsrPricerSettings ret = new LinearTsrPricerSettings(NQuantLibcPINVOKE.LinearTsrPricerSettings_withPriceThreshold__SWIG_1(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public LinearTsrPricerSettings withPriceThreshold(double priceThreshold, double lowerRateBound, double upperRateBound) {
    LinearTsrPricerSettings ret = new LinearTsrPricerSettings(NQuantLibcPINVOKE.LinearTsrPricerSettings_withPriceThreshold__SWIG_2(swigCPtr, priceThreshold, lowerRateBound, upperRateBound), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public LinearTsrPricerSettings withBSStdDevs(double stdDevs) {
    LinearTsrPricerSettings ret = new LinearTsrPricerSettings(NQuantLibcPINVOKE.LinearTsrPricerSettings_withBSStdDevs__SWIG_0(swigCPtr, stdDevs), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public LinearTsrPricerSettings withBSStdDevs() {
    LinearTsrPricerSettings ret = new LinearTsrPricerSettings(NQuantLibcPINVOKE.LinearTsrPricerSettings_withBSStdDevs__SWIG_1(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public LinearTsrPricerSettings withBSStdDevs(double stdDevs, double lowerRateBound, double upperRateBound) {
    LinearTsrPricerSettings ret = new LinearTsrPricerSettings(NQuantLibcPINVOKE.LinearTsrPricerSettings_withBSStdDevs__SWIG_2(swigCPtr, stdDevs, lowerRateBound, upperRateBound), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum Strategy {
    RateBound,
    VegaRatio,
    PriceThreshold,
    BSStdDevs
  }

}
