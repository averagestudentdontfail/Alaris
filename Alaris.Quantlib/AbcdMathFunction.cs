//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class AbcdMathFunction : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AbcdMathFunction(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AbcdMathFunction obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(AbcdMathFunction obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~AbcdMathFunction() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_AbcdMathFunction(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public AbcdMathFunction(double a, double b, double c, double d) : this(NQuantLibcPINVOKE.new_AbcdMathFunction__SWIG_0(a, b, c, d), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AbcdMathFunction(double a, double b, double c) : this(NQuantLibcPINVOKE.new_AbcdMathFunction__SWIG_1(a, b, c), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AbcdMathFunction(double a, double b) : this(NQuantLibcPINVOKE.new_AbcdMathFunction__SWIG_2(a, b), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AbcdMathFunction(double a) : this(NQuantLibcPINVOKE.new_AbcdMathFunction__SWIG_3(a), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AbcdMathFunction() : this(NQuantLibcPINVOKE.new_AbcdMathFunction__SWIG_4(), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AbcdMathFunction(DoubleVector abcd) : this(NQuantLibcPINVOKE.new_AbcdMathFunction__SWIG_5(DoubleVector.getCPtr(abcd)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public double call(double t) {
    double ret = NQuantLibcPINVOKE.AbcdMathFunction_call(swigCPtr, t);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double maximumLocation() {
    double ret = NQuantLibcPINVOKE.AbcdMathFunction_maximumLocation(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double maximumValue() {
    double ret = NQuantLibcPINVOKE.AbcdMathFunction_maximumValue(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double longTermValue() {
    double ret = NQuantLibcPINVOKE.AbcdMathFunction_longTermValue(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double derivative(double t) {
    double ret = NQuantLibcPINVOKE.AbcdMathFunction_derivative(swigCPtr, t);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double primitive(double t) {
    double ret = NQuantLibcPINVOKE.AbcdMathFunction_primitive(swigCPtr, t);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double definiteIntegral(double t1, double t2) {
    double ret = NQuantLibcPINVOKE.AbcdMathFunction_definiteIntegral(swigCPtr, t1, t2);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double a() {
    double ret = NQuantLibcPINVOKE.AbcdMathFunction_a(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double b() {
    double ret = NQuantLibcPINVOKE.AbcdMathFunction_b(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double c() {
    double ret = NQuantLibcPINVOKE.AbcdMathFunction_c(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double d() {
    double ret = NQuantLibcPINVOKE.AbcdMathFunction_d(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector coefficients() {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.AbcdMathFunction_coefficients(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector derivativeCoefficients() {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.AbcdMathFunction_derivativeCoefficients(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector definiteIntegralCoefficients(double t, double t2) {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.AbcdMathFunction_definiteIntegralCoefficients(swigCPtr, t, t2), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector definiteDerivativeCoefficients(double t, double t2) {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.AbcdMathFunction_definiteDerivativeCoefficients(swigCPtr, t, t2), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void validate(double a, double b, double c, double d) {
    NQuantLibcPINVOKE.AbcdMathFunction_validate(a, b, c, d);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

}
