//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class OISRateHelper : RateHelper {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal OISRateHelper(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.OISRateHelper_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OISRateHelper obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_OISRateHelper(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public OISRateHelper(uint settlementDays, Period tenor, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, Period forwardStart, double overnightSpread, Pillar.Choice pillar, Date customPillarDate, RateAveraging.Type averagingMethod, OptionalBool endOfMonth, OptionalFrequency fixedPaymentFrequency, Calendar fixedCalendar, uint lookbackDays, uint lockoutDays, bool applyObservationShift, FloatingRateCouponPricer pricer, DateGeneration.Rule rule, Calendar overnightCalendar) : this(NQuantLibcPINVOKE.new_OISRateHelper__SWIG_0(settlementDays, Period.getCPtr(tenor), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), Period.getCPtr(forwardStart), overnightSpread, (int)pillar, Date.getCPtr(customPillarDate), (int)averagingMethod, OptionalBool.getCPtr(endOfMonth), OptionalFrequency.getCPtr(fixedPaymentFrequency), Calendar.getCPtr(fixedCalendar), lookbackDays, lockoutDays, applyObservationShift, FloatingRateCouponPricer.getCPtr(pricer), (int)rule, Calendar.getCPtr(overnightCalendar)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OISRateHelper(uint settlementDays, Period tenor, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, Period forwardStart, double overnightSpread, Pillar.Choice pillar, Date customPillarDate, RateAveraging.Type averagingMethod, OptionalBool endOfMonth, OptionalFrequency fixedPaymentFrequency, Calendar fixedCalendar, uint lookbackDays, uint lockoutDays, bool applyObservationShift, FloatingRateCouponPricer pricer, DateGeneration.Rule rule) : this(NQuantLibcPINVOKE.new_OISRateHelper__SWIG_1(settlementDays, Period.getCPtr(tenor), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), Period.getCPtr(forwardStart), overnightSpread, (int)pillar, Date.getCPtr(customPillarDate), (int)averagingMethod, OptionalBool.getCPtr(endOfMonth), OptionalFrequency.getCPtr(fixedPaymentFrequency), Calendar.getCPtr(fixedCalendar), lookbackDays, lockoutDays, applyObservationShift, FloatingRateCouponPricer.getCPtr(pricer), (int)rule), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OISRateHelper(uint settlementDays, Period tenor, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, Period forwardStart, double overnightSpread, Pillar.Choice pillar, Date customPillarDate, RateAveraging.Type averagingMethod, OptionalBool endOfMonth, OptionalFrequency fixedPaymentFrequency, Calendar fixedCalendar, uint lookbackDays, uint lockoutDays, bool applyObservationShift, FloatingRateCouponPricer pricer) : this(NQuantLibcPINVOKE.new_OISRateHelper__SWIG_2(settlementDays, Period.getCPtr(tenor), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), Period.getCPtr(forwardStart), overnightSpread, (int)pillar, Date.getCPtr(customPillarDate), (int)averagingMethod, OptionalBool.getCPtr(endOfMonth), OptionalFrequency.getCPtr(fixedPaymentFrequency), Calendar.getCPtr(fixedCalendar), lookbackDays, lockoutDays, applyObservationShift, FloatingRateCouponPricer.getCPtr(pricer)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OISRateHelper(uint settlementDays, Period tenor, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, Period forwardStart, double overnightSpread, Pillar.Choice pillar, Date customPillarDate, RateAveraging.Type averagingMethod, OptionalBool endOfMonth, OptionalFrequency fixedPaymentFrequency, Calendar fixedCalendar, uint lookbackDays, uint lockoutDays, bool applyObservationShift) : this(NQuantLibcPINVOKE.new_OISRateHelper__SWIG_3(settlementDays, Period.getCPtr(tenor), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), Period.getCPtr(forwardStart), overnightSpread, (int)pillar, Date.getCPtr(customPillarDate), (int)averagingMethod, OptionalBool.getCPtr(endOfMonth), OptionalFrequency.getCPtr(fixedPaymentFrequency), Calendar.getCPtr(fixedCalendar), lookbackDays, lockoutDays, applyObservationShift), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OISRateHelper(uint settlementDays, Period tenor, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, Period forwardStart, double overnightSpread, Pillar.Choice pillar, Date customPillarDate, RateAveraging.Type averagingMethod, OptionalBool endOfMonth, OptionalFrequency fixedPaymentFrequency, Calendar fixedCalendar, uint lookbackDays, uint lockoutDays) : this(NQuantLibcPINVOKE.new_OISRateHelper__SWIG_4(settlementDays, Period.getCPtr(tenor), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), Period.getCPtr(forwardStart), overnightSpread, (int)pillar, Date.getCPtr(customPillarDate), (int)averagingMethod, OptionalBool.getCPtr(endOfMonth), OptionalFrequency.getCPtr(fixedPaymentFrequency), Calendar.getCPtr(fixedCalendar), lookbackDays, lockoutDays), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OISRateHelper(uint settlementDays, Period tenor, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, Period forwardStart, double overnightSpread, Pillar.Choice pillar, Date customPillarDate, RateAveraging.Type averagingMethod, OptionalBool endOfMonth, OptionalFrequency fixedPaymentFrequency, Calendar fixedCalendar, uint lookbackDays) : this(NQuantLibcPINVOKE.new_OISRateHelper__SWIG_5(settlementDays, Period.getCPtr(tenor), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), Period.getCPtr(forwardStart), overnightSpread, (int)pillar, Date.getCPtr(customPillarDate), (int)averagingMethod, OptionalBool.getCPtr(endOfMonth), OptionalFrequency.getCPtr(fixedPaymentFrequency), Calendar.getCPtr(fixedCalendar), lookbackDays), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OISRateHelper(uint settlementDays, Period tenor, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, Period forwardStart, double overnightSpread, Pillar.Choice pillar, Date customPillarDate, RateAveraging.Type averagingMethod, OptionalBool endOfMonth, OptionalFrequency fixedPaymentFrequency, Calendar fixedCalendar) : this(NQuantLibcPINVOKE.new_OISRateHelper__SWIG_6(settlementDays, Period.getCPtr(tenor), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), Period.getCPtr(forwardStart), overnightSpread, (int)pillar, Date.getCPtr(customPillarDate), (int)averagingMethod, OptionalBool.getCPtr(endOfMonth), OptionalFrequency.getCPtr(fixedPaymentFrequency), Calendar.getCPtr(fixedCalendar)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OISRateHelper(uint settlementDays, Period tenor, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, Period forwardStart, double overnightSpread, Pillar.Choice pillar, Date customPillarDate, RateAveraging.Type averagingMethod, OptionalBool endOfMonth, OptionalFrequency fixedPaymentFrequency) : this(NQuantLibcPINVOKE.new_OISRateHelper__SWIG_7(settlementDays, Period.getCPtr(tenor), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), Period.getCPtr(forwardStart), overnightSpread, (int)pillar, Date.getCPtr(customPillarDate), (int)averagingMethod, OptionalBool.getCPtr(endOfMonth), OptionalFrequency.getCPtr(fixedPaymentFrequency)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OISRateHelper(uint settlementDays, Period tenor, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, Period forwardStart, double overnightSpread, Pillar.Choice pillar, Date customPillarDate, RateAveraging.Type averagingMethod, OptionalBool endOfMonth) : this(NQuantLibcPINVOKE.new_OISRateHelper__SWIG_8(settlementDays, Period.getCPtr(tenor), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), Period.getCPtr(forwardStart), overnightSpread, (int)pillar, Date.getCPtr(customPillarDate), (int)averagingMethod, OptionalBool.getCPtr(endOfMonth)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OISRateHelper(uint settlementDays, Period tenor, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, Period forwardStart, double overnightSpread, Pillar.Choice pillar, Date customPillarDate, RateAveraging.Type averagingMethod) : this(NQuantLibcPINVOKE.new_OISRateHelper__SWIG_9(settlementDays, Period.getCPtr(tenor), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), Period.getCPtr(forwardStart), overnightSpread, (int)pillar, Date.getCPtr(customPillarDate), (int)averagingMethod), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OISRateHelper(uint settlementDays, Period tenor, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, Period forwardStart, double overnightSpread, Pillar.Choice pillar, Date customPillarDate) : this(NQuantLibcPINVOKE.new_OISRateHelper__SWIG_10(settlementDays, Period.getCPtr(tenor), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), Period.getCPtr(forwardStart), overnightSpread, (int)pillar, Date.getCPtr(customPillarDate)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OISRateHelper(uint settlementDays, Period tenor, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, Period forwardStart, double overnightSpread, Pillar.Choice pillar) : this(NQuantLibcPINVOKE.new_OISRateHelper__SWIG_11(settlementDays, Period.getCPtr(tenor), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), Period.getCPtr(forwardStart), overnightSpread, (int)pillar), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OISRateHelper(uint settlementDays, Period tenor, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, Period forwardStart, double overnightSpread) : this(NQuantLibcPINVOKE.new_OISRateHelper__SWIG_12(settlementDays, Period.getCPtr(tenor), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), Period.getCPtr(forwardStart), overnightSpread), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OISRateHelper(uint settlementDays, Period tenor, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, Period forwardStart) : this(NQuantLibcPINVOKE.new_OISRateHelper__SWIG_13(settlementDays, Period.getCPtr(tenor), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), Period.getCPtr(forwardStart)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OISRateHelper(uint settlementDays, Period tenor, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar) : this(NQuantLibcPINVOKE.new_OISRateHelper__SWIG_14(settlementDays, Period.getCPtr(tenor), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OISRateHelper(uint settlementDays, Period tenor, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency) : this(NQuantLibcPINVOKE.new_OISRateHelper__SWIG_15(settlementDays, Period.getCPtr(tenor), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OISRateHelper(uint settlementDays, Period tenor, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention) : this(NQuantLibcPINVOKE.new_OISRateHelper__SWIG_16(settlementDays, Period.getCPtr(tenor), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OISRateHelper(uint settlementDays, Period tenor, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag) : this(NQuantLibcPINVOKE.new_OISRateHelper__SWIG_17(settlementDays, Period.getCPtr(tenor), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OISRateHelper(uint settlementDays, Period tenor, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates) : this(NQuantLibcPINVOKE.new_OISRateHelper__SWIG_18(settlementDays, Period.getCPtr(tenor), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OISRateHelper(uint settlementDays, Period tenor, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve) : this(NQuantLibcPINVOKE.new_OISRateHelper__SWIG_19(settlementDays, Period.getCPtr(tenor), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OISRateHelper(uint settlementDays, Period tenor, QuoteHandle rate, OvernightIndex index) : this(NQuantLibcPINVOKE.new_OISRateHelper__SWIG_20(settlementDays, Period.getCPtr(tenor), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public static OISRateHelper forDates(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, double overnightSpread, Pillar.Choice pillar, Date customPillarDate, RateAveraging.Type averagingMethod, OptionalBool endOfMonth, OptionalFrequency fixedPaymentFrequency, Calendar fixedCalendar, uint lookbackDays, uint lockoutDays, bool applyObservationShift, FloatingRateCouponPricer pricer, DateGeneration.Rule rule, Calendar overnightCalendar) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.OISRateHelper_forDates__SWIG_0(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), overnightSpread, (int)pillar, Date.getCPtr(customPillarDate), (int)averagingMethod, OptionalBool.getCPtr(endOfMonth), OptionalFrequency.getCPtr(fixedPaymentFrequency), Calendar.getCPtr(fixedCalendar), lookbackDays, lockoutDays, applyObservationShift, FloatingRateCouponPricer.getCPtr(pricer), (int)rule, Calendar.getCPtr(overnightCalendar));
    OISRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new OISRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OISRateHelper forDates(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, double overnightSpread, Pillar.Choice pillar, Date customPillarDate, RateAveraging.Type averagingMethod, OptionalBool endOfMonth, OptionalFrequency fixedPaymentFrequency, Calendar fixedCalendar, uint lookbackDays, uint lockoutDays, bool applyObservationShift, FloatingRateCouponPricer pricer, DateGeneration.Rule rule) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.OISRateHelper_forDates__SWIG_1(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), overnightSpread, (int)pillar, Date.getCPtr(customPillarDate), (int)averagingMethod, OptionalBool.getCPtr(endOfMonth), OptionalFrequency.getCPtr(fixedPaymentFrequency), Calendar.getCPtr(fixedCalendar), lookbackDays, lockoutDays, applyObservationShift, FloatingRateCouponPricer.getCPtr(pricer), (int)rule);
    OISRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new OISRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OISRateHelper forDates(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, double overnightSpread, Pillar.Choice pillar, Date customPillarDate, RateAveraging.Type averagingMethod, OptionalBool endOfMonth, OptionalFrequency fixedPaymentFrequency, Calendar fixedCalendar, uint lookbackDays, uint lockoutDays, bool applyObservationShift, FloatingRateCouponPricer pricer) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.OISRateHelper_forDates__SWIG_2(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), overnightSpread, (int)pillar, Date.getCPtr(customPillarDate), (int)averagingMethod, OptionalBool.getCPtr(endOfMonth), OptionalFrequency.getCPtr(fixedPaymentFrequency), Calendar.getCPtr(fixedCalendar), lookbackDays, lockoutDays, applyObservationShift, FloatingRateCouponPricer.getCPtr(pricer));
    OISRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new OISRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OISRateHelper forDates(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, double overnightSpread, Pillar.Choice pillar, Date customPillarDate, RateAveraging.Type averagingMethod, OptionalBool endOfMonth, OptionalFrequency fixedPaymentFrequency, Calendar fixedCalendar, uint lookbackDays, uint lockoutDays, bool applyObservationShift) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.OISRateHelper_forDates__SWIG_3(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), overnightSpread, (int)pillar, Date.getCPtr(customPillarDate), (int)averagingMethod, OptionalBool.getCPtr(endOfMonth), OptionalFrequency.getCPtr(fixedPaymentFrequency), Calendar.getCPtr(fixedCalendar), lookbackDays, lockoutDays, applyObservationShift);
    OISRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new OISRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OISRateHelper forDates(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, double overnightSpread, Pillar.Choice pillar, Date customPillarDate, RateAveraging.Type averagingMethod, OptionalBool endOfMonth, OptionalFrequency fixedPaymentFrequency, Calendar fixedCalendar, uint lookbackDays, uint lockoutDays) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.OISRateHelper_forDates__SWIG_4(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), overnightSpread, (int)pillar, Date.getCPtr(customPillarDate), (int)averagingMethod, OptionalBool.getCPtr(endOfMonth), OptionalFrequency.getCPtr(fixedPaymentFrequency), Calendar.getCPtr(fixedCalendar), lookbackDays, lockoutDays);
    OISRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new OISRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OISRateHelper forDates(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, double overnightSpread, Pillar.Choice pillar, Date customPillarDate, RateAveraging.Type averagingMethod, OptionalBool endOfMonth, OptionalFrequency fixedPaymentFrequency, Calendar fixedCalendar, uint lookbackDays) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.OISRateHelper_forDates__SWIG_5(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), overnightSpread, (int)pillar, Date.getCPtr(customPillarDate), (int)averagingMethod, OptionalBool.getCPtr(endOfMonth), OptionalFrequency.getCPtr(fixedPaymentFrequency), Calendar.getCPtr(fixedCalendar), lookbackDays);
    OISRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new OISRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OISRateHelper forDates(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, double overnightSpread, Pillar.Choice pillar, Date customPillarDate, RateAveraging.Type averagingMethod, OptionalBool endOfMonth, OptionalFrequency fixedPaymentFrequency, Calendar fixedCalendar) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.OISRateHelper_forDates__SWIG_6(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), overnightSpread, (int)pillar, Date.getCPtr(customPillarDate), (int)averagingMethod, OptionalBool.getCPtr(endOfMonth), OptionalFrequency.getCPtr(fixedPaymentFrequency), Calendar.getCPtr(fixedCalendar));
    OISRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new OISRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OISRateHelper forDates(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, double overnightSpread, Pillar.Choice pillar, Date customPillarDate, RateAveraging.Type averagingMethod, OptionalBool endOfMonth, OptionalFrequency fixedPaymentFrequency) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.OISRateHelper_forDates__SWIG_7(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), overnightSpread, (int)pillar, Date.getCPtr(customPillarDate), (int)averagingMethod, OptionalBool.getCPtr(endOfMonth), OptionalFrequency.getCPtr(fixedPaymentFrequency));
    OISRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new OISRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OISRateHelper forDates(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, double overnightSpread, Pillar.Choice pillar, Date customPillarDate, RateAveraging.Type averagingMethod, OptionalBool endOfMonth) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.OISRateHelper_forDates__SWIG_8(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), overnightSpread, (int)pillar, Date.getCPtr(customPillarDate), (int)averagingMethod, OptionalBool.getCPtr(endOfMonth));
    OISRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new OISRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OISRateHelper forDates(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, double overnightSpread, Pillar.Choice pillar, Date customPillarDate, RateAveraging.Type averagingMethod) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.OISRateHelper_forDates__SWIG_9(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), overnightSpread, (int)pillar, Date.getCPtr(customPillarDate), (int)averagingMethod);
    OISRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new OISRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OISRateHelper forDates(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, double overnightSpread, Pillar.Choice pillar, Date customPillarDate) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.OISRateHelper_forDates__SWIG_10(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), overnightSpread, (int)pillar, Date.getCPtr(customPillarDate));
    OISRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new OISRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OISRateHelper forDates(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, double overnightSpread, Pillar.Choice pillar) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.OISRateHelper_forDates__SWIG_11(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), overnightSpread, (int)pillar);
    OISRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new OISRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OISRateHelper forDates(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar, double overnightSpread) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.OISRateHelper_forDates__SWIG_12(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar), overnightSpread);
    OISRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new OISRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OISRateHelper forDates(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency, Calendar paymentCalendar) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.OISRateHelper_forDates__SWIG_13(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency, Calendar.getCPtr(paymentCalendar));
    OISRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new OISRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OISRateHelper forDates(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention, Frequency paymentFrequency) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.OISRateHelper_forDates__SWIG_14(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention, (int)paymentFrequency);
    OISRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new OISRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OISRateHelper forDates(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag, BusinessDayConvention paymentConvention) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.OISRateHelper_forDates__SWIG_15(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag, (int)paymentConvention);
    OISRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new OISRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OISRateHelper forDates(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates, int paymentLag) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.OISRateHelper_forDates__SWIG_16(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates, paymentLag);
    OISRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new OISRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OISRateHelper forDates(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve, bool telescopicValueDates) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.OISRateHelper_forDates__SWIG_17(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve), telescopicValueDates);
    OISRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new OISRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OISRateHelper forDates(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index, YieldTermStructureHandle discountingCurve) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.OISRateHelper_forDates__SWIG_18(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index), YieldTermStructureHandle.getCPtr(discountingCurve));
    OISRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new OISRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OISRateHelper forDates(Date startDate, Date endDate, QuoteHandle rate, OvernightIndex index) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.OISRateHelper_forDates__SWIG_19(Date.getCPtr(startDate), Date.getCPtr(endDate), QuoteHandle.getCPtr(rate), OvernightIndex.getCPtr(index));
    OISRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new OISRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public OvernightIndexedSwap swap() {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.OISRateHelper_swap(swigCPtr);
    OvernightIndexedSwap ret = (cPtr == global::System.IntPtr.Zero) ? null : new OvernightIndexedSwap(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
