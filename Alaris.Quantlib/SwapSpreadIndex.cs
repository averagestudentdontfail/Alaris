//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class SwapSpreadIndex : InterestRateIndex {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal SwapSpreadIndex(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.SwapSpreadIndex_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SwapSpreadIndex obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_SwapSpreadIndex(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public SwapSpreadIndex(string familyName, SwapIndex swapIndex1, SwapIndex swapIndex2, double gearing1, double gearing2) : this(NQuantLibcPINVOKE.new_SwapSpreadIndex__SWIG_0(familyName, SwapIndex.getCPtr(swapIndex1), SwapIndex.getCPtr(swapIndex2), gearing1, gearing2), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public SwapSpreadIndex(string familyName, SwapIndex swapIndex1, SwapIndex swapIndex2, double gearing1) : this(NQuantLibcPINVOKE.new_SwapSpreadIndex__SWIG_1(familyName, SwapIndex.getCPtr(swapIndex1), SwapIndex.getCPtr(swapIndex2), gearing1), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public SwapSpreadIndex(string familyName, SwapIndex swapIndex1, SwapIndex swapIndex2) : this(NQuantLibcPINVOKE.new_SwapSpreadIndex__SWIG_2(familyName, SwapIndex.getCPtr(swapIndex1), SwapIndex.getCPtr(swapIndex2)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public double forecastFixing(Date fixingDate) {
    double ret = NQuantLibcPINVOKE.SwapSpreadIndex_forecastFixing(swigCPtr, Date.getCPtr(fixingDate));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SwapIndex swapIndex1() {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwapSpreadIndex_swapIndex1(swigCPtr);
    SwapIndex ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwapIndex(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SwapIndex swapIndex2() {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.SwapSpreadIndex_swapIndex2(swigCPtr);
    SwapIndex ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwapIndex(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double gearing1() {
    double ret = NQuantLibcPINVOKE.SwapSpreadIndex_gearing1(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double gearing2() {
    double ret = NQuantLibcPINVOKE.SwapSpreadIndex_gearing2(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
