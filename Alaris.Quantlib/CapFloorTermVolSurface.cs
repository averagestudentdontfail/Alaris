//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CapFloorTermVolSurface : CapFloorTermVolatilityStructure {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal CapFloorTermVolSurface(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.CapFloorTermVolSurface_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CapFloorTermVolSurface obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_CapFloorTermVolSurface(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public CapFloorTermVolSurface(uint settlementDays, Calendar calendar, BusinessDayConvention bdc, PeriodVector optionTenors, DoubleVector strikes, QuoteHandleVectorVector quotes, DayCounter dc) : this(NQuantLibcPINVOKE.new_CapFloorTermVolSurface__SWIG_0(settlementDays, Calendar.getCPtr(calendar), (int)bdc, PeriodVector.getCPtr(optionTenors), DoubleVector.getCPtr(strikes), QuoteHandleVectorVector.getCPtr(quotes), DayCounter.getCPtr(dc)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public CapFloorTermVolSurface(uint settlementDays, Calendar calendar, BusinessDayConvention bdc, PeriodVector optionTenors, DoubleVector strikes, QuoteHandleVectorVector quotes) : this(NQuantLibcPINVOKE.new_CapFloorTermVolSurface__SWIG_1(settlementDays, Calendar.getCPtr(calendar), (int)bdc, PeriodVector.getCPtr(optionTenors), DoubleVector.getCPtr(strikes), QuoteHandleVectorVector.getCPtr(quotes)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public CapFloorTermVolSurface(Date settlementDate, Calendar calendar, BusinessDayConvention bdc, PeriodVector optionTenors, DoubleVector strikes, QuoteHandleVectorVector quotes, DayCounter dc) : this(NQuantLibcPINVOKE.new_CapFloorTermVolSurface__SWIG_2(Date.getCPtr(settlementDate), Calendar.getCPtr(calendar), (int)bdc, PeriodVector.getCPtr(optionTenors), DoubleVector.getCPtr(strikes), QuoteHandleVectorVector.getCPtr(quotes), DayCounter.getCPtr(dc)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public CapFloorTermVolSurface(Date settlementDate, Calendar calendar, BusinessDayConvention bdc, PeriodVector optionTenors, DoubleVector strikes, QuoteHandleVectorVector quotes) : this(NQuantLibcPINVOKE.new_CapFloorTermVolSurface__SWIG_3(Date.getCPtr(settlementDate), Calendar.getCPtr(calendar), (int)bdc, PeriodVector.getCPtr(optionTenors), DoubleVector.getCPtr(strikes), QuoteHandleVectorVector.getCPtr(quotes)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public CapFloorTermVolSurface(Date settlementDate, Calendar calendar, BusinessDayConvention bdc, PeriodVector optionTenors, DoubleVector strikes, Matrix volatilities, DayCounter dc) : this(NQuantLibcPINVOKE.new_CapFloorTermVolSurface__SWIG_4(Date.getCPtr(settlementDate), Calendar.getCPtr(calendar), (int)bdc, PeriodVector.getCPtr(optionTenors), DoubleVector.getCPtr(strikes), Matrix.getCPtr(volatilities), DayCounter.getCPtr(dc)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public CapFloorTermVolSurface(Date settlementDate, Calendar calendar, BusinessDayConvention bdc, PeriodVector optionTenors, DoubleVector strikes, Matrix volatilities) : this(NQuantLibcPINVOKE.new_CapFloorTermVolSurface__SWIG_5(Date.getCPtr(settlementDate), Calendar.getCPtr(calendar), (int)bdc, PeriodVector.getCPtr(optionTenors), DoubleVector.getCPtr(strikes), Matrix.getCPtr(volatilities)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public CapFloorTermVolSurface(uint settlementDays, Calendar calendar, BusinessDayConvention bdc, PeriodVector optionTenors, DoubleVector strikes, Matrix volatilities, DayCounter dc) : this(NQuantLibcPINVOKE.new_CapFloorTermVolSurface__SWIG_6(settlementDays, Calendar.getCPtr(calendar), (int)bdc, PeriodVector.getCPtr(optionTenors), DoubleVector.getCPtr(strikes), Matrix.getCPtr(volatilities), DayCounter.getCPtr(dc)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public CapFloorTermVolSurface(uint settlementDays, Calendar calendar, BusinessDayConvention bdc, PeriodVector optionTenors, DoubleVector strikes, Matrix volatilities) : this(NQuantLibcPINVOKE.new_CapFloorTermVolSurface__SWIG_7(settlementDays, Calendar.getCPtr(calendar), (int)bdc, PeriodVector.getCPtr(optionTenors), DoubleVector.getCPtr(strikes), Matrix.getCPtr(volatilities)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public new Date maxDate() {
    Date ret = new Date(NQuantLibcPINVOKE.CapFloorTermVolSurface_maxDate(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new double minStrike() {
    double ret = NQuantLibcPINVOKE.CapFloorTermVolSurface_minStrike(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new double maxStrike() {
    double ret = NQuantLibcPINVOKE.CapFloorTermVolSurface_maxStrike(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PeriodVector optionTenors() {
    PeriodVector ret = new PeriodVector(NQuantLibcPINVOKE.CapFloorTermVolSurface_optionTenors(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DateVector optionDates() {
    DateVector ret = new DateVector(NQuantLibcPINVOKE.CapFloorTermVolSurface_optionDates(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector optionTimes() {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.CapFloorTermVolSurface_optionTimes(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector strikes() {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.CapFloorTermVolSurface_strikes(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
