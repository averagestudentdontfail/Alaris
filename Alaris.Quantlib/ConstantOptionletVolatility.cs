//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ConstantOptionletVolatility : OptionletVolatilityStructure {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ConstantOptionletVolatility(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.ConstantOptionletVolatility_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ConstantOptionletVolatility obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_ConstantOptionletVolatility(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ConstantOptionletVolatility(Date referenceDate, Calendar cal, BusinessDayConvention bdc, double volatility, DayCounter dayCounter, VolatilityType type, double shift) : this(NQuantLibcPINVOKE.new_ConstantOptionletVolatility__SWIG_0(Date.getCPtr(referenceDate), Calendar.getCPtr(cal), (int)bdc, volatility, DayCounter.getCPtr(dayCounter), (int)type, shift), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public ConstantOptionletVolatility(Date referenceDate, Calendar cal, BusinessDayConvention bdc, double volatility, DayCounter dayCounter, VolatilityType type) : this(NQuantLibcPINVOKE.new_ConstantOptionletVolatility__SWIG_1(Date.getCPtr(referenceDate), Calendar.getCPtr(cal), (int)bdc, volatility, DayCounter.getCPtr(dayCounter), (int)type), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public ConstantOptionletVolatility(Date referenceDate, Calendar cal, BusinessDayConvention bdc, double volatility, DayCounter dayCounter) : this(NQuantLibcPINVOKE.new_ConstantOptionletVolatility__SWIG_2(Date.getCPtr(referenceDate), Calendar.getCPtr(cal), (int)bdc, volatility, DayCounter.getCPtr(dayCounter)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public ConstantOptionletVolatility(Date referenceDate, Calendar cal, BusinessDayConvention bdc, QuoteHandle volatility, DayCounter dayCounter, VolatilityType type, double shift) : this(NQuantLibcPINVOKE.new_ConstantOptionletVolatility__SWIG_3(Date.getCPtr(referenceDate), Calendar.getCPtr(cal), (int)bdc, QuoteHandle.getCPtr(volatility), DayCounter.getCPtr(dayCounter), (int)type, shift), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public ConstantOptionletVolatility(Date referenceDate, Calendar cal, BusinessDayConvention bdc, QuoteHandle volatility, DayCounter dayCounter, VolatilityType type) : this(NQuantLibcPINVOKE.new_ConstantOptionletVolatility__SWIG_4(Date.getCPtr(referenceDate), Calendar.getCPtr(cal), (int)bdc, QuoteHandle.getCPtr(volatility), DayCounter.getCPtr(dayCounter), (int)type), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public ConstantOptionletVolatility(Date referenceDate, Calendar cal, BusinessDayConvention bdc, QuoteHandle volatility, DayCounter dayCounter) : this(NQuantLibcPINVOKE.new_ConstantOptionletVolatility__SWIG_5(Date.getCPtr(referenceDate), Calendar.getCPtr(cal), (int)bdc, QuoteHandle.getCPtr(volatility), DayCounter.getCPtr(dayCounter)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public ConstantOptionletVolatility(uint settlementDays, Calendar cal, BusinessDayConvention bdc, double volatility, DayCounter dayCounter, VolatilityType type, double shift) : this(NQuantLibcPINVOKE.new_ConstantOptionletVolatility__SWIG_6(settlementDays, Calendar.getCPtr(cal), (int)bdc, volatility, DayCounter.getCPtr(dayCounter), (int)type, shift), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public ConstantOptionletVolatility(uint settlementDays, Calendar cal, BusinessDayConvention bdc, double volatility, DayCounter dayCounter, VolatilityType type) : this(NQuantLibcPINVOKE.new_ConstantOptionletVolatility__SWIG_7(settlementDays, Calendar.getCPtr(cal), (int)bdc, volatility, DayCounter.getCPtr(dayCounter), (int)type), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public ConstantOptionletVolatility(uint settlementDays, Calendar cal, BusinessDayConvention bdc, double volatility, DayCounter dayCounter) : this(NQuantLibcPINVOKE.new_ConstantOptionletVolatility__SWIG_8(settlementDays, Calendar.getCPtr(cal), (int)bdc, volatility, DayCounter.getCPtr(dayCounter)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public ConstantOptionletVolatility(uint settlementDays, Calendar cal, BusinessDayConvention bdc, QuoteHandle volatility, DayCounter dayCounter, VolatilityType type, double shift) : this(NQuantLibcPINVOKE.new_ConstantOptionletVolatility__SWIG_9(settlementDays, Calendar.getCPtr(cal), (int)bdc, QuoteHandle.getCPtr(volatility), DayCounter.getCPtr(dayCounter), (int)type, shift), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public ConstantOptionletVolatility(uint settlementDays, Calendar cal, BusinessDayConvention bdc, QuoteHandle volatility, DayCounter dayCounter, VolatilityType type) : this(NQuantLibcPINVOKE.new_ConstantOptionletVolatility__SWIG_10(settlementDays, Calendar.getCPtr(cal), (int)bdc, QuoteHandle.getCPtr(volatility), DayCounter.getCPtr(dayCounter), (int)type), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public ConstantOptionletVolatility(uint settlementDays, Calendar cal, BusinessDayConvention bdc, QuoteHandle volatility, DayCounter dayCounter) : this(NQuantLibcPINVOKE.new_ConstantOptionletVolatility__SWIG_11(settlementDays, Calendar.getCPtr(cal), (int)bdc, QuoteHandle.getCPtr(volatility), DayCounter.getCPtr(dayCounter)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

}
