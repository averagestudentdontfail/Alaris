//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CmsMarketCalibration : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CmsMarketCalibration(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CmsMarketCalibration obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CmsMarketCalibration obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~CmsMarketCalibration() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_CmsMarketCalibration(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public CmsMarketCalibration(SwaptionVolatilityStructureHandle volCube, CmsMarket cmsMarket, Matrix weights, CmsMarketCalibration.CalibrationType calibrationType) : this(NQuantLibcPINVOKE.new_CmsMarketCalibration(SwaptionVolatilityStructureHandle.getCPtr(volCube), CmsMarket.getCPtr(cmsMarket), Matrix.getCPtr(weights), (int)calibrationType), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public QlArray compute(EndCriteria endCriteria, OptimizationMethod method, QlArray guess, bool isMeanReversionFixed) {
    QlArray ret = new QlArray(NQuantLibcPINVOKE.CmsMarketCalibration_compute__SWIG_0(swigCPtr, EndCriteria.getCPtr(endCriteria), OptimizationMethod.getCPtr(method), QlArray.getCPtr(guess), isMeanReversionFixed), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Matrix compute(EndCriteria endCriteria, OptimizationMethod method, Matrix guess, bool isMeanReversionFixed, double meanReversionGuess) {
    Matrix ret = new Matrix(NQuantLibcPINVOKE.CmsMarketCalibration_compute__SWIG_1(swigCPtr, EndCriteria.getCPtr(endCriteria), OptimizationMethod.getCPtr(method), Matrix.getCPtr(guess), isMeanReversionFixed, meanReversionGuess), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Matrix compute(EndCriteria endCriteria, OptimizationMethod method, Matrix guess, bool isMeanReversionFixed) {
    Matrix ret = new Matrix(NQuantLibcPINVOKE.CmsMarketCalibration_compute__SWIG_2(swigCPtr, EndCriteria.getCPtr(endCriteria), OptimizationMethod.getCPtr(method), Matrix.getCPtr(guess), isMeanReversionFixed), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Matrix computeParametric(EndCriteria endCriteria, OptimizationMethod method, Matrix guess, bool isMeanReversionFixed, double meanReversionGuess) {
    Matrix ret = new Matrix(NQuantLibcPINVOKE.CmsMarketCalibration_computeParametric__SWIG_0(swigCPtr, EndCriteria.getCPtr(endCriteria), OptimizationMethod.getCPtr(method), Matrix.getCPtr(guess), isMeanReversionFixed, meanReversionGuess), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Matrix computeParametric(EndCriteria endCriteria, OptimizationMethod method, Matrix guess, bool isMeanReversionFixed) {
    Matrix ret = new Matrix(NQuantLibcPINVOKE.CmsMarketCalibration_computeParametric__SWIG_1(swigCPtr, EndCriteria.getCPtr(endCriteria), OptimizationMethod.getCPtr(method), Matrix.getCPtr(guess), isMeanReversionFixed), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double error() {
    double ret = NQuantLibcPINVOKE.CmsMarketCalibration_error(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public EndCriteria.Type endCriteria() {
    EndCriteria.Type ret = (EndCriteria.Type)NQuantLibcPINVOKE.CmsMarketCalibration_endCriteria(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum CalibrationType {
    OnSpread,
    OnPrice,
    OnForwardCmsPrice
  }

}
