//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class YoYInflationCapFloor : Instrument {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal YoYInflationCapFloor(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.YoYInflationCapFloor_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(YoYInflationCapFloor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_YoYInflationCapFloor(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public YoYInflationCapFloor(YoYInflationCapFloor.Type type, Leg yoyLeg, DoubleVector strikes) : this(NQuantLibcPINVOKE.new_YoYInflationCapFloor((int)type, Leg.getCPtr(yoyLeg), DoubleVector.getCPtr(strikes)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public double impliedVolatility(double price, YoYInflationTermStructureHandle curve, double guess, double accuracy, uint maxEvaluations, double minVol, double maxVol) {
    double ret = NQuantLibcPINVOKE.YoYInflationCapFloor_impliedVolatility__SWIG_0(swigCPtr, price, YoYInflationTermStructureHandle.getCPtr(curve), guess, accuracy, maxEvaluations, minVol, maxVol);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double impliedVolatility(double price, YoYInflationTermStructureHandle curve, double guess, double accuracy, uint maxEvaluations, double minVol) {
    double ret = NQuantLibcPINVOKE.YoYInflationCapFloor_impliedVolatility__SWIG_1(swigCPtr, price, YoYInflationTermStructureHandle.getCPtr(curve), guess, accuracy, maxEvaluations, minVol);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double impliedVolatility(double price, YoYInflationTermStructureHandle curve, double guess, double accuracy, uint maxEvaluations) {
    double ret = NQuantLibcPINVOKE.YoYInflationCapFloor_impliedVolatility__SWIG_2(swigCPtr, price, YoYInflationTermStructureHandle.getCPtr(curve), guess, accuracy, maxEvaluations);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double impliedVolatility(double price, YoYInflationTermStructureHandle curve, double guess, double accuracy) {
    double ret = NQuantLibcPINVOKE.YoYInflationCapFloor_impliedVolatility__SWIG_3(swigCPtr, price, YoYInflationTermStructureHandle.getCPtr(curve), guess, accuracy);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double impliedVolatility(double price, YoYInflationTermStructureHandle curve, double guess) {
    double ret = NQuantLibcPINVOKE.YoYInflationCapFloor_impliedVolatility__SWIG_4(swigCPtr, price, YoYInflationTermStructureHandle.getCPtr(curve), guess);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector optionletPrices() {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.YoYInflationCapFloor_optionletPrices(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum Type {
    Cap,
    Floor,
    Collar
  }

}
