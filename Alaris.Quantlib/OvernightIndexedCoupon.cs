//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class OvernightIndexedCoupon : FloatingRateCoupon {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal OvernightIndexedCoupon(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.OvernightIndexedCoupon_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OvernightIndexedCoupon obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_OvernightIndexedCoupon(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public OvernightIndexedCoupon(Date paymentDate, double nominal, Date startDate, Date endDate, OvernightIndex overnightIndex, double gearing, double spread, Date refPeriodStart, Date refPeriodEnd, DayCounter dayCounter, bool telescopicValueDates, RateAveraging.Type averagingMethod, uint lookbackDays, uint lockoutDays, bool applyObservationShift) : this(NQuantLibcPINVOKE.new_OvernightIndexedCoupon__SWIG_0(Date.getCPtr(paymentDate), nominal, Date.getCPtr(startDate), Date.getCPtr(endDate), OvernightIndex.getCPtr(overnightIndex), gearing, spread, Date.getCPtr(refPeriodStart), Date.getCPtr(refPeriodEnd), DayCounter.getCPtr(dayCounter), telescopicValueDates, (int)averagingMethod, lookbackDays, lockoutDays, applyObservationShift), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedCoupon(Date paymentDate, double nominal, Date startDate, Date endDate, OvernightIndex overnightIndex, double gearing, double spread, Date refPeriodStart, Date refPeriodEnd, DayCounter dayCounter, bool telescopicValueDates, RateAveraging.Type averagingMethod, uint lookbackDays, uint lockoutDays) : this(NQuantLibcPINVOKE.new_OvernightIndexedCoupon__SWIG_1(Date.getCPtr(paymentDate), nominal, Date.getCPtr(startDate), Date.getCPtr(endDate), OvernightIndex.getCPtr(overnightIndex), gearing, spread, Date.getCPtr(refPeriodStart), Date.getCPtr(refPeriodEnd), DayCounter.getCPtr(dayCounter), telescopicValueDates, (int)averagingMethod, lookbackDays, lockoutDays), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedCoupon(Date paymentDate, double nominal, Date startDate, Date endDate, OvernightIndex overnightIndex, double gearing, double spread, Date refPeriodStart, Date refPeriodEnd, DayCounter dayCounter, bool telescopicValueDates, RateAveraging.Type averagingMethod, uint lookbackDays) : this(NQuantLibcPINVOKE.new_OvernightIndexedCoupon__SWIG_2(Date.getCPtr(paymentDate), nominal, Date.getCPtr(startDate), Date.getCPtr(endDate), OvernightIndex.getCPtr(overnightIndex), gearing, spread, Date.getCPtr(refPeriodStart), Date.getCPtr(refPeriodEnd), DayCounter.getCPtr(dayCounter), telescopicValueDates, (int)averagingMethod, lookbackDays), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedCoupon(Date paymentDate, double nominal, Date startDate, Date endDate, OvernightIndex overnightIndex, double gearing, double spread, Date refPeriodStart, Date refPeriodEnd, DayCounter dayCounter, bool telescopicValueDates, RateAveraging.Type averagingMethod) : this(NQuantLibcPINVOKE.new_OvernightIndexedCoupon__SWIG_3(Date.getCPtr(paymentDate), nominal, Date.getCPtr(startDate), Date.getCPtr(endDate), OvernightIndex.getCPtr(overnightIndex), gearing, spread, Date.getCPtr(refPeriodStart), Date.getCPtr(refPeriodEnd), DayCounter.getCPtr(dayCounter), telescopicValueDates, (int)averagingMethod), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedCoupon(Date paymentDate, double nominal, Date startDate, Date endDate, OvernightIndex overnightIndex, double gearing, double spread, Date refPeriodStart, Date refPeriodEnd, DayCounter dayCounter, bool telescopicValueDates) : this(NQuantLibcPINVOKE.new_OvernightIndexedCoupon__SWIG_4(Date.getCPtr(paymentDate), nominal, Date.getCPtr(startDate), Date.getCPtr(endDate), OvernightIndex.getCPtr(overnightIndex), gearing, spread, Date.getCPtr(refPeriodStart), Date.getCPtr(refPeriodEnd), DayCounter.getCPtr(dayCounter), telescopicValueDates), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedCoupon(Date paymentDate, double nominal, Date startDate, Date endDate, OvernightIndex overnightIndex, double gearing, double spread, Date refPeriodStart, Date refPeriodEnd, DayCounter dayCounter) : this(NQuantLibcPINVOKE.new_OvernightIndexedCoupon__SWIG_5(Date.getCPtr(paymentDate), nominal, Date.getCPtr(startDate), Date.getCPtr(endDate), OvernightIndex.getCPtr(overnightIndex), gearing, spread, Date.getCPtr(refPeriodStart), Date.getCPtr(refPeriodEnd), DayCounter.getCPtr(dayCounter)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedCoupon(Date paymentDate, double nominal, Date startDate, Date endDate, OvernightIndex overnightIndex, double gearing, double spread, Date refPeriodStart, Date refPeriodEnd) : this(NQuantLibcPINVOKE.new_OvernightIndexedCoupon__SWIG_6(Date.getCPtr(paymentDate), nominal, Date.getCPtr(startDate), Date.getCPtr(endDate), OvernightIndex.getCPtr(overnightIndex), gearing, spread, Date.getCPtr(refPeriodStart), Date.getCPtr(refPeriodEnd)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedCoupon(Date paymentDate, double nominal, Date startDate, Date endDate, OvernightIndex overnightIndex, double gearing, double spread, Date refPeriodStart) : this(NQuantLibcPINVOKE.new_OvernightIndexedCoupon__SWIG_7(Date.getCPtr(paymentDate), nominal, Date.getCPtr(startDate), Date.getCPtr(endDate), OvernightIndex.getCPtr(overnightIndex), gearing, spread, Date.getCPtr(refPeriodStart)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedCoupon(Date paymentDate, double nominal, Date startDate, Date endDate, OvernightIndex overnightIndex, double gearing, double spread) : this(NQuantLibcPINVOKE.new_OvernightIndexedCoupon__SWIG_8(Date.getCPtr(paymentDate), nominal, Date.getCPtr(startDate), Date.getCPtr(endDate), OvernightIndex.getCPtr(overnightIndex), gearing, spread), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedCoupon(Date paymentDate, double nominal, Date startDate, Date endDate, OvernightIndex overnightIndex, double gearing) : this(NQuantLibcPINVOKE.new_OvernightIndexedCoupon__SWIG_9(Date.getCPtr(paymentDate), nominal, Date.getCPtr(startDate), Date.getCPtr(endDate), OvernightIndex.getCPtr(overnightIndex), gearing), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public OvernightIndexedCoupon(Date paymentDate, double nominal, Date startDate, Date endDate, OvernightIndex overnightIndex) : this(NQuantLibcPINVOKE.new_OvernightIndexedCoupon__SWIG_10(Date.getCPtr(paymentDate), nominal, Date.getCPtr(startDate), Date.getCPtr(endDate), OvernightIndex.getCPtr(overnightIndex)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public DateVector fixingDates() {
    DateVector ret = new DateVector(NQuantLibcPINVOKE.OvernightIndexedCoupon_fixingDates(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DateVector interestDates() {
    DateVector ret = new DateVector(NQuantLibcPINVOKE.OvernightIndexedCoupon_interestDates(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector dt() {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.OvernightIndexedCoupon_dt(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector indexFixings() {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.OvernightIndexedCoupon_indexFixings(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DateVector valueDates() {
    DateVector ret = new DateVector(NQuantLibcPINVOKE.OvernightIndexedCoupon_valueDates(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RateAveraging.Type averagingMethod() {
    RateAveraging.Type ret = (RateAveraging.Type)NQuantLibcPINVOKE.OvernightIndexedCoupon_averagingMethod(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint lockoutDays() {
    uint ret = NQuantLibcPINVOKE.OvernightIndexedCoupon_lockoutDays(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool applyObservationShift() {
    bool ret = NQuantLibcPINVOKE.OvernightIndexedCoupon_applyObservationShift(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool canApplyTelescopicFormula() {
    bool ret = NQuantLibcPINVOKE.OvernightIndexedCoupon_canApplyTelescopicFormula(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
