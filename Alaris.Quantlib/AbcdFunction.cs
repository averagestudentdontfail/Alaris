//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class AbcdFunction : AbcdMathFunction {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal AbcdFunction(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.AbcdFunction_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AbcdFunction obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(AbcdFunction obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_AbcdFunction(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public AbcdFunction(double a, double b, double c, double d) : this(NQuantLibcPINVOKE.new_AbcdFunction__SWIG_0(a, b, c, d), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AbcdFunction(double a, double b, double c) : this(NQuantLibcPINVOKE.new_AbcdFunction__SWIG_1(a, b, c), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AbcdFunction(double a, double b) : this(NQuantLibcPINVOKE.new_AbcdFunction__SWIG_2(a, b), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AbcdFunction(double a) : this(NQuantLibcPINVOKE.new_AbcdFunction__SWIG_3(a), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AbcdFunction() : this(NQuantLibcPINVOKE.new_AbcdFunction__SWIG_4(), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public double maximumVolatility() {
    double ret = NQuantLibcPINVOKE.AbcdFunction_maximumVolatility(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double shortTermVolatility() {
    double ret = NQuantLibcPINVOKE.AbcdFunction_shortTermVolatility(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double longTermVolatility() {
    double ret = NQuantLibcPINVOKE.AbcdFunction_longTermVolatility(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double covariance(double t, double T, double S) {
    double ret = NQuantLibcPINVOKE.AbcdFunction_covariance__SWIG_0(swigCPtr, t, T, S);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double covariance(double t1, double t2, double T, double S) {
    double ret = NQuantLibcPINVOKE.AbcdFunction_covariance__SWIG_1(swigCPtr, t1, t2, T, S);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double volatility(double tMin, double tMax, double T) {
    double ret = NQuantLibcPINVOKE.AbcdFunction_volatility(swigCPtr, tMin, tMax, T);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double variance(double tMin, double tMax, double T) {
    double ret = NQuantLibcPINVOKE.AbcdFunction_variance(swigCPtr, tMin, tMax, T);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double instantaneousVolatility(double t, double T) {
    double ret = NQuantLibcPINVOKE.AbcdFunction_instantaneousVolatility(swigCPtr, t, T);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double instantaneousVariance(double t, double T) {
    double ret = NQuantLibcPINVOKE.AbcdFunction_instantaneousVariance(swigCPtr, t, T);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double instantaneousCovariance(double u, double T, double S) {
    double ret = NQuantLibcPINVOKE.AbcdFunction_instantaneousCovariance(swigCPtr, u, T, S);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double primitive(double t, double T, double S) {
    double ret = NQuantLibcPINVOKE.AbcdFunction_primitive(swigCPtr, t, T, S);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
