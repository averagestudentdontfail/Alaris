//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class FdHestonHullWhiteVanillaEngine : PricingEngine {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal FdHestonHullWhiteVanillaEngine(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.FdHestonHullWhiteVanillaEngine_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FdHestonHullWhiteVanillaEngine obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_FdHestonHullWhiteVanillaEngine(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public FdHestonHullWhiteVanillaEngine(HestonModel model, HullWhiteProcess hwProcess, double corrEquityShortRate, uint tGrid, uint xGrid, uint vGrid, uint rGrid, uint dampingSteps, bool controlVariate, FdmSchemeDesc schemeDesc) : this(NQuantLibcPINVOKE.new_FdHestonHullWhiteVanillaEngine__SWIG_0(HestonModel.getCPtr(model), HullWhiteProcess.getCPtr(hwProcess), corrEquityShortRate, tGrid, xGrid, vGrid, rGrid, dampingSteps, controlVariate, FdmSchemeDesc.getCPtr(schemeDesc)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdHestonHullWhiteVanillaEngine(HestonModel model, HullWhiteProcess hwProcess, double corrEquityShortRate, uint tGrid, uint xGrid, uint vGrid, uint rGrid, uint dampingSteps, bool controlVariate) : this(NQuantLibcPINVOKE.new_FdHestonHullWhiteVanillaEngine__SWIG_1(HestonModel.getCPtr(model), HullWhiteProcess.getCPtr(hwProcess), corrEquityShortRate, tGrid, xGrid, vGrid, rGrid, dampingSteps, controlVariate), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdHestonHullWhiteVanillaEngine(HestonModel model, HullWhiteProcess hwProcess, double corrEquityShortRate, uint tGrid, uint xGrid, uint vGrid, uint rGrid, uint dampingSteps) : this(NQuantLibcPINVOKE.new_FdHestonHullWhiteVanillaEngine__SWIG_2(HestonModel.getCPtr(model), HullWhiteProcess.getCPtr(hwProcess), corrEquityShortRate, tGrid, xGrid, vGrid, rGrid, dampingSteps), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdHestonHullWhiteVanillaEngine(HestonModel model, HullWhiteProcess hwProcess, double corrEquityShortRate, uint tGrid, uint xGrid, uint vGrid, uint rGrid) : this(NQuantLibcPINVOKE.new_FdHestonHullWhiteVanillaEngine__SWIG_3(HestonModel.getCPtr(model), HullWhiteProcess.getCPtr(hwProcess), corrEquityShortRate, tGrid, xGrid, vGrid, rGrid), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdHestonHullWhiteVanillaEngine(HestonModel model, HullWhiteProcess hwProcess, double corrEquityShortRate, uint tGrid, uint xGrid, uint vGrid) : this(NQuantLibcPINVOKE.new_FdHestonHullWhiteVanillaEngine__SWIG_4(HestonModel.getCPtr(model), HullWhiteProcess.getCPtr(hwProcess), corrEquityShortRate, tGrid, xGrid, vGrid), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdHestonHullWhiteVanillaEngine(HestonModel model, HullWhiteProcess hwProcess, double corrEquityShortRate, uint tGrid, uint xGrid) : this(NQuantLibcPINVOKE.new_FdHestonHullWhiteVanillaEngine__SWIG_5(HestonModel.getCPtr(model), HullWhiteProcess.getCPtr(hwProcess), corrEquityShortRate, tGrid, xGrid), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdHestonHullWhiteVanillaEngine(HestonModel model, HullWhiteProcess hwProcess, double corrEquityShortRate, uint tGrid) : this(NQuantLibcPINVOKE.new_FdHestonHullWhiteVanillaEngine__SWIG_6(HestonModel.getCPtr(model), HullWhiteProcess.getCPtr(hwProcess), corrEquityShortRate, tGrid), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdHestonHullWhiteVanillaEngine(HestonModel model, HullWhiteProcess hwProcess, double corrEquityShortRate) : this(NQuantLibcPINVOKE.new_FdHestonHullWhiteVanillaEngine__SWIG_7(HestonModel.getCPtr(model), HullWhiteProcess.getCPtr(hwProcess), corrEquityShortRate), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdHestonHullWhiteVanillaEngine(HestonModel model, HullWhiteProcess hwProcess, DividendSchedule dividends, double corrEquityShortRate, uint tGrid, uint xGrid, uint vGrid, uint rGrid, uint dampingSteps, bool controlVariate, FdmSchemeDesc schemeDesc) : this(NQuantLibcPINVOKE.new_FdHestonHullWhiteVanillaEngine__SWIG_8(HestonModel.getCPtr(model), HullWhiteProcess.getCPtr(hwProcess), DividendSchedule.getCPtr(dividends), corrEquityShortRate, tGrid, xGrid, vGrid, rGrid, dampingSteps, controlVariate, FdmSchemeDesc.getCPtr(schemeDesc)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdHestonHullWhiteVanillaEngine(HestonModel model, HullWhiteProcess hwProcess, DividendSchedule dividends, double corrEquityShortRate, uint tGrid, uint xGrid, uint vGrid, uint rGrid, uint dampingSteps, bool controlVariate) : this(NQuantLibcPINVOKE.new_FdHestonHullWhiteVanillaEngine__SWIG_9(HestonModel.getCPtr(model), HullWhiteProcess.getCPtr(hwProcess), DividendSchedule.getCPtr(dividends), corrEquityShortRate, tGrid, xGrid, vGrid, rGrid, dampingSteps, controlVariate), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdHestonHullWhiteVanillaEngine(HestonModel model, HullWhiteProcess hwProcess, DividendSchedule dividends, double corrEquityShortRate, uint tGrid, uint xGrid, uint vGrid, uint rGrid, uint dampingSteps) : this(NQuantLibcPINVOKE.new_FdHestonHullWhiteVanillaEngine__SWIG_10(HestonModel.getCPtr(model), HullWhiteProcess.getCPtr(hwProcess), DividendSchedule.getCPtr(dividends), corrEquityShortRate, tGrid, xGrid, vGrid, rGrid, dampingSteps), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdHestonHullWhiteVanillaEngine(HestonModel model, HullWhiteProcess hwProcess, DividendSchedule dividends, double corrEquityShortRate, uint tGrid, uint xGrid, uint vGrid, uint rGrid) : this(NQuantLibcPINVOKE.new_FdHestonHullWhiteVanillaEngine__SWIG_11(HestonModel.getCPtr(model), HullWhiteProcess.getCPtr(hwProcess), DividendSchedule.getCPtr(dividends), corrEquityShortRate, tGrid, xGrid, vGrid, rGrid), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdHestonHullWhiteVanillaEngine(HestonModel model, HullWhiteProcess hwProcess, DividendSchedule dividends, double corrEquityShortRate, uint tGrid, uint xGrid, uint vGrid) : this(NQuantLibcPINVOKE.new_FdHestonHullWhiteVanillaEngine__SWIG_12(HestonModel.getCPtr(model), HullWhiteProcess.getCPtr(hwProcess), DividendSchedule.getCPtr(dividends), corrEquityShortRate, tGrid, xGrid, vGrid), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdHestonHullWhiteVanillaEngine(HestonModel model, HullWhiteProcess hwProcess, DividendSchedule dividends, double corrEquityShortRate, uint tGrid, uint xGrid) : this(NQuantLibcPINVOKE.new_FdHestonHullWhiteVanillaEngine__SWIG_13(HestonModel.getCPtr(model), HullWhiteProcess.getCPtr(hwProcess), DividendSchedule.getCPtr(dividends), corrEquityShortRate, tGrid, xGrid), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdHestonHullWhiteVanillaEngine(HestonModel model, HullWhiteProcess hwProcess, DividendSchedule dividends, double corrEquityShortRate, uint tGrid) : this(NQuantLibcPINVOKE.new_FdHestonHullWhiteVanillaEngine__SWIG_14(HestonModel.getCPtr(model), HullWhiteProcess.getCPtr(hwProcess), DividendSchedule.getCPtr(dividends), corrEquityShortRate, tGrid), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdHestonHullWhiteVanillaEngine(HestonModel model, HullWhiteProcess hwProcess, DividendSchedule dividends, double corrEquityShortRate) : this(NQuantLibcPINVOKE.new_FdHestonHullWhiteVanillaEngine__SWIG_15(HestonModel.getCPtr(model), HullWhiteProcess.getCPtr(hwProcess), DividendSchedule.getCPtr(dividends), corrEquityShortRate), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

}
