//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChebyshevInterpolation : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ChebyshevInterpolation(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChebyshevInterpolation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ChebyshevInterpolation obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ChebyshevInterpolation() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_ChebyshevInterpolation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChebyshevInterpolation(QlArray f, ChebyshevInterpolation.PointsType pointsType) : this(NQuantLibcPINVOKE.new_ChebyshevInterpolation__SWIG_0(QlArray.getCPtr(f), (int)pointsType), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChebyshevInterpolation(QlArray f) : this(NQuantLibcPINVOKE.new_ChebyshevInterpolation__SWIG_1(QlArray.getCPtr(f)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChebyshevInterpolation(uint n, UnaryFunctionDelegate fct, ChebyshevInterpolation.PointsType pointsType) : this(NQuantLibcPINVOKE.new_ChebyshevInterpolation__SWIG_2(n, UnaryFunctionDelegate.getCPtr(fct), (int)pointsType), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChebyshevInterpolation(uint n, UnaryFunctionDelegate fct) : this(NQuantLibcPINVOKE.new_ChebyshevInterpolation__SWIG_3(n, UnaryFunctionDelegate.getCPtr(fct)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public double call(double z, bool allowExtrapolation) {
    double ret = NQuantLibcPINVOKE.ChebyshevInterpolation_call__SWIG_0(swigCPtr, z, allowExtrapolation);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double call(double z) {
    double ret = NQuantLibcPINVOKE.ChebyshevInterpolation_call__SWIG_1(swigCPtr, z);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static QlArray nodes(uint n, ChebyshevInterpolation.PointsType pointsType) {
    QlArray ret = new QlArray(NQuantLibcPINVOKE.ChebyshevInterpolation_nodes(n, (int)pointsType), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum PointsType {
    FirstKind,
    SecondKind
  }

}
