//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class FdmBlackScholesMesher : Fdm1dMesher {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal FdmBlackScholesMesher(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.FdmBlackScholesMesher_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FdmBlackScholesMesher obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_FdmBlackScholesMesher(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public FdmBlackScholesMesher(uint size, GeneralizedBlackScholesProcess process, double maturity, double strike, double xMinConstraint, double xMaxConstraint, double eps, double scaleFactor, DoublePair cPoint, DividendSchedule dividendSchedule, FdmQuantoHelper fdmQuantoHelper, double spotAdjustment) : this(NQuantLibcPINVOKE.new_FdmBlackScholesMesher__SWIG_0(size, GeneralizedBlackScholesProcess.getCPtr(process), maturity, strike, xMinConstraint, xMaxConstraint, eps, scaleFactor, DoublePair.getCPtr(cPoint), DividendSchedule.getCPtr(dividendSchedule), FdmQuantoHelper.getCPtr(fdmQuantoHelper), spotAdjustment), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdmBlackScholesMesher(uint size, GeneralizedBlackScholesProcess process, double maturity, double strike, double xMinConstraint, double xMaxConstraint, double eps, double scaleFactor, DoublePair cPoint, DividendSchedule dividendSchedule, FdmQuantoHelper fdmQuantoHelper) : this(NQuantLibcPINVOKE.new_FdmBlackScholesMesher__SWIG_1(size, GeneralizedBlackScholesProcess.getCPtr(process), maturity, strike, xMinConstraint, xMaxConstraint, eps, scaleFactor, DoublePair.getCPtr(cPoint), DividendSchedule.getCPtr(dividendSchedule), FdmQuantoHelper.getCPtr(fdmQuantoHelper)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdmBlackScholesMesher(uint size, GeneralizedBlackScholesProcess process, double maturity, double strike, double xMinConstraint, double xMaxConstraint, double eps, double scaleFactor, DoublePair cPoint, DividendSchedule dividendSchedule) : this(NQuantLibcPINVOKE.new_FdmBlackScholesMesher__SWIG_2(size, GeneralizedBlackScholesProcess.getCPtr(process), maturity, strike, xMinConstraint, xMaxConstraint, eps, scaleFactor, DoublePair.getCPtr(cPoint), DividendSchedule.getCPtr(dividendSchedule)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdmBlackScholesMesher(uint size, GeneralizedBlackScholesProcess process, double maturity, double strike, double xMinConstraint, double xMaxConstraint, double eps, double scaleFactor, DoublePair cPoint) : this(NQuantLibcPINVOKE.new_FdmBlackScholesMesher__SWIG_3(size, GeneralizedBlackScholesProcess.getCPtr(process), maturity, strike, xMinConstraint, xMaxConstraint, eps, scaleFactor, DoublePair.getCPtr(cPoint)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdmBlackScholesMesher(uint size, GeneralizedBlackScholesProcess process, double maturity, double strike, double xMinConstraint, double xMaxConstraint, double eps, double scaleFactor) : this(NQuantLibcPINVOKE.new_FdmBlackScholesMesher__SWIG_4(size, GeneralizedBlackScholesProcess.getCPtr(process), maturity, strike, xMinConstraint, xMaxConstraint, eps, scaleFactor), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdmBlackScholesMesher(uint size, GeneralizedBlackScholesProcess process, double maturity, double strike, double xMinConstraint, double xMaxConstraint, double eps) : this(NQuantLibcPINVOKE.new_FdmBlackScholesMesher__SWIG_5(size, GeneralizedBlackScholesProcess.getCPtr(process), maturity, strike, xMinConstraint, xMaxConstraint, eps), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdmBlackScholesMesher(uint size, GeneralizedBlackScholesProcess process, double maturity, double strike, double xMinConstraint, double xMaxConstraint) : this(NQuantLibcPINVOKE.new_FdmBlackScholesMesher__SWIG_6(size, GeneralizedBlackScholesProcess.getCPtr(process), maturity, strike, xMinConstraint, xMaxConstraint), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdmBlackScholesMesher(uint size, GeneralizedBlackScholesProcess process, double maturity, double strike, double xMinConstraint) : this(NQuantLibcPINVOKE.new_FdmBlackScholesMesher__SWIG_7(size, GeneralizedBlackScholesProcess.getCPtr(process), maturity, strike, xMinConstraint), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdmBlackScholesMesher(uint size, GeneralizedBlackScholesProcess process, double maturity, double strike) : this(NQuantLibcPINVOKE.new_FdmBlackScholesMesher__SWIG_8(size, GeneralizedBlackScholesProcess.getCPtr(process), maturity, strike), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public static GeneralizedBlackScholesProcess processHelper(QuoteHandle s0, YieldTermStructureHandle rTS, YieldTermStructureHandle qTS, double vol) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.FdmBlackScholesMesher_processHelper(QuoteHandle.getCPtr(s0), YieldTermStructureHandle.getCPtr(rTS), YieldTermStructureHandle.getCPtr(qTS), vol);
    GeneralizedBlackScholesProcess ret = (cPtr == global::System.IntPtr.Zero) ? null : new GeneralizedBlackScholesProcess(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
