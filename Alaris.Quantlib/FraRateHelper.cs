//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class FraRateHelper : RateHelper {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal FraRateHelper(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.FraRateHelper_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FraRateHelper obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_FraRateHelper(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public FraRateHelper(QuoteHandle rate, uint monthsToStart, uint monthsToEnd, uint fixingDays, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, DayCounter dayCounter, Pillar.Choice pillar, Date customPillarDate, bool useIndexedCoupon) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_0(QuoteHandle.getCPtr(rate), monthsToStart, monthsToEnd, fixingDays, Calendar.getCPtr(calendar), (int)convention, endOfMonth, DayCounter.getCPtr(dayCounter), (int)pillar, Date.getCPtr(customPillarDate), useIndexedCoupon), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(QuoteHandle rate, uint monthsToStart, uint monthsToEnd, uint fixingDays, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, DayCounter dayCounter, Pillar.Choice pillar, Date customPillarDate) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_1(QuoteHandle.getCPtr(rate), monthsToStart, monthsToEnd, fixingDays, Calendar.getCPtr(calendar), (int)convention, endOfMonth, DayCounter.getCPtr(dayCounter), (int)pillar, Date.getCPtr(customPillarDate)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(QuoteHandle rate, uint monthsToStart, uint monthsToEnd, uint fixingDays, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, DayCounter dayCounter, Pillar.Choice pillar) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_2(QuoteHandle.getCPtr(rate), monthsToStart, monthsToEnd, fixingDays, Calendar.getCPtr(calendar), (int)convention, endOfMonth, DayCounter.getCPtr(dayCounter), (int)pillar), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(QuoteHandle rate, uint monthsToStart, uint monthsToEnd, uint fixingDays, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, DayCounter dayCounter) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_3(QuoteHandle.getCPtr(rate), monthsToStart, monthsToEnd, fixingDays, Calendar.getCPtr(calendar), (int)convention, endOfMonth, DayCounter.getCPtr(dayCounter)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(double rate, uint monthsToStart, uint monthsToEnd, uint fixingDays, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, DayCounter dayCounter, Pillar.Choice pillar, Date customPillarDate, bool useIndexedCoupon) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_4(rate, monthsToStart, monthsToEnd, fixingDays, Calendar.getCPtr(calendar), (int)convention, endOfMonth, DayCounter.getCPtr(dayCounter), (int)pillar, Date.getCPtr(customPillarDate), useIndexedCoupon), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(double rate, uint monthsToStart, uint monthsToEnd, uint fixingDays, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, DayCounter dayCounter, Pillar.Choice pillar, Date customPillarDate) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_5(rate, monthsToStart, monthsToEnd, fixingDays, Calendar.getCPtr(calendar), (int)convention, endOfMonth, DayCounter.getCPtr(dayCounter), (int)pillar, Date.getCPtr(customPillarDate)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(double rate, uint monthsToStart, uint monthsToEnd, uint fixingDays, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, DayCounter dayCounter, Pillar.Choice pillar) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_6(rate, monthsToStart, monthsToEnd, fixingDays, Calendar.getCPtr(calendar), (int)convention, endOfMonth, DayCounter.getCPtr(dayCounter), (int)pillar), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(double rate, uint monthsToStart, uint monthsToEnd, uint fixingDays, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, DayCounter dayCounter) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_7(rate, monthsToStart, monthsToEnd, fixingDays, Calendar.getCPtr(calendar), (int)convention, endOfMonth, DayCounter.getCPtr(dayCounter)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(QuoteHandle rate, uint monthsToStart, IborIndex index, Pillar.Choice pillar, Date customPillarDate, bool useIndexedCoupon) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_8(QuoteHandle.getCPtr(rate), monthsToStart, IborIndex.getCPtr(index), (int)pillar, Date.getCPtr(customPillarDate), useIndexedCoupon), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(QuoteHandle rate, uint monthsToStart, IborIndex index, Pillar.Choice pillar, Date customPillarDate) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_9(QuoteHandle.getCPtr(rate), monthsToStart, IborIndex.getCPtr(index), (int)pillar, Date.getCPtr(customPillarDate)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(QuoteHandle rate, uint monthsToStart, IborIndex index, Pillar.Choice pillar) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_10(QuoteHandle.getCPtr(rate), monthsToStart, IborIndex.getCPtr(index), (int)pillar), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(QuoteHandle rate, uint monthsToStart, IborIndex index) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_11(QuoteHandle.getCPtr(rate), monthsToStart, IborIndex.getCPtr(index)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(double rate, uint monthsToStart, IborIndex index, Pillar.Choice pillar, Date customPillarDate, bool useIndexedCoupon) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_12(rate, monthsToStart, IborIndex.getCPtr(index), (int)pillar, Date.getCPtr(customPillarDate), useIndexedCoupon), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(double rate, uint monthsToStart, IborIndex index, Pillar.Choice pillar, Date customPillarDate) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_13(rate, monthsToStart, IborIndex.getCPtr(index), (int)pillar, Date.getCPtr(customPillarDate)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(double rate, uint monthsToStart, IborIndex index, Pillar.Choice pillar) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_14(rate, monthsToStart, IborIndex.getCPtr(index), (int)pillar), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(double rate, uint monthsToStart, IborIndex index) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_15(rate, monthsToStart, IborIndex.getCPtr(index)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(QuoteHandle rate, uint immOffsetStart, uint immOffsetEnd, IborIndex iborIndex, Pillar.Choice pillar, Date customPillarDate, bool useIndexedCoupon) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_16(QuoteHandle.getCPtr(rate), immOffsetStart, immOffsetEnd, IborIndex.getCPtr(iborIndex), (int)pillar, Date.getCPtr(customPillarDate), useIndexedCoupon), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(QuoteHandle rate, uint immOffsetStart, uint immOffsetEnd, IborIndex iborIndex, Pillar.Choice pillar, Date customPillarDate) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_17(QuoteHandle.getCPtr(rate), immOffsetStart, immOffsetEnd, IborIndex.getCPtr(iborIndex), (int)pillar, Date.getCPtr(customPillarDate)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(QuoteHandle rate, uint immOffsetStart, uint immOffsetEnd, IborIndex iborIndex, Pillar.Choice pillar) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_18(QuoteHandle.getCPtr(rate), immOffsetStart, immOffsetEnd, IborIndex.getCPtr(iborIndex), (int)pillar), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(QuoteHandle rate, uint immOffsetStart, uint immOffsetEnd, IborIndex iborIndex) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_19(QuoteHandle.getCPtr(rate), immOffsetStart, immOffsetEnd, IborIndex.getCPtr(iborIndex)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(double rate, uint immOffsetStart, uint immOffsetEnd, IborIndex iborIndex, Pillar.Choice pillar, Date customPillarDate, bool useIndexedCoupon) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_20(rate, immOffsetStart, immOffsetEnd, IborIndex.getCPtr(iborIndex), (int)pillar, Date.getCPtr(customPillarDate), useIndexedCoupon), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(double rate, uint immOffsetStart, uint immOffsetEnd, IborIndex iborIndex, Pillar.Choice pillar, Date customPillarDate) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_21(rate, immOffsetStart, immOffsetEnd, IborIndex.getCPtr(iborIndex), (int)pillar, Date.getCPtr(customPillarDate)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(double rate, uint immOffsetStart, uint immOffsetEnd, IborIndex iborIndex, Pillar.Choice pillar) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_22(rate, immOffsetStart, immOffsetEnd, IborIndex.getCPtr(iborIndex), (int)pillar), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(double rate, uint immOffsetStart, uint immOffsetEnd, IborIndex iborIndex) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_23(rate, immOffsetStart, immOffsetEnd, IborIndex.getCPtr(iborIndex)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(double rate, Period periodToStart, IborIndex iborIndex, Pillar.Choice pillar, Date customPillarDate, bool useIndexedCoupon) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_24(rate, Period.getCPtr(periodToStart), IborIndex.getCPtr(iborIndex), (int)pillar, Date.getCPtr(customPillarDate), useIndexedCoupon), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(double rate, Period periodToStart, IborIndex iborIndex, Pillar.Choice pillar, Date customPillarDate) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_25(rate, Period.getCPtr(periodToStart), IborIndex.getCPtr(iborIndex), (int)pillar, Date.getCPtr(customPillarDate)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(double rate, Period periodToStart, IborIndex iborIndex, Pillar.Choice pillar) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_26(rate, Period.getCPtr(periodToStart), IborIndex.getCPtr(iborIndex), (int)pillar), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(double rate, Period periodToStart, IborIndex iborIndex) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_27(rate, Period.getCPtr(periodToStart), IborIndex.getCPtr(iborIndex)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(QuoteHandle rate, Period periodToStart, IborIndex iborIndex, Pillar.Choice pillar, Date customPillarDate, bool useIndexedCoupon) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_28(QuoteHandle.getCPtr(rate), Period.getCPtr(periodToStart), IborIndex.getCPtr(iborIndex), (int)pillar, Date.getCPtr(customPillarDate), useIndexedCoupon), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(QuoteHandle rate, Period periodToStart, IborIndex iborIndex, Pillar.Choice pillar, Date customPillarDate) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_29(QuoteHandle.getCPtr(rate), Period.getCPtr(periodToStart), IborIndex.getCPtr(iborIndex), (int)pillar, Date.getCPtr(customPillarDate)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(QuoteHandle rate, Period periodToStart, IborIndex iborIndex, Pillar.Choice pillar) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_30(QuoteHandle.getCPtr(rate), Period.getCPtr(periodToStart), IborIndex.getCPtr(iborIndex), (int)pillar), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FraRateHelper(QuoteHandle rate, Period periodToStart, IborIndex iborIndex) : this(NQuantLibcPINVOKE.new_FraRateHelper__SWIG_31(QuoteHandle.getCPtr(rate), Period.getCPtr(periodToStart), IborIndex.getCPtr(iborIndex)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public static FraRateHelper forDates(QuoteHandle rate, Date startDate, Date endDate, IborIndex index, Pillar.Choice pillar, Date customPillarDate, bool useIndexedCoupon) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.FraRateHelper_forDates__SWIG_0(QuoteHandle.getCPtr(rate), Date.getCPtr(startDate), Date.getCPtr(endDate), IborIndex.getCPtr(index), (int)pillar, Date.getCPtr(customPillarDate), useIndexedCoupon);
    FraRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new FraRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FraRateHelper forDates(QuoteHandle rate, Date startDate, Date endDate, IborIndex index, Pillar.Choice pillar, Date customPillarDate) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.FraRateHelper_forDates__SWIG_1(QuoteHandle.getCPtr(rate), Date.getCPtr(startDate), Date.getCPtr(endDate), IborIndex.getCPtr(index), (int)pillar, Date.getCPtr(customPillarDate));
    FraRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new FraRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FraRateHelper forDates(QuoteHandle rate, Date startDate, Date endDate, IborIndex index, Pillar.Choice pillar) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.FraRateHelper_forDates__SWIG_2(QuoteHandle.getCPtr(rate), Date.getCPtr(startDate), Date.getCPtr(endDate), IborIndex.getCPtr(index), (int)pillar);
    FraRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new FraRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FraRateHelper forDates(QuoteHandle rate, Date startDate, Date endDate, IborIndex index) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.FraRateHelper_forDates__SWIG_3(QuoteHandle.getCPtr(rate), Date.getCPtr(startDate), Date.getCPtr(endDate), IborIndex.getCPtr(index));
    FraRateHelper ret = (cPtr == global::System.IntPtr.Zero) ? null : new FraRateHelper(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
