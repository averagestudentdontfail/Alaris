//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class FdmBlackScholesFwdOp : FdmLinearOpComposite {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal FdmBlackScholesFwdOp(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.FdmBlackScholesFwdOp_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FdmBlackScholesFwdOp obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_FdmBlackScholesFwdOp(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public FdmBlackScholesFwdOp(FdmMesher mesher, GeneralizedBlackScholesProcess process, double strike, bool localVol, double illegalLocalVolOverwrite, uint direction) : this(NQuantLibcPINVOKE.new_FdmBlackScholesFwdOp__SWIG_0(FdmMesher.getCPtr(mesher), GeneralizedBlackScholesProcess.getCPtr(process), strike, localVol, illegalLocalVolOverwrite, direction), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdmBlackScholesFwdOp(FdmMesher mesher, GeneralizedBlackScholesProcess process, double strike, bool localVol, double illegalLocalVolOverwrite) : this(NQuantLibcPINVOKE.new_FdmBlackScholesFwdOp__SWIG_1(FdmMesher.getCPtr(mesher), GeneralizedBlackScholesProcess.getCPtr(process), strike, localVol, illegalLocalVolOverwrite), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdmBlackScholesFwdOp(FdmMesher mesher, GeneralizedBlackScholesProcess process, double strike, bool localVol) : this(NQuantLibcPINVOKE.new_FdmBlackScholesFwdOp__SWIG_2(FdmMesher.getCPtr(mesher), GeneralizedBlackScholesProcess.getCPtr(process), strike, localVol), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FdmBlackScholesFwdOp(FdmMesher mesher, GeneralizedBlackScholesProcess process, double strike) : this(NQuantLibcPINVOKE.new_FdmBlackScholesFwdOp__SWIG_3(FdmMesher.getCPtr(mesher), GeneralizedBlackScholesProcess.getCPtr(process), strike), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

}
