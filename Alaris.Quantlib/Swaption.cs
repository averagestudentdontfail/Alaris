//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Swaption : Option {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal Swaption(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.Swaption_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Swaption obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_Swaption(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Swaption(FixedVsFloatingSwap swap, Exercise exercise, Settlement.Type type, Settlement.Method settlementMethod) : this(NQuantLibcPINVOKE.new_Swaption__SWIG_0(FixedVsFloatingSwap.getCPtr(swap), Exercise.getCPtr(exercise), (int)type, (int)settlementMethod), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public Swaption(FixedVsFloatingSwap swap, Exercise exercise, Settlement.Type type) : this(NQuantLibcPINVOKE.new_Swaption__SWIG_1(FixedVsFloatingSwap.getCPtr(swap), Exercise.getCPtr(exercise), (int)type), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public Swaption(FixedVsFloatingSwap swap, Exercise exercise) : this(NQuantLibcPINVOKE.new_Swaption__SWIG_2(FixedVsFloatingSwap.getCPtr(swap), Exercise.getCPtr(exercise)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public Settlement.Type settlementType() {
    Settlement.Type ret = (Settlement.Type)NQuantLibcPINVOKE.Swaption_settlementType(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Settlement.Method settlementMethod() {
    Settlement.Method ret = (Settlement.Method)NQuantLibcPINVOKE.Swaption_settlementMethod(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Swap.Type type() {
    Swap.Type ret = (Swap.Type)NQuantLibcPINVOKE.Swaption_type(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FixedVsFloatingSwap underlying() {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.Swaption_underlying(swigCPtr);
    FixedVsFloatingSwap ret = (cPtr == global::System.IntPtr.Zero) ? null : new FixedVsFloatingSwap(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double impliedVolatility(double price, YieldTermStructureHandle discountCurve, double guess, double accuracy, uint maxEvaluations, double minVol, double maxVol, VolatilityType type, double displacement, Swaption.PriceType priceType) {
    double ret = NQuantLibcPINVOKE.Swaption_impliedVolatility__SWIG_0(swigCPtr, price, YieldTermStructureHandle.getCPtr(discountCurve), guess, accuracy, maxEvaluations, minVol, maxVol, (int)type, displacement, (int)priceType);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double impliedVolatility(double price, YieldTermStructureHandle discountCurve, double guess, double accuracy, uint maxEvaluations, double minVol, double maxVol, VolatilityType type, double displacement) {
    double ret = NQuantLibcPINVOKE.Swaption_impliedVolatility__SWIG_1(swigCPtr, price, YieldTermStructureHandle.getCPtr(discountCurve), guess, accuracy, maxEvaluations, minVol, maxVol, (int)type, displacement);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double impliedVolatility(double price, YieldTermStructureHandle discountCurve, double guess, double accuracy, uint maxEvaluations, double minVol, double maxVol, VolatilityType type) {
    double ret = NQuantLibcPINVOKE.Swaption_impliedVolatility__SWIG_2(swigCPtr, price, YieldTermStructureHandle.getCPtr(discountCurve), guess, accuracy, maxEvaluations, minVol, maxVol, (int)type);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double impliedVolatility(double price, YieldTermStructureHandle discountCurve, double guess, double accuracy, uint maxEvaluations, double minVol, double maxVol) {
    double ret = NQuantLibcPINVOKE.Swaption_impliedVolatility__SWIG_3(swigCPtr, price, YieldTermStructureHandle.getCPtr(discountCurve), guess, accuracy, maxEvaluations, minVol, maxVol);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double impliedVolatility(double price, YieldTermStructureHandle discountCurve, double guess, double accuracy, uint maxEvaluations, double minVol) {
    double ret = NQuantLibcPINVOKE.Swaption_impliedVolatility__SWIG_4(swigCPtr, price, YieldTermStructureHandle.getCPtr(discountCurve), guess, accuracy, maxEvaluations, minVol);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double impliedVolatility(double price, YieldTermStructureHandle discountCurve, double guess, double accuracy, uint maxEvaluations) {
    double ret = NQuantLibcPINVOKE.Swaption_impliedVolatility__SWIG_5(swigCPtr, price, YieldTermStructureHandle.getCPtr(discountCurve), guess, accuracy, maxEvaluations);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double impliedVolatility(double price, YieldTermStructureHandle discountCurve, double guess, double accuracy) {
    double ret = NQuantLibcPINVOKE.Swaption_impliedVolatility__SWIG_6(swigCPtr, price, YieldTermStructureHandle.getCPtr(discountCurve), guess, accuracy);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double impliedVolatility(double price, YieldTermStructureHandle discountCurve, double guess) {
    double ret = NQuantLibcPINVOKE.Swaption_impliedVolatility__SWIG_7(swigCPtr, price, YieldTermStructureHandle.getCPtr(discountCurve), guess);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double vega() {
    double ret = NQuantLibcPINVOKE.Swaption_vega(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double delta() {
    double ret = NQuantLibcPINVOKE.Swaption_delta(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double annuity() {
    double ret = NQuantLibcPINVOKE.Swaption_annuity(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double forwardPrice() {
    double ret = NQuantLibcPINVOKE.Swaption_forwardPrice(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum PriceType {
    Spot,
    Forward
  }

}
