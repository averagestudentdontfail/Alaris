//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Swap : Instrument {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal Swap(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.Swap_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Swap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_Swap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Swap(Leg firstLeg, Leg secondLeg) : this(NQuantLibcPINVOKE.new_Swap__SWIG_0(Leg.getCPtr(firstLeg), Leg.getCPtr(secondLeg)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public Swap(LegVector legs, BoolVector payer) : this(NQuantLibcPINVOKE.new_Swap__SWIG_1(LegVector.getCPtr(legs), BoolVector.getCPtr(payer)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint numberOfLegs() {
    uint ret = NQuantLibcPINVOKE.Swap_numberOfLegs(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Date startDate() {
    Date ret = new Date(NQuantLibcPINVOKE.Swap_startDate(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Date maturityDate() {
    Date ret = new Date(NQuantLibcPINVOKE.Swap_maturityDate(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Leg leg(uint i) {
    Leg ret = new Leg(NQuantLibcPINVOKE.Swap_leg(swigCPtr, i), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double legNPV(uint j) {
    double ret = NQuantLibcPINVOKE.Swap_legNPV(swigCPtr, j);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double legBPS(uint k) {
    double ret = NQuantLibcPINVOKE.Swap_legBPS(swigCPtr, k);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double startDiscounts(uint j) {
    double ret = NQuantLibcPINVOKE.Swap_startDiscounts(swigCPtr, j);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double endDiscounts(uint j) {
    double ret = NQuantLibcPINVOKE.Swap_endDiscounts(swigCPtr, j);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double npvDateDiscount() {
    double ret = NQuantLibcPINVOKE.Swap_npvDateDiscount(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool payer(uint j) {
    bool ret = NQuantLibcPINVOKE.Swap_payer(swigCPtr, j);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum Type {
    Receiver = -1,
    Payer = 1
  }

}
