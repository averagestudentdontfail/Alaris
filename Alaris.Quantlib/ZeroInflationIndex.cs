//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ZeroInflationIndex : InflationIndex {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ZeroInflationIndex(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.ZeroInflationIndex_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ZeroInflationIndex obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_ZeroInflationIndex(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ZeroInflationIndex(string familyName, Region region, bool revised, Frequency frequency, Period availabilityLag, Currency currency, ZeroInflationTermStructureHandle h) : this(NQuantLibcPINVOKE.new_ZeroInflationIndex__SWIG_0(familyName, Region.getCPtr(region), revised, (int)frequency, Period.getCPtr(availabilityLag), Currency.getCPtr(currency), ZeroInflationTermStructureHandle.getCPtr(h)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public ZeroInflationIndex(string familyName, Region region, bool revised, Frequency frequency, Period availabilityLag, Currency currency) : this(NQuantLibcPINVOKE.new_ZeroInflationIndex__SWIG_1(familyName, Region.getCPtr(region), revised, (int)frequency, Period.getCPtr(availabilityLag), Currency.getCPtr(currency)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public Date lastFixingDate() {
    Date ret = new Date(NQuantLibcPINVOKE.ZeroInflationIndex_lastFixingDate(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ZeroInflationTermStructureHandle zeroInflationTermStructure() {
    ZeroInflationTermStructureHandle ret = new ZeroInflationTermStructureHandle(NQuantLibcPINVOKE.ZeroInflationIndex_zeroInflationTermStructure(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ZeroInflationIndex clone(ZeroInflationTermStructureHandle h) {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.ZeroInflationIndex_clone(swigCPtr, ZeroInflationTermStructureHandle.getCPtr(h));
    ZeroInflationIndex ret = (cPtr == global::System.IntPtr.Zero) ? null : new ZeroInflationIndex(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool needsForecast(Date fixingDate) {
    bool ret = NQuantLibcPINVOKE.ZeroInflationIndex_needsForecast(swigCPtr, Date.getCPtr(fixingDate));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
