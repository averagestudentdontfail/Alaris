//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IndexedCashFlow : CashFlow {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal IndexedCashFlow(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.IndexedCashFlow_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IndexedCashFlow obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          NQuantLibcPINVOKE.delete_IndexedCashFlow(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public IndexedCashFlow(double notional, Index index, Date baseDate, Date fixingDate, Date paymentDate, bool growthOnly) : this(NQuantLibcPINVOKE.new_IndexedCashFlow__SWIG_0(notional, Index.getCPtr(index), Date.getCPtr(baseDate), Date.getCPtr(fixingDate), Date.getCPtr(paymentDate), growthOnly), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public IndexedCashFlow(double notional, Index index, Date baseDate, Date fixingDate, Date paymentDate) : this(NQuantLibcPINVOKE.new_IndexedCashFlow__SWIG_1(notional, Index.getCPtr(index), Date.getCPtr(baseDate), Date.getCPtr(fixingDate), Date.getCPtr(paymentDate)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public double notional() {
    double ret = NQuantLibcPINVOKE.IndexedCashFlow_notional(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Date baseDate() {
    Date ret = new Date(NQuantLibcPINVOKE.IndexedCashFlow_baseDate(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Date fixingDate() {
    Date ret = new Date(NQuantLibcPINVOKE.IndexedCashFlow_fixingDate(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double baseFixing() {
    double ret = NQuantLibcPINVOKE.IndexedCashFlow_baseFixing(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double indexFixing() {
    double ret = NQuantLibcPINVOKE.IndexedCashFlow_indexFixing(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Index index() {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.IndexedCashFlow_index(swigCPtr);
    Index ret = (cPtr == global::System.IntPtr.Zero) ? null : new Index(cPtr, true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool growthOnly() {
    bool ret = NQuantLibcPINVOKE.IndexedCashFlow_growthOnly(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
