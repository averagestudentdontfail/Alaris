//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IterativeBootstrap : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IterativeBootstrap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IterativeBootstrap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IterativeBootstrap obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IterativeBootstrap() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_IterativeBootstrap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public IterativeBootstrap(double accuracy, double minValue, double maxValue, uint maxAttempts, double maxFactor, double minFactor, bool dontThrow, uint dontThrowSteps, uint maxEvaluations) : this(NQuantLibcPINVOKE.new_IterativeBootstrap__SWIG_0(accuracy, minValue, maxValue, maxAttempts, maxFactor, minFactor, dontThrow, dontThrowSteps, maxEvaluations), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public IterativeBootstrap(double accuracy, double minValue, double maxValue, uint maxAttempts, double maxFactor, double minFactor, bool dontThrow, uint dontThrowSteps) : this(NQuantLibcPINVOKE.new_IterativeBootstrap__SWIG_1(accuracy, minValue, maxValue, maxAttempts, maxFactor, minFactor, dontThrow, dontThrowSteps), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public IterativeBootstrap(double accuracy, double minValue, double maxValue, uint maxAttempts, double maxFactor, double minFactor, bool dontThrow) : this(NQuantLibcPINVOKE.new_IterativeBootstrap__SWIG_2(accuracy, minValue, maxValue, maxAttempts, maxFactor, minFactor, dontThrow), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public IterativeBootstrap(double accuracy, double minValue, double maxValue, uint maxAttempts, double maxFactor, double minFactor) : this(NQuantLibcPINVOKE.new_IterativeBootstrap__SWIG_3(accuracy, minValue, maxValue, maxAttempts, maxFactor, minFactor), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public IterativeBootstrap(double accuracy, double minValue, double maxValue, uint maxAttempts, double maxFactor) : this(NQuantLibcPINVOKE.new_IterativeBootstrap__SWIG_4(accuracy, minValue, maxValue, maxAttempts, maxFactor), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public IterativeBootstrap(double accuracy, double minValue, double maxValue, uint maxAttempts) : this(NQuantLibcPINVOKE.new_IterativeBootstrap__SWIG_5(accuracy, minValue, maxValue, maxAttempts), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public IterativeBootstrap(double accuracy, double minValue, double maxValue) : this(NQuantLibcPINVOKE.new_IterativeBootstrap__SWIG_6(accuracy, minValue, maxValue), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public IterativeBootstrap(double accuracy, double minValue) : this(NQuantLibcPINVOKE.new_IterativeBootstrap__SWIG_7(accuracy, minValue), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public IterativeBootstrap(double accuracy) : this(NQuantLibcPINVOKE.new_IterativeBootstrap__SWIG_8(accuracy), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public IterativeBootstrap() : this(NQuantLibcPINVOKE.new_IterativeBootstrap__SWIG_9(), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

}
