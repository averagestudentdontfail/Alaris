<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alaris.Double</name>
    </assembly>
    <members>
        <member name="T:Alaris.Double.DoubleBoundaryApproximation">
            <summary>
            Implements the quadratic approximation method for American option exercise boundaries.
            Based on Ju and Zhong (1999): "An Approximate Formula for Pricing American Options"
            Provides accurate boundary estimation with support for negative interest rates.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.#ctor(GeneralizedBlackScholesProcess,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the DoubleBoundaryApproximation with market parameters.
            </summary>
            <param name="process">The underlying stochastic process.</param>
            <param name="strike">Strike price of the option.</param>
            <param name="maturity">Time to maturity in years.</param>
            <param name="riskFreeRate">Risk-free interest rate (supports negative values).</param>
            <param name="dividendYield">Continuous dividend yield.</param>
            <param name="volatility">Volatility of the underlying asset.</param>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.Calculate(System.Double,System.Boolean)">
            <summary>
            Calculates the exercise boundaries using the quadratic approximation method.
            </summary>
            <param name="spot">Current spot price of the underlying.</param>
            <param name="isCall">True for call option, false for put option.</param>
            <returns>The boundary result containing upper and lower boundaries.</returns>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.ApproximateValue(System.Double,System.Double,System.Boolean,Alaris.Double.BoundaryResult)">
            <summary>
            Calculates the approximate option value given the boundaries.
            </summary>
            <param name="spot">Current spot price.</param>
            <param name="strike">Strike price.</param>
            <param name="isCall">True for call, false for put.</param>
            <param name="boundaries">The calculated exercise boundaries.</param>
            <returns>Approximate option value.</returns>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.CalculateCallBoundary(System.Double,System.Double)">
            <summary>
            Calculates the call option exercise boundary.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.CalculatePutBoundary(System.Double,System.Double)">
            <summary>
            Calculates the put option exercise boundary.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.CalculateQ1(System.Double)">
            <summary>
            Calculates the q1 parameter from the Ju-Zhong formula.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.CalculateQ2(System.Double)">
            <summary>
            Calculates the q2 parameter from the Ju-Zhong formula.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.CalculateCriticalPrice(System.Double,System.Boolean,System.Double)">
            <summary>
            Calculates the initial critical price estimate.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.RefineCallBoundary(System.Double,System.Double,System.Double)">
            <summary>
            Refines the call boundary using iterative methods.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.RefinePutBoundary(System.Double,System.Double,System.Double)">
            <summary>
            Refines the put boundary using iterative methods.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.CalculateEarlyExercisePremium(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Calculates the early exercise premium component.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.EstimateCrossingTime(System.Double,System.Double,System.Boolean)">
            <summary>
            Estimates the expected time until the spot price crosses the boundary.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.CalculateD1(System.Double,System.Double,System.Double)">
            <summary>
            Calculates d1 for the Black-Scholes formula.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.NormalCDF(System.Double)">
            <summary>
            Standard normal cumulative distribution function.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.Erf(System.Double)">
            <summary>
            Error function approximation (Abramowitz and Stegun).
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.ValidateParameters">
            <summary>
            Validates all input parameters for the approximation.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.Dispose">
            <summary>
            Disposes of unmanaged resources.
            </summary>
        </member>
        <member name="T:Alaris.Double.BoundaryResult">
            <summary>
            Contains the results of boundary calculations including upper and lower exercise boundaries.
            </summary>
        </member>
        <member name="P:Alaris.Double.BoundaryResult.UpperBoundary">
            <summary>
            Gets or sets the upper exercise boundary (relevant for call options).
            For American calls with dividends, this is the price above which immediate exercise is optimal.
            </summary>
        </member>
        <member name="P:Alaris.Double.BoundaryResult.LowerBoundary">
            <summary>
            Gets or sets the lower exercise boundary (relevant for put options).
            For American puts, this is the price below which immediate exercise is optimal.
            </summary>
        </member>
        <member name="P:Alaris.Double.BoundaryResult.CrossingTime">
            <summary>
            Gets or sets the estimated time until the spot price crosses the boundary.
            Measured in years from the current evaluation date.
            </summary>
        </member>
        <member name="M:Alaris.Double.BoundaryResult.ShouldExerciseCall(System.Double)">
            <summary>
            Determines if immediate exercise is optimal for a call option at the given spot price.
            </summary>
        </member>
        <member name="M:Alaris.Double.BoundaryResult.ShouldExercisePut(System.Double)">
            <summary>
            Determines if immediate exercise is optimal for a put option at the given spot price.
            </summary>
        </member>
        <member name="M:Alaris.Double.BoundaryResult.DistanceToBoundaryPercent(System.Double,System.Boolean)">
            <summary>
            Gets the distance to the exercise boundary as a percentage of spot.
            </summary>
        </member>
        <member name="T:Alaris.Double.DoubleBoundaryEngine">
            <summary>
            Advanced American option pricing engine using the double boundary method.
            Supports negative interest rates and provides accurate pricing with Greeks.
            Based on the Ju-Zhong (1999) quadratic approximation method via QdFpAmericanEngine.
            Greeks are computed using central finite differences from MathNet.Numerics.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryEngine.#ctor(GeneralizedBlackScholesProcess,SimpleQuote,QdFpIterationScheme)">
            <summary>
            Initializes a new instance of the DoubleBoundaryEngine.
            </summary>
            <param name="process">The Black-Scholes-Merton process for the underlying.</param>
            <param name="underlyingQuote">Optional SimpleQuote for Greek calculations. If not provided, Greeks will not be calculated.</param>
            <param name="scheme">Optional iteration scheme for numerical solver.</param>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryEngine.op_Implicit(Alaris.Double.DoubleBoundaryEngine)~PricingEngine">
            <summary>
            Implicit conversion to PricingEngine for seamless integration with QuantLib VanillaOption.
            </summary>
            <param name="engine">The DoubleBoundaryEngine to convert.</param>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryEngine.GetPricingEngine">
            <summary>
            Gets the underlying PricingEngine for explicit use with VanillaOption.
            </summary>
            <returns>The underlying QdFpAmericanEngine.</returns>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryEngine.Calculate(VanillaOption)">
            <summary>
            Calculates the option price and Greeks for an American option using central finite differences.
            All Greeks are computed using symmetric (central) finite difference schemes for maximum accuracy.
            </summary>
            <param name="option">The vanilla option to price.</param>
            <returns>Complete option pricing results including all Greeks.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when required quotes are unavailable.</exception>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryEngine.CalculateVega(VanillaOption)">
            <summary>
            Calculates vega using central finite differences by reconstructing the process with bumped volatility.
            Uses symmetric bumping (up and down) for accurate derivative estimation.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryEngine.CalculateTheta(VanillaOption)">
            <summary>
            Calculates theta using central finite differences by shifting evaluation date.
            Uses symmetric time shifts for accurate time decay estimation.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryEngine.CalculateRho(VanillaOption)">
            <summary>
            Calculates rho using central finite differences by reconstructing the process with bumped rates.
            Uses symmetric rate bumping for accurate sensitivity estimation.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryEngine.CalculateWithTiming(VanillaOption)">
            <summary>
            Calculates option price and Greeks with performance timing.
            </summary>
            <param name="option">The vanilla option to price.</param>
            <returns>Tuple containing results and elapsed time in milliseconds.</returns>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryEngine.SensitivityAnalysis(VanillaOption,System.Double,System.Double,System.Int32)">
            <summary>
            Performs sensitivity analysis by varying the underlying spot price.
            Generates a price-Greek profile across a range of spot prices.
            All Greeks at each point are calculated using central finite differences.
            </summary>
            <param name="option">The vanilla option to analyse.</param>
            <param name="spotMin">Minimum spot price for analysis.</param>
            <param name="spotMax">Maximum spot price for analysis.</param>
            <param name="steps">Number of steps in the spot range (minimum 2).</param>
            <returns>Dictionary mapping spot prices to option results.</returns>
            <exception cref="T:System.ArgumentException">Thrown when parameters are invalid.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when underlying quote is unavailable.</exception>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryEngine.Dispose">
            <summary>
            Disposes of the pricing engine resources.
            </summary>
        </member>
        <member name="T:Alaris.Double.OptionResult">
            <summary>
            Complete option pricing results including price and all Greeks.
            All Greeks are computed using central finite differences for maximum accuracy.
            </summary>
        </member>
        <member name="P:Alaris.Double.OptionResult.Price">
            <summary>Gets or sets the option price (NPV).</summary>
        </member>
        <member name="P:Alaris.Double.OptionResult.Delta">
            <summary>
            Gets or sets delta: rate of change of option value with respect to underlying price.
            Computed using central finite differences: (V(S+h) - V(S-h)) / (2h).
            </summary>
        </member>
        <member name="P:Alaris.Double.OptionResult.Gamma">
            <summary>
            Gets or sets gamma: rate of change of delta with respect to underlying price (convexity).
            Represents the second derivative of option value with respect to spot.
            Computed using central finite differences for maximum accuracy.
            </summary>
        </member>
        <member name="P:Alaris.Double.OptionResult.Vega">
            <summary>
            Gets or sets vega: sensitivity to volatility changes.
            Represents derivative of option value with respect to volatility (in decimal form).
            Computed using central finite differences with volatility bumps.
            </summary>
        </member>
        <member name="P:Alaris.Double.OptionResult.Theta">
            <summary>
            Gets or sets theta: rate of time decay (per day).
            Conventionally negative, representing value loss as time passes.
            Computed using central finite differences with symmetric date shifts.
            </summary>
        </member>
        <member name="P:Alaris.Double.OptionResult.Rho">
            <summary>
            Gets or sets rho: sensitivity to interest rate changes.
            Scaled to represent change per 1% (0.01) change in interest rate.
            Computed using central finite differences with rate bumps.
            </summary>
        </member>
        <member name="T:Alaris.Double.DoubleBoundarySolver">
            <summary>
            Solves for the optimal exercise boundaries of American options using the double boundary method.
            Implements the Ju-Zhong (1999) quadratic approximation with iterative refinement.
            Supports negative interest rates and provides high accuracy for near-expiration options.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.#ctor(GeneralizedBlackScholesProcess,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the DoubleBoundarySolver.
            </summary>
            <param name="process">The Black-Scholes-Merton stochastic process.</param>
            <param name="strike">The strike price of the option.</param>
            <param name="maturity">Time to maturity in years.</param>
            <param name="riskFreeRate">The risk-free interest rate (can be negative).</param>
            <param name="dividendYield">The continuous dividend yield.</param>
            <param name="volatility">The volatility of the underlying asset.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when process is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when parameters are invalid.</exception>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.SolveBoundaries(System.Double,System.Boolean)">
            <summary>
            Solves for the optimal exercise boundaries at the current evaluation date.
            </summary>
            <param name="spot">Current spot price of the underlying asset.</param>
            <param name="isCall">True for call options, false for put options.</param>
            <returns>Boundary solution including upper and lower exercise boundaries.</returns>
            <exception cref="T:System.ArgumentException">Thrown when spot price is invalid.</exception>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.SolveWithValue(System.Double,System.Double,System.Boolean)">
            <summary>
            Solves for boundaries and calculates the option value at the current spot price.
            </summary>
            <param name="spot">Current spot price.</param>
            <param name="strike">Strike price.</param>
            <param name="isCall">True for call, false for put.</param>
            <returns>Tuple containing the option value and boundary result.</returns>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.CalculateOptionValue(System.Double,System.Double,System.Boolean,Alaris.Double.BoundaryResult)">
            <summary>
            Calculates the option value given the exercise boundaries.
            </summary>
            <param name="spot">Current spot price.</param>
            <param name="strike">Strike price.</param>
            <param name="isCall">True for call, false for put.</param>
            <param name="boundaries">The exercise boundaries.</param>
            <returns>The option value.</returns>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.AnalyzeSensitivity(System.Double,System.Double,System.Int32,System.Double,System.Boolean)">
            <summary>
            Performs a sensitivity analysis across a range of spot prices.
            </summary>
            <param name="spotMin">Minimum spot price.</param>
            <param name="spotMax">Maximum spot price.</param>
            <param name="steps">Number of steps in the analysis.</param>
            <param name="strike">Strike price.</param>
            <param name="isCall">True for call, false for put.</param>
            <returns>List of spot prices with corresponding boundaries and values.</returns>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.ValidateParameters(System.Double,System.Double,System.Double)">
            <summary>
            Validates input parameters for solver initialization.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.Dispose">
            <summary>
            Disposes of unmanaged resources.
            </summary>
        </member>
        <member name="T:Alaris.Double.SensitivityPoint">
            <summary>
            Represents a point in sensitivity analysis with spot price, option value, and boundaries.
            </summary>
        </member>
        <member name="P:Alaris.Double.SensitivityPoint.Spot">
            <summary>
            Gets or sets the spot price.
            </summary>
        </member>
        <member name="P:Alaris.Double.SensitivityPoint.OptionValue">
            <summary>
            Gets or sets the option value at this spot price.
            </summary>
        </member>
        <member name="P:Alaris.Double.SensitivityPoint.UpperBoundary">
            <summary>
            Gets or sets the upper exercise boundary (for calls).
            </summary>
        </member>
        <member name="P:Alaris.Double.SensitivityPoint.LowerBoundary">
            <summary>
            Gets or sets the lower exercise boundary (for puts).
            </summary>
        </member>
        <member name="P:Alaris.Double.SensitivityPoint.CrossingTime">
            <summary>
            Gets or sets the estimated time until boundary crossing.
            </summary>
        </member>
        <member name="M:Alaris.Double.SensitivityPoint.IntrinsicValueCall(System.Double)">
            <summary>
            Gets the intrinsic value for a call option.
            </summary>
        </member>
        <member name="M:Alaris.Double.SensitivityPoint.IntrinsicValuePut(System.Double)">
            <summary>
            Gets the intrinsic value for a put option.
            </summary>
        </member>
        <member name="M:Alaris.Double.SensitivityPoint.TimeValue(System.Double,System.Boolean)">
            <summary>
            Gets the time value (option value minus intrinsic value).
            </summary>
        </member>
    </members>
</doc>
