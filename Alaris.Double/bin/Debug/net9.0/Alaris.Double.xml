<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alaris.Double</name>
    </assembly>
    <members>
        <member name="T:Alaris.Double.DoubleBoundaryApproximation">
            <summary>
            Provides analytical approximations for American option early exercise boundaries 
            under negative interest rate regimes using the QD+ algorithm.
            </summary>
            <remarks>
            <para>
            This class implements the double boundary approximation methodology from:
            Healy, J. (2021). "Pricing American Options Under Negative Rates"
            Specifically adapts the Li (2005) QD+ algorithm for negative rate environments.
            </para>
            <para>
            The approximation is valid when q &lt; r &lt; 0, where two exercise boundaries exist.
            For other regimes, use single boundary methods or European pricing.
            </para>
            </remarks>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the DoubleBoundaryApproximation class.
            </summary>
            <param name="spot">Current asset price S₀</param>
            <param name="strike">Strike price K</param>
            <param name="maturity">Time to maturity T (in years)</param>
            <param name="rate">Risk-free interest rate r</param>
            <param name="dividendYield">Continuous dividend yield q</param>
            <param name="volatility">Volatility σ</param>
            <param name="isCall">True for call options, false for put options</param>
            <exception cref="T:System.ArgumentException">Thrown when parameters are invalid</exception>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.CalculateBoundaries">
            <summary>
            Calculates both exercise boundaries using the QD+ approximation method.
            </summary>
            <returns>
            A result containing the upper and lower boundaries, or indication if boundaries cross.
            When boundaries cross, the approximation is invalid and European pricing should be used.
            </returns>
            <remarks>
            Implements Healy (2021) Equations 9-14 using Super Halley's method for convergence.
            The two boundaries are solved independently as separate systems.
            </remarks>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.ApproximateValue">
            <summary>
            Approximates the American option value using the calculated boundaries.
            </summary>
            <returns>
            The approximate American option value, or European value if approximation fails.
            </returns>
            <remarks>
            Uses Healy (2021) Equation 13 for the early exercise premium:
            e(S) = a₁·S^λ₁·1_{S≥S*₁} + a₂·S^λ₂·1_{S≤S*₂}
            </remarks>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.ShouldExerciseImmediately(Alaris.Double.BoundaryResult)">
            <summary>
            Determines if the option should be exercised immediately based on boundaries.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.CalculateEarlyExercisePremium(Alaris.Double.BoundaryResult)">
            <summary>
            Calculates the early exercise premium using the QD+ approximation.
            </summary>
            <remarks>
            Implements Healy (2021) Equation 13 with coefficients determined by
            the continuity conditions at the boundaries (Equations 11-12).
            </remarks>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.CalculateLambdas">
            <summary>
            Calculates the lambda values from Healy (2021) Equation 9.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.CalculateUpperBoundaryCoefficient(System.Double,System.Double)">
            <summary>
            Calculates the coefficient a₁ using boundary continuity conditions.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.CalculateLowerBoundaryCoefficient(System.Double,System.Double)">
            <summary>
            Calculates the coefficient a₂ using boundary continuity conditions.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.CalculateEuropeanValue(System.Nullable{System.Double})">
            <summary>
            Calculates European option value using Black-Scholes formula.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.CalculateIntrinsicValue">
            <summary>
            Calculates intrinsic value (immediate exercise value).
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.CalculateD1(System.Double)">
            <summary>
            Calculates d₁ from Black-Scholes formula.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.NormalCDF(System.Double)">
            <summary>
            Standard normal cumulative distribution function.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryApproximation.Erf(System.Double)">
            <summary>
            Error function approximation (Abramowitz and Stegun).
            </summary>
        </member>
        <member name="T:Alaris.Double.BoundaryResult">
            <summary>
            Represents the result of a boundary calculation for double boundary options.
            </summary>
        </member>
        <member name="P:Alaris.Double.BoundaryResult.UpperBoundary">
            <summary>
            The upper exercise boundary S*₁.
            </summary>
        </member>
        <member name="P:Alaris.Double.BoundaryResult.LowerBoundary">
            <summary>
            The lower exercise boundary S*₂.
            </summary>
        </member>
        <member name="P:Alaris.Double.BoundaryResult.BoundariesCross">
            <summary>
            Indicates whether the boundaries cross (making the approximation invalid).
            </summary>
        </member>
        <member name="P:Alaris.Double.BoundaryResult.IsValid">
            <summary>
            Indicates whether the boundary calculation is valid.
            </summary>
            <remarks>
            When false, European pricing should be used instead.
            </remarks>
        </member>
        <member name="M:Alaris.Double.BoundaryResult.ToString">
            <summary>
            Returns a string representation of the boundary result.
            </summary>
        </member>
        <member name="T:Alaris.Double.DoubleBoundaryEngine">
            <summary>
            Advanced American option pricing engine using the double boundary method.
            Supports negative interest rates and provides accurate pricing with Greeks.
            Based on the Ju-Zhong (1999) quadratic approximation method via QdFpAmericanEngine.
            Greeks are computed using central finite differences from MathNet.Numerics.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryEngine.#ctor(GeneralizedBlackScholesProcess,SimpleQuote,QdFpIterationScheme)">
            <summary>
            Initializes a new instance of the DoubleBoundaryEngine.
            </summary>
            <param name="process">The Black-Scholes-Merton process for the underlying.</param>
            <param name="underlyingQuote">Optional SimpleQuote for Greek calculations. If not provided, Greeks will not be calculated.</param>
            <param name="scheme">Optional iteration scheme for numerical solver.</param>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryEngine.op_Implicit(Alaris.Double.DoubleBoundaryEngine)~PricingEngine">
            <summary>
            Implicit conversion to PricingEngine for seamless integration with QuantLib VanillaOption.
            </summary>
            <param name="engine">The DoubleBoundaryEngine to convert.</param>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryEngine.GetPricingEngine">
            <summary>
            Gets the underlying PricingEngine for explicit use with VanillaOption.
            </summary>
            <returns>The underlying QdFpAmericanEngine.</returns>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryEngine.Calculate(VanillaOption)">
            <summary>
            Calculates the option price and Greeks for an American option using central finite differences.
            All Greeks are computed using symmetric (central) finite difference schemes for maximum accuracy.
            </summary>
            <param name="option">The vanilla option to price.</param>
            <returns>Complete option pricing results including all Greeks.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when required quotes are unavailable.</exception>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryEngine.CalculateVega(VanillaOption)">
            <summary>
            Calculates vega using central finite differences by reconstructing the process with bumped volatility.
            Uses symmetric bumping (up and down) for accurate derivative estimation.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryEngine.CalculateTheta(VanillaOption)">
            <summary>
            Calculates theta using central finite differences by shifting evaluation date.
            Uses symmetric time shifts for accurate time decay estimation.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryEngine.CalculateRho(VanillaOption)">
            <summary>
            Calculates rho using central finite differences by reconstructing the process with bumped rates.
            Uses symmetric rate bumping for accurate sensitivity estimation.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryEngine.CalculateWithTiming(VanillaOption)">
            <summary>
            Calculates option price and Greeks with performance timing.
            </summary>
            <param name="option">The vanilla option to price.</param>
            <returns>Tuple containing results and elapsed time in milliseconds.</returns>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryEngine.SensitivityAnalysis(VanillaOption,System.Double,System.Double,System.Int32)">
            <summary>
            Performs sensitivity analysis by varying the underlying spot price.
            Generates a price-Greek profile across a range of spot prices.
            All Greeks at each point are calculated using central finite differences.
            </summary>
            <param name="option">The vanilla option to analyse.</param>
            <param name="spotMin">Minimum spot price for analysis.</param>
            <param name="spotMax">Maximum spot price for analysis.</param>
            <param name="steps">Number of steps in the spot range (minimum 2).</param>
            <returns>Dictionary mapping spot prices to option results.</returns>
            <exception cref="T:System.ArgumentException">Thrown when parameters are invalid.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when underlying quote is unavailable.</exception>
        </member>
        <member name="M:Alaris.Double.DoubleBoundaryEngine.Dispose">
            <summary>
            Disposes of the pricing engine resources.
            </summary>
        </member>
        <member name="T:Alaris.Double.OptionResult">
            <summary>
            Complete option pricing results including price and all Greeks.
            All Greeks are computed using central finite differences for maximum accuracy.
            </summary>
        </member>
        <member name="P:Alaris.Double.OptionResult.Price">
            <summary>Gets or sets the option price (NPV).</summary>
        </member>
        <member name="P:Alaris.Double.OptionResult.Delta">
            <summary>
            Gets or sets delta: rate of change of option value with respect to underlying price.
            Computed using central finite differences: (V(S+h) - V(S-h)) / (2h).
            </summary>
        </member>
        <member name="P:Alaris.Double.OptionResult.Gamma">
            <summary>
            Gets or sets gamma: rate of change of delta with respect to underlying price (convexity).
            Represents the second derivative of option value with respect to spot.
            Computed using central finite differences for maximum accuracy.
            </summary>
        </member>
        <member name="P:Alaris.Double.OptionResult.Vega">
            <summary>
            Gets or sets vega: sensitivity to volatility changes.
            Represents derivative of option value with respect to volatility (in decimal form).
            Computed using central finite differences with volatility bumps.
            </summary>
        </member>
        <member name="P:Alaris.Double.OptionResult.Theta">
            <summary>
            Gets or sets theta: rate of time decay (per day).
            Conventionally negative, representing value loss as time passes.
            Computed using central finite differences with symmetric date shifts.
            </summary>
        </member>
        <member name="P:Alaris.Double.OptionResult.Rho">
            <summary>
            Gets or sets rho: sensitivity to interest rate changes.
            Scaled to represent change per 1% (0.01) change in interest rate.
            Computed using central finite differences with rate bumps.
            </summary>
        </member>
        <member name="T:Alaris.Double.DoubleBoundarySolver">
            <summary>
            Solves the Kim integral equation for American option early exercise boundaries
            under negative interest rate regimes with double boundaries.
            </summary>
            <remarks>
            <para>
            Implements the double boundary integral equation from Healy (2021) Equation 27:
            VA = VE + ∫[rK·exp(-rt)Φ(-d₂(S,u(t),t)) - qS·exp(-qt)Φ(-d₁(S,u(t),t))]dt
                    - ∫[rK·exp(-rt)Φ(-d₂(S,l(t),t)) - qS·exp(-qt)Φ(-d₁(S,l(t),t))]dt
            </para>
            <para>
            Uses the QD+ approximation as initial guess and refines via Gauss-Newton method.
            Valid for the regime q &lt; r &lt; 0 where two exercise boundaries exist.
            </para>
            <para>
            Reference: Healy, J. (2021). Pricing American Options Under Negative Rates. 
            Section 5, Equations 27-29.
            </para>
            </remarks>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the DoubleBoundarySolver.
            </summary>
            <param name="spot">Current asset price S₀</param>
            <param name="strike">Strike price K</param>
            <param name="maturity">Time to maturity T (in years)</param>
            <param name="rate">Risk-free interest rate r</param>
            <param name="dividendYield">Continuous dividend yield q</param>
            <param name="volatility">Volatility σ</param>
            <param name="isCall">True for call options, false for put options</param>
            <param name="collocationPoints">Number of time points for boundary discretization (default: 50)</param>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.SolveBoundaries">
            <summary>
            Solves for the exercise boundaries using the Kim integral equation.
            </summary>
            <returns>
            Tuple of (upper boundary array, lower boundary array, crossing time).
            Each array contains boundary values at collocation points from t=0 to t=T.
            </returns>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.CalculateValue">
            <summary>
            Calculates the American option value using the solved boundaries.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.GetInitialGuess">
            <summary>
            Gets the initial guess for boundaries from QD+ approximation.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.RefineUsingGaussNewton(System.Double[],System.Double[],System.Double)">
            <summary>
            Refines the boundary guess using Gauss-Newton method on the Kim integral equations.
            </summary>
            <remarks>
            Implements Healy (2021) Equations 28-29 for the two boundaries.
            Uses a 2m-dimensional Gauss-Newton solver where m is the number of collocation points.
            </remarks>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.EvaluateUpperBoundaryEquation(System.Double,System.Double[],System.Double[],System.Double)">
            <summary>
            Evaluates the Kim integral equation for the upper boundary at time ti.
            Implements Healy (2021) Equation 28.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.EvaluateLowerBoundaryEquation(System.Double,System.Double[],System.Double[],System.Double)">
            <summary>
            Evaluates the Kim integral equation for the lower boundary at time ti.
            Implements Healy (2021) Equation 29.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.CalculateIntegralTerm(System.Double,System.Double,System.Double[],System.Double[],System.Double,System.Boolean)">
            <summary>
            Calculates the integral term in the Kim equation.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.CalculateEarlyExercisePremium(System.Double[],System.Double[],System.Double)">
            <summary>
            Calculates the early exercise premium using the solved boundaries.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.InterpolateBoundary(System.Double[],System.Double)">
            <summary>
            Interpolates boundary value at a given time.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.FindCrossingTime(System.Double[],System.Double[])">
            <summary>
            Finds the time when boundaries cross.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.ShouldExerciseImmediately(System.Double,System.Double)">
            <summary>
            Checks if option should be exercised immediately.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.CalculateEuropeanValue(System.Double,System.Nullable{System.Double})">
            <summary>
            Calculates European option value.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.CalculateIntrinsicValue">
            <summary>
            Calculates intrinsic value.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.CalculateD1(System.Double,System.Double,System.Double)">
            <summary>
            Calculates d₁ for Black-Scholes formula.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.CalculateD2(System.Double,System.Double,System.Double)">
            <summary>
            Calculates d₂ for Black-Scholes formula.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.NormalCDF(System.Double)">
            <summary>
            Standard normal cumulative distribution function.
            </summary>
        </member>
        <member name="M:Alaris.Double.DoubleBoundarySolver.Erf(System.Double)">
            <summary>
            Error function approximation.
            </summary>
        </member>
        <member name="T:Alaris.Double.QdPlusApproximation">
            <summary>
            QD+ approximation for American option early exercise boundaries under negative interest rates.
            Implements the double boundary algorithm from Healy (2021): "Pricing American Options Under Negative Rates"
            specifically for the regime q &lt; r &lt; 0 where two exercise boundaries exist.
            </summary>
            <remarks>
            This implementation follows Healy's modifications of the Li (2005) QD+ algorithm for negative rates.
            The algorithm solves two independent systems to find the upper boundary S*₁ and lower boundary S*₂.
            Reference: Healy, J. (2021). Pricing American options under negative rates. Equations 8-17.
            </remarks>
        </member>
        <member name="M:Alaris.Double.QdPlusApproximation.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes the QD+ approximation solver for double boundaries.
            </summary>
            <param name="spot">Current asset price S</param>
            <param name="strike">Strike price K</param>
            <param name="maturity">Time to maturity T</param>
            <param name="rate">Risk-free interest rate r</param>
            <param name="dividendYield">Dividend yield q</param>
            <param name="volatility">Volatility σ</param>
            <param name="isCall">True for call options, false for put options</param>
        </member>
        <member name="M:Alaris.Double.QdPlusApproximation.CalculateBoundaries">
            <summary>
            Computes both exercise boundaries using the QD+ approximation.
            </summary>
            <returns>Tuple of (upper boundary, lower boundary). Returns (K, K) if boundaries cross.</returns>
        </member>
        <member name="M:Alaris.Double.QdPlusApproximation.CalculateLambdas">
            <summary>
            Calculates λ₁ (negative) and λ₂ (positive) from Healy (2021) Equation 9.
            </summary>
        </member>
        <member name="M:Alaris.Double.QdPlusApproximation.CalculateLambdaDerivative(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates ∂λ/∂h needed for c₀ in Healy (2021) Equation 14.
            </summary>
        </member>
        <member name="M:Alaris.Double.QdPlusApproximation.GetUpperBoundaryInitialGuess">
            <summary>
            Gets the initial guess for the upper boundary from Healy (2021) page 5.
            </summary>
        </member>
        <member name="M:Alaris.Double.QdPlusApproximation.GetLowerBoundaryInitialGuess">
            <summary>
            Gets the initial guess for the lower boundary from Healy (2021) page 5.
            </summary>
        </member>
        <member name="M:Alaris.Double.QdPlusApproximation.SolveBoundary(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Solves for a single boundary using Super Halley's method (Healy 2021 Equation 17).
            </summary>
        </member>
        <member name="M:Alaris.Double.QdPlusApproximation.EvaluateRefinementEquation(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the QD+ refinement equation from Healy (2021) Equation 14.
            </summary>
            <remarks>
            For call (η=1): 1 = exp(-qT)Φ(d₁) + (λ + c₀)(S* - K - VE(S*))/S*
            For put (η=-1): -1 = -exp(-qT)Φ(-d₁) + (λ + c₀)(-S* + K + VE(S*))/S*
            </remarks>
        </member>
        <member name="M:Alaris.Double.QdPlusApproximation.CalculateC0(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates c₀ from Healy (2021) page 6 after Equation 14.
            </summary>
        </member>
        <member name="M:Alaris.Double.QdPlusApproximation.EvaluateRefinementDerivative(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            First derivative of the refinement equation (needed for Super Halley).
            </summary>
        </member>
        <member name="M:Alaris.Double.QdPlusApproximation.EvaluateRefinementSecondDerivative(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Second derivative of the refinement equation (needed for Super Halley).
            </summary>
        </member>
        <member name="M:Alaris.Double.QdPlusApproximation.CalculateEuropeanPrice(System.Double)">
            <summary>
            Calculates European option price using Black-Scholes formula.
            </summary>
        </member>
        <member name="M:Alaris.Double.QdPlusApproximation.CalculateEuropeanTheta(System.Double)">
            <summary>
            Calculates theta (time derivative) of European option price.
            </summary>
            <remarks>
            Θ is the time derivative of the European option price, needed for c₀ calculation.
            This is the Black-Scholes theta formula.
            </remarks>
        </member>
        <member name="M:Alaris.Double.QdPlusApproximation.CalculateD1(System.Double,System.Double,System.Double)">
            <summary>
            Calculates d₁ from Black-Scholes formula.
            </summary>
        </member>
        <member name="M:Alaris.Double.QdPlusApproximation.BoundariesCross(System.Double,System.Double)">
            <summary>
            Checks if boundaries cross (invalid configuration).
            </summary>
        </member>
        <member name="M:Alaris.Double.QdPlusApproximation.NormalCDF(System.Double)">
            <summary>
            Standard normal cumulative distribution function.
            </summary>
        </member>
        <member name="M:Alaris.Double.QdPlusApproximation.NormalPDF(System.Double)">
            <summary>
            Standard normal probability density function.
            </summary>
        </member>
        <member name="M:Alaris.Double.QdPlusApproximation.Erf(System.Double)">
            <summary>
            Error function approximation.
            </summary>
        </member>
    </members>
</doc>
